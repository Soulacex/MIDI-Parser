
Project-340.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08005a70  08005a70  00015a70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f64  08005f64  00027e9c  2**0
                  CONTENTS
  4 .ARM          00000000  08005f64  08005f64  00027e9c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f64  08005f64  00027e9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f68  08005f68  00015f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007e9c  20000000  08005f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d78  20007e9c  0800de08  00027e9c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ac14  0800de08  0002ac14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027e9c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00027ecc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000070db  00000000  00000000  00027f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e3  00000000  00000000  0002efea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000738  00000000  00000000  000310d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000507  00000000  00000000  00031808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003612  00000000  00000000  00031d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b05f  00000000  00000000  00035321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7d4a  00000000  00000000  00040380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029b8  00000000  00000000  001380cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0013aa84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20007e9c 	.word	0x20007e9c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a58 	.word	0x08005a58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007ea0 	.word	0x20007ea0
 80001cc:	08005a58 	.word	0x08005a58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db0b      	blt.n	8000c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 021f 	and.w	r2, r3, #31
 8000c74:	4907      	ldr	r1, [pc, #28]	; (8000c94 <__NVIC_EnableIRQ+0x38>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <GPIO_Init>:
static uint8_t flag;

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <GPIO_Init+0xc4>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	4a2a      	ldr	r2, [pc, #168]	; (8000d5c <GPIO_Init+0xc4>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cba:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <GPIO_Init+0xc4>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc6:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <GPIO_Init+0xc4>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a24      	ldr	r2, [pc, #144]	; (8000d5c <GPIO_Init+0xc4>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <GPIO_Init+0xc4>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <GPIO_Init+0xc4>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <GPIO_Init+0xc4>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <GPIO_Init+0xc4>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <GPIO_Init+0xc4>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <GPIO_Init+0xc4>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <GPIO_Init+0xc4>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	480e      	ldr	r0, [pc, #56]	; (8000d60 <GPIO_Init+0xc8>)
 8000d26:	f001 fde9 	bl	80028fc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 8000d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d30:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d34:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f001 fdda 	bl	80028fc <HAL_GPIO_Init>

	/* EXTI15_10_IRQn interrupt init*/
	// Note you will have to add EXTI15_10_IRQn Interrupt handler function as well
	// This is the interrupt handler for the blue button
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d48:	2028      	movs	r0, #40	; 0x28
 8000d4a:	f7ff ff87 	bl	8000c5c <__NVIC_EnableIRQ>

	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d4e:	2017      	movs	r0, #23
 8000d50:	f7ff ff84 	bl	8000c5c <__NVIC_EnableIRQ>

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	48000800 	.word	0x48000800

08000d64 <EXTI15_10_IRQHandler>:
 * @brief Interrupt handler for EXTI lines 15 to 10.
 *
 * Handles external interrupts on GPIO pins 15 to 10. Checks the state of the B1 button
 * and toggles the mode between manual and remote based on its current state.
 */
void EXTI15_10_IRQHandler() {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0) { // B1 button is pressed
 8000d68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <EXTI15_10_IRQHandler+0x40>)
 8000d6e:	f001 ff6f 	bl	8002c50 <HAL_GPIO_ReadPin>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10e      	bne.n	8000d96 <EXTI15_10_IRQHandler+0x32>
        if (toggle == 0) {
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <EXTI15_10_IRQHandler+0x44>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d103      	bne.n	8000d88 <EXTI15_10_IRQHandler+0x24>
            toggle = 1; // Set toggle to 1 for manual mode
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <EXTI15_10_IRQHandler+0x44>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e006      	b.n	8000d96 <EXTI15_10_IRQHandler+0x32>
        } else if (toggle == 1) {
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <EXTI15_10_IRQHandler+0x44>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d102      	bne.n	8000d96 <EXTI15_10_IRQHandler+0x32>
            toggle = 0; // Set toggle to 0 for remote mode
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <EXTI15_10_IRQHandler+0x44>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
        }
    }
    HAL_GPIO_EXTI_IRQHandler(B1_Pin); // Call the HAL handler for B1 pin interrupt
 8000d96:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d9a:	f001 ff71 	bl	8002c80 <HAL_GPIO_EXTI_IRQHandler>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	48000800 	.word	0x48000800
 8000da8:	20007eb8 	.word	0x20007eb8

08000dac <get_toggle>:
/**
 * @brief Gets the current toggle mode (manual or remote).
 *
 * @return The current toggle mode value (0 for remote, 1 for manual).
 */
int get_toggle() {
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
    return toggle; // Return the current toggle mode
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <get_toggle+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20007eb8 	.word	0x20007eb8

08000dc4 <get_flag>:
/**
 * @brief Gets the current flag value.
 *
 * @return The current flag value used for controlling LED behavior and actions.
 */
int get_flag() {
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
    return flag; // Return the current flag value
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <get_flag+0x14>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20007ebc 	.word	0x20007ebc

08000ddc <set_flag>:
/**
 * @brief Sets the flag value to control LED behavior.
 *
 * @param num The value to set the flag to.
 */
void set_flag(int num) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
    flag = num; // Set the flag to the specified value
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <set_flag+0x1c>)
 8000dea:	701a      	strb	r2, [r3, #0]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	20007ebc 	.word	0x20007ebc

08000dfc <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 9 to 5.
 *
 * Handles external interrupts on GPIO pins 9 to 5, specifically for the S1 button.
 */
void EXTI9_5_IRQHandler() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(S1_Pin); // Call the HAL handler for S1 pin interrupt
 8000e00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e04:	f001 ff3c 	bl	8002c80 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_GPIO_EXTI_Callback>:
 * - Flag 2 when the button is pressed and released as a single press.
 * - Flag 4 for a double press within 750 milliseconds.
 *
 * @param GPIO_Pin The GPIO pin that triggered the interrupt.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press_time = 0;  // Time of the last button press
    static int press_count = 0;           // Track the number of button presses
    uint32_t current_time;

    if (GPIO_Pin == S1_Pin) {
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e1c:	d132      	bne.n	8000e84 <HAL_GPIO_EXTI_Callback+0x78>
        delay_systick();  // Debounce delay right after detecting the button event
 8000e1e:	f001 fb47 	bl	80024b0 <delay_systick>

        if (!(S1_GPIO_Port->IDR & S1_Pin)) {  // Button is pressed
 8000e22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d117      	bne.n	8000e60 <HAL_GPIO_EXTI_Callback+0x54>
            current_time = get_count();  // Get the current time after debounce delay
 8000e30:	f001 fb08 	bl	8002444 <get_count>
 8000e34:	4603      	mov	r3, r0
 8000e36:	60fb      	str	r3, [r7, #12]
            if (current_time - last_press_time < 1000) {  // Check for double press within 1000 ms
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_GPIO_EXTI_Callback+0x80>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e44:	d205      	bcs.n	8000e52 <HAL_GPIO_EXTI_Callback+0x46>
                press_count++;
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_EXTI_Callback+0x4c>
            } else {
                press_count = 1;  // Reset press count for a single press
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
            }

            last_press_time = current_time;  // Update the last press time
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <HAL_GPIO_EXTI_Callback+0x80>)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6013      	str	r3, [r2, #0]
                flag = 4;  // Set flag to 4 for double press
                press_count = 0;  // Reset press count after handling double press
            }
        }
    }
}
 8000e5e:	e011      	b.n	8000e84 <HAL_GPIO_EXTI_Callback+0x78>
            if (press_count == 1) {  // Only handle the flag setting if it was a single press
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d103      	bne.n	8000e70 <HAL_GPIO_EXTI_Callback+0x64>
                flag = 2;  // Set flag to 2 for single press
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	701a      	strb	r2, [r3, #0]
}
 8000e6e:	e009      	b.n	8000e84 <HAL_GPIO_EXTI_Callback+0x78>
            } else if (press_count == 2) {
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d105      	bne.n	8000e84 <HAL_GPIO_EXTI_Callback+0x78>
                flag = 4;  // Set flag to 4 for double press
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	701a      	strb	r2, [r3, #0]
                press_count = 0;  // Reset press count after handling double press
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20007ec0 	.word	0x20007ec0
 8000e90:	20007ec4 	.word	0x20007ec4
 8000e94:	20007ebc 	.word	0x20007ebc

08000e98 <LED_Init>:

//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************

void LED_Init(int pin){
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <LED_Init+0xb8>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	4a2a      	ldr	r2, [pc, #168]	; (8000f50 <LED_Init+0xb8>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));
 8000eac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 8000ec6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000eda:	4313      	orrs	r3, r2
 8000edc:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 8000ede:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2103      	movs	r1, #3
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 8000ef8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2103      	movs	r1, #3
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 8000f10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	2101      	movs	r1, #1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000f24:	4013      	ands	r3, r2
 8000f26:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 8000f28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2103      	movs	r1, #3
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60cb      	str	r3, [r1, #12]
	
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000

08000f54 <LED_On>:

//******************************************************************************************
// Turn LED On
//******************************************************************************************
void LED_On(int pin){
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	GPIOA->ODR |= (1UL<<pin);
 8000f5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	2101      	movs	r1, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	614b      	str	r3, [r1, #20]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LED_Off>:

//******************************************************************************************
// Turn LED Off
//******************************************************************************************
void LED_Off(int pin){
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1UL<<pin);
 8000f86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f8a:	695a      	ldr	r2, [r3, #20]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	614b      	str	r3, [r1, #20]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <LED_Toggle>:

//******************************************************************************************
// Toggle LED 
//******************************************************************************************
void LED_Toggle(int pin){
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	GPIOA->ODR ^= (1UL<<pin);
 8000fb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fb6:	695a      	ldr	r2, [r3, #20]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000fc4:	4053      	eors	r3, r2
 8000fc6:	614b      	str	r3, [r1, #20]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <UART2_Init+0x40>)
 8000fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <UART2_Init+0x40>)
 8000fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe2:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <UART2_Init+0x40>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <UART2_Init+0x40>)
 8000fec:	f023 030c 	bic.w	r3, r3, #12
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <UART2_Init+0x40>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a06      	ldr	r2, [pc, #24]	; (8001014 <UART2_Init+0x40>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8001004:	f000 f80a 	bl	800101c <UART2_GPIO_Init>
	USART_Init(USART2);
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <UART2_Init+0x44>)
 800100a:	f000 f84f 	bl	80010ac <USART_Init>
	
//	NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
//	NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	40004400 	.word	0x40004400

0800101c <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <UART2_GPIO_Init+0x8c>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <UART2_GPIO_Init+0x8c>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 800102c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800103a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 800103c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001046:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800104a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 800104c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800105a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 800105c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001066:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800106a:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 800106c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001076:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800107a:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 800107c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800108a:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 800108c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001096:	f023 030c 	bic.w	r3, r3, #12
 800109a:	6053      	str	r3, [r2, #4]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000

080010ac <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 0201 	bic.w	r2, r3, #1
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f242 028d 	movw	r2, #8333	; 0x208d
 80010ea:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f043 020c 	orr.w	r2, r3, #12
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a2c      	ldr	r2, [pc, #176]	; (80011ac <USART_Init+0x100>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d129      	bne.n	8001154 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f043 0220 	orr.w	r2, r3, #32
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 0210 	bic.w	r2, r3, #16
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 0201 	bic.w	r2, r3, #1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <USART_Init+0x104>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d10b      	bne.n	8001174 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <USART_Init+0x108>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <USART_Init+0x108>)
 800116e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001172:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f043 0201 	orr.w	r2, r3, #1
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8001180:	bf00      	nop
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f9      	beq.n	8001182 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 800118e:	bf00      	nop
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f9      	beq.n	8001190 <USART_Init+0xe4>
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40004c00 	.word	0x40004c00
 80011b0:	40004400 	.word	0x40004400
 80011b4:	40013800 	.word	0x40013800

080011b8 <USART_Write>:
    // USART resets the RXNE flag automatically after reading DR
    return ((uint8_t)(USARTx->RDR & 0xFF));
    // Reading USART_DR automatically clears the RXNE flag
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e014      	b.n	80011f4 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80011ca:	bf00      	nop
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f9      	beq.n	80011cc <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag
		USARTx->TDR = buffer[i] & 0xFF;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 80011e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011ea:	f000 f819 	bl	8001220 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8e6      	bhi.n	80011ca <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 80011fc:	bf00      	nop
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f9      	beq.n	80011fe <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	61da      	str	r2, [r3, #28]
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2264      	movs	r2, #100	; 0x64
 800122c:	fb03 f202 	mul.w	r2, r3, r2
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <USART_Delay+0x3c>)
 8001232:	fba3 1302 	umull	r1, r3, r3, r2
 8001236:	1ad2      	subs	r2, r2, r3
 8001238:	0852      	lsrs	r2, r2, #1
 800123a:	4413      	add	r3, r2
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8001240:	bf00      	nop
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3b01      	subs	r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f9      	bne.n	8001242 <USART_Delay+0x22>
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	24924925 	.word	0x24924925

08001260 <USART_Read_Nonblocking>:
 *
 * @param USARTx The USART view to read from.
 * @return The byte read from the USART if data is available and not in manual mode,
 *         otherwise it'll return 0 meaning no character is available.
 */
uint8_t USART_Read_Nonblocking(USART_TypeDef* USARTx) {
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
    if (USARTx->ISR & USART_ISR_RXNE) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	f003 0320 	and.w	r3, r3, #32
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <USART_Read_Nonblocking+0x1e>
        return (uint8_t)(USARTx->RDR & 0xFF);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001278:	b29b      	uxth	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	e000      	b.n	8001280 <USART_Read_Nonblocking+0x20>
    }

    return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a15      	ldr	r2, [pc, #84]	; (8001300 <HAL_DAC_MspInit+0x74>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d124      	bne.n	80012f8 <HAL_DAC_MspInit+0x6c>
  {
    __HAL_RCC_DAC1_CLK_ENABLE();
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_DAC_MspInit+0x78>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	4a14      	ldr	r2, [pc, #80]	; (8001304 <HAL_DAC_MspInit+0x78>)
 80012b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012b8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_DAC_MspInit+0x78>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_DAC_MspInit+0x78>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <HAL_DAC_MspInit+0x78>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_DAC_MspInit+0x78>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012de:	2310      	movs	r3, #16
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f4:	f001 fb02 	bl	80028fc <HAL_GPIO_Init>
  }

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40007400 	.word	0x40007400
 8001304:	40021000 	.word	0x40021000

08001308 <DAC_Init>:
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
  }

}

void DAC_Init () {
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2224      	movs	r2, #36	; 0x24
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fa2e 	bl	8003776 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <DAC_Init+0x5c>)
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <DAC_Init+0x60>)
 800131e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001320:	4810      	ldr	r0, [pc, #64]	; (8001364 <DAC_Init+0x5c>)
 8001322:	f001 f93d 	bl	80025a0 <HAL_DAC_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <DAC_Init+0x28>
  {
    Error_Handler();
 800132c:	f000 ff88 	bl	8002240 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	4619      	mov	r1, r3
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <DAC_Init+0x5c>)
 800134c:	f001 f9bc 	bl	80026c8 <HAL_DAC_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <DAC_Init+0x52>
  {
    Error_Handler();
 8001356:	f000 ff73 	bl	8002240 <Error_Handler>
  }
}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20007ec8 	.word	0x20007ec8
 8001368:	40007400 	.word	0x40007400

0800136c <DAC_Start>:

void DAC_Start () {
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	HAL_DAC_Start (&hdac1, DAC_CHANNEL_1);
 8001370:	2100      	movs	r1, #0
 8001372:	4802      	ldr	r0, [pc, #8]	; (800137c <DAC_Start+0x10>)
 8001374:	f001 f936 	bl	80025e4 <HAL_DAC_Start>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20007ec8 	.word	0x20007ec8

08001380 <DAC_Set_Value>:

void DAC_Set_Value (uint32_t value) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue (&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <DAC_Set_Value+0x1c>)
 8001390:	f001 f975 	bl	800267e <HAL_DAC_SetValue>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20007ec8 	.word	0x20007ec8

080013a0 <printf>:
 * @param format A format string as in printf.
 * @param ... Variable arguments for the formating of the string.
 *
 * @return The number of characters written too output.
 */
int printf (const char* format, ...) {
 80013a0:	b40f      	push	{r0, r1, r2, r3}
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b096      	sub	sp, #88	; 0x58
 80013a6:	af00      	add	r7, sp, #0
    char buffer[80];  // The buffer created to store the formatted string

    va_list args;
    va_start(args, format);
 80013a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013ac:	603b      	str	r3, [r7, #0]

    // Basically here, we format the string and store it in the buffer, we made.
    int ret = vsprintf (buffer, format, args);
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 f9b9 	bl	800372c <vsiprintf>
 80013ba:	6578      	str	r0, [r7, #84]	; 0x54

    // This ends the processing of all arguments put in.
    va_end(args);

    // Writing the output to the terminal via USART.
    USART_Write (USART2, (uint8_t *)buffer, ret);
 80013bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <printf+0x38>)
 80013c4:	f7ff fef8 	bl	80011b8 <USART_Write>

    return ret;
 80013c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3758      	adds	r7, #88	; 0x58
 80013ce:	46bd      	mov	sp, r7
 80013d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013d4:	b004      	add	sp, #16
 80013d6:	4770      	bx	lr
 80013d8:	40004400 	.word	0x40004400

080013dc <USART2_IRQHandler>:

	 NVIC_EnableIRQ(USART2_IRQn);   // Enable interrupt of USART peripheral.
}


void USART2_IRQHandler() {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
    uint8_t byte = (uint8_t)(USART2->RDR & 0xFF);
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <USART2_IRQHandler+0x48>)
 80013e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	71fb      	strb	r3, [r7, #7]
    if (byte == '\r') {
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2b0d      	cmp	r3, #13
 80013f0:	d10e      	bne.n	8001410 <USART2_IRQHandler+0x34>
        USART_Write (USART2, &byte, 1);
 80013f2:	1dfb      	adds	r3, r7, #7
 80013f4:	2201      	movs	r2, #1
 80013f6:	4619      	mov	r1, r3
 80013f8:	480a      	ldr	r0, [pc, #40]	; (8001424 <USART2_IRQHandler+0x48>)
 80013fa:	f7ff fedd 	bl	80011b8 <USART_Write>
        byte = '\n';
 80013fe:	230a      	movs	r3, #10
 8001400:	71fb      	strb	r3, [r7, #7]
        USART_Write (USART2, &byte, 1);
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	2201      	movs	r2, #1
 8001406:	4619      	mov	r1, r3
 8001408:	4806      	ldr	r0, [pc, #24]	; (8001424 <USART2_IRQHandler+0x48>)
 800140a:	f7ff fed5 	bl	80011b8 <USART_Write>
    }
    else
        USART_Write (USART2, &byte, 1);
}
 800140e:	e005      	b.n	800141c <USART2_IRQHandler+0x40>
        USART_Write (USART2, &byte, 1);
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	2201      	movs	r2, #1
 8001414:	4619      	mov	r1, r3
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <USART2_IRQHandler+0x48>)
 8001418:	f7ff fece 	bl	80011b8 <USART_Write>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40004400 	.word	0x40004400

08001428 <main>:
#include "activity_noise.h"
#include "activity_wave.h"
#include "midi.h"
#include "read_track.h"

int main(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 800142c:	f000 fe2a 	bl	8002084 <System_Clock_Init>
	LED_Init(LED_PIN);
 8001430:	2007      	movs	r0, #7
 8001432:	f7ff fd31 	bl	8000e98 <LED_Init>
	UART2_Init();
 8001436:	f7ff fdcd 	bl	8000fd4 <UART2_Init>

//	readlines();
//	print_systick();
//	hw5();

	start_project();
 800143a:	f000 fb79 	bl	8001b30 <start_project>
 800143e:	2300      	movs	r3, #0
//	use_header();
//	run_project ();
//	hello ();
//	// application run function
//	run_demo() ;
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}

08001444 <handle_flash>:
 *
 * @param flash Pointer to the flash flag.
 * @param count Pointer to the counter value.
 * @return None.
 */
void handle_flash(uint8_t* flash, int* count) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
    if (*count == 800000) {
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a09      	ldr	r2, [pc, #36]	; (8001478 <handle_flash+0x34>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d10b      	bne.n	8001470 <handle_flash+0x2c>
        if (*flash) {
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <handle_flash+0x26>
        	delay_systick();
 8001460:	f001 f826 	bl	80024b0 <delay_systick>
            LED_Toggle(LED_PIN);
 8001464:	2007      	movs	r0, #7
 8001466:	f7ff fda0 	bl	8000faa <LED_Toggle>
        }
        *count = 0;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
    }
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	000c3500 	.word	0x000c3500

0800147c <handle_input>:
 * @param index Pointer to the command buffer index.
 * @param song_num Pointer to the current song number.
 * @param flash Pointer to the flash flag.
 * @return None.
 */
void handle_input(char* command, int* index, int* song_num, uint8_t* flash) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
	if (get_toggle()) {
 800148a:	f7ff fc8f 	bl	8000dac <get_toggle>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d12a      	bne.n	80014ea <handle_input+0x6e>
		return;
	}

    uint8_t byte = USART_Read_Nonblocking(USART2);
 8001494:	4817      	ldr	r0, [pc, #92]	; (80014f4 <handle_input+0x78>)
 8001496:	f7ff fee3 	bl	8001260 <USART_Read_Nonblocking>
 800149a:	4603      	mov	r3, r0
 800149c:	75fb      	strb	r3, [r7, #23]

    if (byte != 0) {
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <handle_input+0x70>
        if (byte == BACKSPACE) {
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d104      	bne.n	80014b4 <handle_input+0x38>
            handle_backspace(command, index);
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f823 	bl	80014f8 <handle_backspace>
 80014b2:	e01b      	b.n	80014ec <handle_input+0x70>
        } else if (byte == ENTER) {
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	2b0d      	cmp	r3, #13
 80014b8:	d106      	bne.n	80014c8 <handle_input+0x4c>
            handle_enter(command, index, song_num, flash);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 f873 	bl	80015ac <handle_enter>
 80014c6:	e011      	b.n	80014ec <handle_input+0x70>
        } else {
            putchar(byte);
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 f938 	bl	8003740 <putchar>
            command[*index] = byte;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4413      	add	r3, r2
 80014da:	7dfa      	ldrb	r2, [r7, #23]
 80014dc:	701a      	strb	r2, [r3, #0]
            (*index)++;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e000      	b.n	80014ec <handle_input+0x70>
		return;
 80014ea:	bf00      	nop
        }
    }
}
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40004400 	.word	0x40004400

080014f8 <handle_backspace>:
 * If the cursor is at the beginning of the command, it does nothing.
 *
 * @param command The string representing the command line input.
 * @param index Pointer to an integer representing the current cursor position in the command.
 */
void handle_backspace(char* command, int* index) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
    if (*index > 0) {
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	dd25      	ble.n	8001556 <handle_backspace+0x5e>
        putchar(BACKSPACE);
 800150a:	2008      	movs	r0, #8
 800150c:	f002 f918 	bl	8003740 <putchar>

        for (int i = *index - 1; i < strlen(command); i++) {
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3b01      	subs	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	e00b      	b.n	8001532 <handle_backspace+0x3a>
            command[i] = command[i + 1];
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3301      	adds	r3, #1
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	441a      	add	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	440b      	add	r3, r1
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	701a      	strb	r2, [r3, #0]
        for (int i = *index - 1; i < strlen(command); i++) {
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3301      	adds	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7fe fe9c 	bl	8000270 <strlen>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8ec      	bhi.n	800151a <handle_backspace+0x22>
        }

        putchar(' ');
 8001540:	2020      	movs	r0, #32
 8001542:	f002 f8fd 	bl	8003740 <putchar>
        putchar('\b');
 8001546:	2008      	movs	r0, #8
 8001548:	f002 f8fa 	bl	8003740 <putchar>
        (*index)--;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	601a      	str	r2, [r3, #0]
    }
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <handle_next>:
 * The song number increment will be handled after the song is played.
 *
 * @param song_num Pointer to the current song number.
 * @return None.
 */
void handle_next(int* song_num) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    parsingInProgress = 1;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <handle_next+0x28>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]
    parse_midi(*song_num);  // Parses but does not increment the song number
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f8e4 	bl	8001740 <parse_midi>
    parsingInProgress = 0;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <handle_next+0x28>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20007edc 	.word	0x20007edc

0800158c <handle_play>:
 * Plays the current song and increments the song number afterwards.
 *
 * @param song_num Pointer to the current song number.
 * @return None.
 */
void handle_play(int* song_num) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	*song_num = 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
    play_song(*song_num);  // Play the current song
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fa2a 	bl	80019f8 <play_song>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <handle_enter>:
 * @param index Pointer to the command buffer index.
 * @param song_num Pointer to the current song number.
 * @param flash Pointer to the flash flag.
 * @return None.
 */
void handle_enter(char* command, int* index, int* song_num, uint8_t* flash) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
    putchar('\n');
 80015ba:	200a      	movs	r0, #10
 80015bc:	f002 f8c0 	bl	8003740 <putchar>
    command[*index] = '\0';  // Null-terminate the command string
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]

    if (strcmp(command, "HELP") == 0) {
 80015ce:	4926      	ldr	r1, [pc, #152]	; (8001668 <handle_enter+0xbc>)
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f7fe fe55 	bl	8000280 <strcmp>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <handle_enter+0x36>
        all_commands();
 80015dc:	f000 fa86 	bl	8001aec <all_commands>
 80015e0:	e03a      	b.n	8001658 <handle_enter+0xac>
    } else if (strcmp(command, "NEXT") == 0) {
 80015e2:	4922      	ldr	r1, [pc, #136]	; (800166c <handle_enter+0xc0>)
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7fe fe4b 	bl	8000280 <strcmp>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d103      	bne.n	80015f8 <handle_enter+0x4c>
        handle_next(song_num);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ffb5 	bl	8001560 <handle_next>
 80015f6:	e02f      	b.n	8001658 <handle_enter+0xac>
    } else if (strcmp(command, "PLAY") == 0) {
 80015f8:	491d      	ldr	r1, [pc, #116]	; (8001670 <handle_enter+0xc4>)
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f7fe fe40 	bl	8000280 <strcmp>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <handle_enter+0x6e>
        handle_play(song_num);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffc0 	bl	800158c <handle_play>
        *flash = 0;  // Stop flashing when playing music
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
        LED_On(LED_PIN);  // Indicate playing status via LED
 8001612:	2007      	movs	r0, #7
 8001614:	f7ff fc9e 	bl	8000f54 <LED_On>
 8001618:	e01e      	b.n	8001658 <handle_enter+0xac>
    } else if (strcmp(command, "PAUSE") == 0) {
 800161a:	4916      	ldr	r1, [pc, #88]	; (8001674 <handle_enter+0xc8>)
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7fe fe2f 	bl	8000280 <strcmp>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d106      	bne.n	8001636 <handle_enter+0x8a>
        is_paused = 1;
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <handle_enter+0xcc>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]
        *flash = 1;  // Flashing might indicate paused state
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	e010      	b.n	8001658 <handle_enter+0xac>
    } else if (strcmp(command, "STOP") == 0) {
 8001636:	4911      	ldr	r1, [pc, #68]	; (800167c <handle_enter+0xd0>)
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f7fe fe21 	bl	8000280 <strcmp>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d106      	bne.n	8001652 <handle_enter+0xa6>
        *flash = 0;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
        LED_Off(LED_PIN);
 800164a:	2007      	movs	r0, #7
 800164c:	f7ff fc97 	bl	8000f7e <LED_Off>
 8001650:	e002      	b.n	8001658 <handle_enter+0xac>
    } else {
        printf("Invalid command\n\r");
 8001652:	480b      	ldr	r0, [pc, #44]	; (8001680 <handle_enter+0xd4>)
 8001654:	f7ff fea4 	bl	80013a0 <printf>
    }

    *index = 0;  // Reset command index for new input
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	08005a70 	.word	0x08005a70
 800166c:	08005a78 	.word	0x08005a78
 8001670:	08005a80 	.word	0x08005a80
 8001674:	08005a88 	.word	0x08005a88
 8001678:	20007ee0 	.word	0x20007ee0
 800167c:	08005a90 	.word	0x08005a90
 8001680:	08005a98 	.word	0x08005a98

08001684 <manual>:
 *
 * Initializes LED, GPIO, and SysTick timer. Prints a message indicating
 * that manual override mode is active. Controls LED flashing, song playback,
 * and project start based on button presses and timer intervals.
 */
void manual() {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
    init_systick(); // Initialize SysTick timer
 800168a:	f000 fee7 	bl	800245c <init_systick>
    printf("***MANUAL OVERRIDE MODE ACTIVE***\n\r"); // Print mode activation message
 800168e:	482a      	ldr	r0, [pc, #168]	; (8001738 <manual+0xb4>)
 8001690:	f7ff fe86 	bl	80013a0 <printf>

    uint8_t flash = 0; // Flag to control LED flashing
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
    int count = 0; // Timer count
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
    int song_num; // Current song index in playlist, static to maintain state across calls

    LED_Off(LED_PIN);
 800169c:	2007      	movs	r0, #7
 800169e:	f7ff fc6e 	bl	8000f7e <LED_Off>

    // Loop while in manual mode
    while (get_toggle()) {
 80016a2:	e03e      	b.n	8001722 <manual+0x9e>
        int flag = get_flag(); // Get current flag value
 80016a4:	f7ff fb8e 	bl	8000dc4 <get_flag>
 80016a8:	6038      	str	r0, [r7, #0]

        // Manage LED flashing every 800000 ticks
        if (count == 800000) {
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	4a23      	ldr	r2, [pc, #140]	; (800173c <manual+0xb8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d107      	bne.n	80016c2 <manual+0x3e>
            if (flash)
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <manual+0x3a>
                LED_Toggle(LED_PIN); // Toggle LED if flash flag is set
 80016b8:	2007      	movs	r0, #7
 80016ba:	f7ff fc76 	bl	8000faa <LED_Toggle>
            count = 0; // Reset timer count
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
        }

        // Handle different flag values for LED control and song playback
        if (flag == 4) { // Turn on LED and play the current song
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d10e      	bne.n	80016e6 <manual+0x62>
            flash = 0; // Disable flashing
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]
            LED_On(LED_PIN);
 80016cc:	2007      	movs	r0, #7
 80016ce:	f7ff fc41 	bl	8000f54 <LED_On>
            if (song_num == 1) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d102      	bne.n	80016de <manual+0x5a>
            	play_song(song_num); // Play the currently loaded song
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f98d 	bl	80019f8 <play_song>
            }
            set_flag(1); // Reset flag to prevent repeated action
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff fb7c 	bl	8000ddc <set_flag>
 80016e4:	e01a      	b.n	800171c <manual+0x98>
        } else if (flag == 3) { // Pause or enable flashing
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d102      	bne.n	80016f2 <manual+0x6e>
            flash = 1; // Enable flashing
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e014      	b.n	800171c <manual+0x98>
        } else if (flag == 1) { // Turn off LED
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <manual+0x80>
            flash = 0; // Disable flashing
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
            LED_Off(LED_PIN);
 80016fc:	2007      	movs	r0, #7
 80016fe:	f7ff fc3e 	bl	8000f7e <LED_Off>
 8001702:	e00b      	b.n	800171c <manual+0x98>
        } else if (flag == 2) { // Next song on double press within 1 second
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d108      	bne.n	800171c <manual+0x98>
            song_num = 1;
 800170a:	2301      	movs	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
            parse_midi(song_num); // Load the next song but don't play it yet
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f816 	bl	8001740 <parse_midi>
            set_flag(-1); // Reset flag after processing
 8001714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001718:	f7ff fb60 	bl	8000ddc <set_flag>
        }

        count++; // Increment timer count
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3301      	adds	r3, #1
 8001720:	60bb      	str	r3, [r7, #8]
    while (get_toggle()) {
 8001722:	f7ff fb43 	bl	8000dac <get_toggle>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1bb      	bne.n	80016a4 <manual+0x20>
    }

    start_project(); // Start the project after exiting manual mode
 800172c:	f000 fa00 	bl	8001b30 <start_project>
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	08005aac 	.word	0x08005aac
 800173c:	000c3500 	.word	0x000c3500

08001740 <parse_midi>:
 *
 * @param number The identifier (song number) of the MIDI file to be parsed.
 *
 * @return None.
 */
void parse_midi(int number) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	memset(tones, 0, sizeof(tones));
 8001748:	f44f 522f 	mov.w	r2, #11200	; 0x2bc0
 800174c:	2100      	movs	r1, #0
 800174e:	4828      	ldr	r0, [pc, #160]	; (80017f0 <parse_midi+0xb0>)
 8001750:	f002 f811 	bl	8003776 <memset>
	tones_index = 0;  // Reset the index for tones array
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <parse_midi+0xb4>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
    uint8_t* mthd = (uint8_t*)(get_song(number).p_song);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fbbd 	bl	8001ee4 <get_song>
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t len = mthd[7];
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	3307      	adds	r3, #7
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t num_tracks = mthd[11];
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	7adb      	ldrb	r3, [r3, #11]
 800177a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    mthd += 8 + len;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	3308      	adds	r3, #8
 8001782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001784:	4413      	add	r3, r2
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t buffer[5]; // Increase buffer size for null-terminating character

    for (int i = 1; i <= num_tracks; i++) {
 8001788:	2301      	movs	r3, #1
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
 800178c:	e025      	b.n	80017da <parse_midi+0x9a>
        strncpy((char*)buffer, (char*)mthd, 4);
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	2204      	movs	r2, #4
 8001794:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001796:	4618      	mov	r0, r3
 8001798:	f001 ffda 	bl	8003750 <strncpy>
        buffer[4] = '\0';
 800179c:	2300      	movs	r3, #0
 800179e:	743b      	strb	r3, [r7, #16]

        if (strcmp((char*)buffer, "MTrk") == 0) {
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	4914      	ldr	r1, [pc, #80]	; (80017f8 <parse_midi+0xb8>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fd6a 	bl	8000280 <strcmp>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d110      	bne.n	80017d4 <parse_midi+0x94>
            mthd += 4;
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	3304      	adds	r3, #4
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint32_t trk_len = convert_into_uint32((uint8_t*)&(*(uint32_t*)mthd));
 80017b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017ba:	f000 fc48 	bl	800204e <convert_into_uint32>
 80017be:	61f8      	str	r0, [r7, #28]
            mthd += 4;
 80017c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c2:	3304      	adds	r3, #4
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (i == 1) {
 80017c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d103      	bne.n	80017d4 <parse_midi+0x94>
                read_track(mthd, trk_len);
 80017cc:	69f9      	ldr	r1, [r7, #28]
 80017ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017d0:	f000 f9ee 	bl	8001bb0 <read_track>
    for (int i = 1; i <= num_tracks; i++) {
 80017d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d6:	3301      	adds	r3, #1
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017e0:	429a      	cmp	r2, r3
 80017e2:	ddd4      	ble.n	800178e <parse_midi+0x4e>
            }
        }
    }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3730      	adds	r7, #48	; 0x30
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20007eec 	.word	0x20007eec
 80017f4:	2000aaac 	.word	0x2000aaac
 80017f8:	08005ad0 	.word	0x08005ad0

080017fc <parse_channel_event>:
 *
 * @param index The starting index in the MIDI data for parsing events.
 * @return The new index after processing the MIDI event.
 *
 */
uint32_t parse_channel_event(int index) {
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
    uint32_t delay = 0;  // Variable to store the delay extracted from the MIDI data
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
    tone toneOfSong;  // Structure to hold tone data
    uint8_t bytes_read = get_delay(&the_song.p_song[index], &delay);  // Calculate delay from MIDI variable-length quantity
 8001808:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <parse_channel_event+0x14c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4413      	add	r3, r2
 8001810:	f107 0218 	add.w	r2, r7, #24
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fab8 	bl	8001d8c <get_delay>
 800181c:	4603      	mov	r3, r0
 800181e:	77fb      	strb	r3, [r7, #31]
    index += bytes_read;  // Move index forward by the number of bytes read for the delay
 8001820:	7ffb      	ldrb	r3, [r7, #31]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	607b      	str	r3, [r7, #4]

    // Check the event type at the current index position
    if (the_song.p_song[index] == 0x90) { // Note On event
 8001828:	4b47      	ldr	r3, [pc, #284]	; (8001948 <parse_channel_event+0x14c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4413      	add	r3, r2
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b90      	cmp	r3, #144	; 0x90
 8001834:	d12f      	bne.n	8001896 <parse_channel_event+0x9a>
        index++;  // Increment index to move past the event type byte
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3301      	adds	r3, #1
 800183a:	607b      	str	r3, [r7, #4]
        toneOfSong.delay = delay;  // Set delay in the tone structure
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	60bb      	str	r3, [r7, #8]
        toneOfSong.status = 1;  // Set status to 1 indicating a Note On
 8001840:	2301      	movs	r3, #1
 8001842:	733b      	strb	r3, [r7, #12]
        toneOfSong.note = hertz_to_midi_ticks(get_frequency_from_note(the_song.p_song[index]));  // Convert frequency to MIDI ticks and store
 8001844:	4b40      	ldr	r3, [pc, #256]	; (8001948 <parse_channel_event+0x14c>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fbbc 	bl	8001fcc <get_frequency_from_note>
 8001854:	eef0 7a40 	vmov.f32	s15, s0
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	f000 fb68 	bl	8001f30 <hertz_to_midi_ticks>
 8001860:	4603      	mov	r3, r0
 8001862:	613b      	str	r3, [r7, #16]
        index++;  // Move to the next byte for velocity
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3301      	adds	r3, #1
 8001868:	607b      	str	r3, [r7, #4]
        toneOfSong.velocity = the_song.p_song[index];  // Set velocity from MIDI data
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <parse_channel_event+0x14c>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	753b      	strb	r3, [r7, #20]
        tones[tones_index++] = toneOfSong;  // Add the tone to the tones array and increment index
 8001876:	4b35      	ldr	r3, [pc, #212]	; (800194c <parse_channel_event+0x150>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	b2d1      	uxtb	r1, r2
 800187e:	4a33      	ldr	r2, [pc, #204]	; (800194c <parse_channel_event+0x150>)
 8001880:	7011      	strb	r1, [r2, #0]
 8001882:	4a33      	ldr	r2, [pc, #204]	; (8001950 <parse_channel_event+0x154>)
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	4413      	add	r3, r2
 8001888:	461c      	mov	r4, r3
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001894:	e052      	b.n	800193c <parse_channel_event+0x140>
    }
    else if (the_song.p_song[index] == 0x80) { // Note Off event
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <parse_channel_event+0x14c>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b80      	cmp	r3, #128	; 0x80
 80018a2:	d12b      	bne.n	80018fc <parse_channel_event+0x100>
        index++;  // Increment index to move past the event type byte
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3301      	adds	r3, #1
 80018a8:	607b      	str	r3, [r7, #4]
        toneOfSong.delay = delay;  // Set delay in the tone structure
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	60bb      	str	r3, [r7, #8]
        toneOfSong.status = 0;  // Set status to 0 indicating a Note Off
 80018ae:	2300      	movs	r3, #0
 80018b0:	733b      	strb	r3, [r7, #12]
        toneOfSong.note = hertz_to_midi_ticks(get_frequency_from_note(the_song.p_song[index]));  // Convert frequency to MIDI ticks and store
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <parse_channel_event+0x14c>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fb85 	bl	8001fcc <get_frequency_from_note>
 80018c2:	eef0 7a40 	vmov.f32	s15, s0
 80018c6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ca:	f000 fb31 	bl	8001f30 <hertz_to_midi_ticks>
 80018ce:	4603      	mov	r3, r0
 80018d0:	613b      	str	r3, [r7, #16]
        index++;  // Move to the next byte for velocity
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3301      	adds	r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
        toneOfSong.velocity = 0;  // Velocity for Note Off is zero
 80018d8:	2300      	movs	r3, #0
 80018da:	753b      	strb	r3, [r7, #20]
        tones[tones_index++] = toneOfSong;  // Add the tone to the tones array and increment index
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <parse_channel_event+0x150>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	b2d1      	uxtb	r1, r2
 80018e4:	4a19      	ldr	r2, [pc, #100]	; (800194c <parse_channel_event+0x150>)
 80018e6:	7011      	strb	r1, [r2, #0]
 80018e8:	4a19      	ldr	r2, [pc, #100]	; (8001950 <parse_channel_event+0x154>)
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	4413      	add	r3, r2
 80018ee:	461c      	mov	r4, r3
 80018f0:	f107 0308 	add.w	r3, r7, #8
 80018f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018fa:	e01f      	b.n	800193c <parse_channel_event+0x140>
    }
    else {
        // Handle other MIDI events not directly linked to tone generation
        if (the_song.p_song[index] == 0xC0 || the_song.p_song[index] == 0xD0) {
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <parse_channel_event+0x14c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2bc0      	cmp	r3, #192	; 0xc0
 8001908:	d006      	beq.n	8001918 <parse_channel_event+0x11c>
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <parse_channel_event+0x14c>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2bd0      	cmp	r3, #208	; 0xd0
 8001916:	d103      	bne.n	8001920 <parse_channel_event+0x124>
            index += 1;  // Program Change or Channel Pressure (one-byte event data)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3301      	adds	r3, #1
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	e00d      	b.n	800193c <parse_channel_event+0x140>
        } else if (the_song.p_song[index] != 0xFF) {
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <parse_channel_event+0x14c>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4413      	add	r3, r2
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2bff      	cmp	r3, #255	; 0xff
 800192c:	d003      	beq.n	8001936 <parse_channel_event+0x13a>
            index += 2;  // Other events assumed to have two bytes of data
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3302      	adds	r3, #2
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	e002      	b.n	800193c <parse_channel_event+0x140>
        } else {
            index -= 1;  // Correct for boundary case if an unexpected FF byte is encountered
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3b01      	subs	r3, #1
 800193a:	607b      	str	r3, [r7, #4]
        }
    }
    return index;  // Return the updated index
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	20007ee4 	.word	0x20007ee4
 800194c:	2000aaac 	.word	0x2000aaac
 8001950:	20007eec 	.word	0x20007eec

08001954 <parse_song>:
 * meta events, and channel events. It adjusts indices accordingly to correctly parse
 * each segment of the song data.
 *
 * @param song_num The identifier for the song to be parsed.
 */
void parse_song(int song_num) {
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
    the_song = get_song(song_num);  // Retrieve song data
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4c24      	ldr	r4, [pc, #144]	; (80019f4 <parse_song+0xa0>)
 8001962:	463b      	mov	r3, r7
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fabc 	bl	8001ee4 <get_song>
 800196c:	4622      	mov	r2, r4
 800196e:	463b      	mov	r3, r7
 8001970:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001974:	e882 0003 	stmia.w	r2, {r0, r1}
    uint8_t numOfTracks = 0;  // Initialize track count
 8001978:	2300      	movs	r3, #0
 800197a:	77fb      	strb	r3, [r7, #31]

    // Iterate through song data
    for (int i = 0; i < the_song.size; i++) {
 800197c:	2300      	movs	r3, #0
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	e02e      	b.n	80019e0 <parse_song+0x8c>
        uint8_t hexValue = the_song.p_song[i];  // Current byte value
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <parse_song+0xa0>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4413      	add	r3, r2
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	75fb      	strb	r3, [r7, #23]

        // Handling different MIDI data types
        if (hexValue == 0x4D) {  // Track header
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	2b4d      	cmp	r3, #77	; 0x4d
 8001992:	d114      	bne.n	80019be <parse_song+0x6a>
            if (numOfTracks < 1) {
 8001994:	7ffb      	ldrb	r3, [r7, #31]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10a      	bne.n	80019b0 <parse_song+0x5c>
                i += 7 + the_song.p_song[i + 7];  // Jump past the header for the first track
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <parse_song+0xa0>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	3307      	adds	r3, #7
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	3307      	adds	r3, #7
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4413      	add	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	e002      	b.n	80019b6 <parse_song+0x62>
            } else {
                i += 7;  // Jump past subsequent headers
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	3307      	adds	r3, #7
 80019b4:	61bb      	str	r3, [r7, #24]
            }
            numOfTracks++;  // Increment track counter
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
 80019b8:	3301      	adds	r3, #1
 80019ba:	77fb      	strb	r3, [r7, #31]
 80019bc:	e00d      	b.n	80019da <parse_song+0x86>
        }
        else if (hexValue == 0xFF) {  // Meta event
 80019be:	7dfb      	ldrb	r3, [r7, #23]
 80019c0:	2bff      	cmp	r3, #255	; 0xff
 80019c2:	d105      	bne.n	80019d0 <parse_song+0x7c>
            i = parse_meta_event(i);  // Process meta event and update index
 80019c4:	69b8      	ldr	r0, [r7, #24]
 80019c6:	f000 fa33 	bl	8001e30 <parse_meta_event>
 80019ca:	4603      	mov	r3, r0
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	e004      	b.n	80019da <parse_song+0x86>
        }
        else {  // Channel event
            i = parse_channel_event(i);  // Process channel event and update index
 80019d0:	69b8      	ldr	r0, [r7, #24]
 80019d2:	f7ff ff13 	bl	80017fc <parse_channel_event>
 80019d6:	4603      	mov	r3, r0
 80019d8:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < the_song.size; i++) {
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	3301      	adds	r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <parse_song+0xa0>)
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d8cb      	bhi.n	8001982 <parse_song+0x2e>
        }
    }
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	3724      	adds	r7, #36	; 0x24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd90      	pop	{r4, r7, pc}
 80019f4:	20007ee4 	.word	0x20007ee4

080019f8 <play_song>:
 * the tones array to play each tone based on its timing and note characteristics. Tones are played
 * by setting DAC values according to note frequencies and durations calculated from MIDI data.
 *
 * @param song_num The identifier for the song to be played.
 */
void play_song(int song_num) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	init_systick();
 8001a00:	f000 fd2c 	bl	800245c <init_systick>
	GPIO_Init();
 8001a04:	f7ff f948 	bl	8000c98 <GPIO_Init>
	DAC_Init();
 8001a08:	f7ff fc7e 	bl	8001308 <DAC_Init>
	DAC_Start();
 8001a0c:	f7ff fcae 	bl	800136c <DAC_Start>
	parse_division(song_num);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f9f3 	bl	8001dfc <parse_division>
	parse_song(song_num);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ff9c 	bl	8001954 <parse_song>
	for (int i = 0; i < tones_index; i++) {
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	e04f      	b.n	8001ac2 <play_song+0xca>

		uint32_t delayInMicroseconds = (tones[i+1].delay * (tempo / division)) / 79;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a2c      	ldr	r2, [pc, #176]	; (8001ad8 <play_song+0xe0>)
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	4413      	add	r3, r2
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <play_song+0xe4>)
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	492b      	ldr	r1, [pc, #172]	; (8001ae0 <play_song+0xe8>)
 8001a34:	8809      	ldrh	r1, [r1, #0]
 8001a36:	fbb2 f2f1 	udiv	r2, r2, r1
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	4a29      	ldr	r2, [pc, #164]	; (8001ae4 <play_song+0xec>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	61bb      	str	r3, [r7, #24]

		uint32_t end_time = (uint32_t) get_counter() + delayInMicroseconds;
 8001a48:	f000 fab4 	bl	8001fb4 <get_counter>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4413      	add	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
		while (((uint32_t) get_counter()) < end_time) {
 8001a54:	e02c      	b.n	8001ab0 <play_song+0xb8>
			uint32_t half = tones[i].note / 2;
 8001a56:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <play_song+0xe0>)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3308      	adds	r3, #8
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	085b      	lsrs	r3, r3, #1
 8001a64:	613b      	str	r3, [r7, #16]
			uint32_t temp_count = (uint32_t) get_counter();
 8001a66:	f000 faa5 	bl	8001fb4 <get_counter>
 8001a6a:	60f8      	str	r0, [r7, #12]

			if ((temp_count % tones[i].note) < half) {
 8001a6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <play_song+0xe0>)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	4413      	add	r3, r2
 8001a74:	3308      	adds	r3, #8
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a7e:	fb01 f202 	mul.w	r2, r1, r2
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d904      	bls.n	8001a94 <play_song+0x9c>
				DAC_Set_Value(2048);
 8001a8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a8e:	f7ff fc77 	bl	8001380 <DAC_Set_Value>
 8001a92:	e002      	b.n	8001a9a <play_song+0xa2>
			} else {
				DAC_Set_Value(0);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff fc73 	bl	8001380 <DAC_Set_Value>
			}

			if (tones[i].velocity > 0) {
 8001a9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <play_song+0xe0>)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	4413      	add	r3, r2
 8001aa2:	330c      	adds	r3, #12
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <play_song+0xb8>
				DAC_Set_Value(0);
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7ff fc68 	bl	8001380 <DAC_Set_Value>
		while (((uint32_t) get_counter()) < end_time) {
 8001ab0:	f000 fa80 	bl	8001fb4 <get_counter>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d8cc      	bhi.n	8001a56 <play_song+0x5e>
	for (int i = 0; i < tones_index; i++) {
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <play_song+0xf0>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	4293      	cmp	r3, r2
 8001acc:	dba9      	blt.n	8001a22 <play_song+0x2a>
			}
		}
	}
}
 8001ace:	bf00      	nop
 8001ad0:	bf00      	nop
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20007eec 	.word	0x20007eec
 8001adc:	2000aab0 	.word	0x2000aab0
 8001ae0:	2000aab4 	.word	0x2000aab4
 8001ae4:	cf6474a9 	.word	0xcf6474a9
 8001ae8:	2000aaac 	.word	0x2000aaac

08001aec <all_commands>:
 *
 * Prints a list of available user commands to the console.
 *
 * @return None.
 */
void all_commands() {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
    printf("Available User Commands\n\r");
 8001af0:	4809      	ldr	r0, [pc, #36]	; (8001b18 <all_commands+0x2c>)
 8001af2:	f7ff fc55 	bl	80013a0 <printf>
    printf("NEXT – Show next song info\n\r");
 8001af6:	4809      	ldr	r0, [pc, #36]	; (8001b1c <all_commands+0x30>)
 8001af8:	f7ff fc52 	bl	80013a0 <printf>
    printf("PLAY – Play the song (LED on)\n\r");
 8001afc:	4808      	ldr	r0, [pc, #32]	; (8001b20 <all_commands+0x34>)
 8001afe:	f7ff fc4f 	bl	80013a0 <printf>
    printf("PAUSE – Pause the song (LED flash)\n\r");
 8001b02:	4808      	ldr	r0, [pc, #32]	; (8001b24 <all_commands+0x38>)
 8001b04:	f7ff fc4c 	bl	80013a0 <printf>
    printf("STOP – Stop the song (LED off)\n\r");
 8001b08:	4807      	ldr	r0, [pc, #28]	; (8001b28 <all_commands+0x3c>)
 8001b0a:	f7ff fc49 	bl	80013a0 <printf>
    printf("***REMOTE MODE ACTIVE***\n\r");
 8001b0e:	4807      	ldr	r0, [pc, #28]	; (8001b2c <all_commands+0x40>)
 8001b10:	f7ff fc46 	bl	80013a0 <printf>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	08005ad8 	.word	0x08005ad8
 8001b1c:	08005af4 	.word	0x08005af4
 8001b20:	08005b14 	.word	0x08005b14
 8001b24:	08005b38 	.word	0x08005b38
 8001b28:	08005b60 	.word	0x08005b60
 8001b2c:	08005b84 	.word	0x08005b84

08001b30 <start_project>:
 * and prints the available user commands. It then enters a loop to handle user input and
 * control the LED functionality based on what the user enters, of course.
 *
 * @return None.
 */
void start_project() {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
    LED_Init(LED_PIN);
 8001b36:	2007      	movs	r0, #7
 8001b38:	f7ff f9ae 	bl	8000e98 <LED_Init>
    GPIO_Init();
 8001b3c:	f7ff f8ac 	bl	8000c98 <GPIO_Init>
    init_systick();
 8001b40:	f000 fc8c 	bl	800245c <init_systick>
    printf("***REMOTE LED CONTROL MENU***\n\r");
 8001b44:	4819      	ldr	r0, [pc, #100]	; (8001bac <start_project+0x7c>)
 8001b46:	f7ff fc2b 	bl	80013a0 <printf>
    all_commands();
 8001b4a:	f7ff ffcf 	bl	8001aec <all_commands>

    LED_Off(LED_PIN);
 8001b4e:	2007      	movs	r0, #7
 8001b50:	f7ff fa15 	bl	8000f7e <LED_Off>

    int index = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    char command[16] = {0};
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
    uint8_t flash = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	72fb      	strb	r3, [r7, #11]
    int count = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
    int song_num = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	603b      	str	r3, [r7, #0]

    while (1) {
        if (!get_toggle()) { // Check if not in manual mode
 8001b74:	f7ff f91a 	bl	8000dac <get_toggle>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d113      	bne.n	8001ba6 <start_project+0x76>
            handle_flash(&flash, &count);
 8001b7e:	1d3a      	adds	r2, r7, #4
 8001b80:	f107 030b 	add.w	r3, r7, #11
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fc5c 	bl	8001444 <handle_flash>
            handle_input(command, &index, &song_num, &flash);
 8001b8c:	f107 030b 	add.w	r3, r7, #11
 8001b90:	463a      	mov	r2, r7
 8001b92:	f107 011c 	add.w	r1, r7, #28
 8001b96:	f107 000c 	add.w	r0, r7, #12
 8001b9a:	f7ff fc6f 	bl	800147c <handle_input>
            count++;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	e7e6      	b.n	8001b74 <start_project+0x44>
        } else {
            manual();  // Enter Manual Mode
 8001ba6:	f7ff fd6d 	bl	8001684 <manual>
        if (!get_toggle()) { // Check if not in manual mode
 8001baa:	e7e3      	b.n	8001b74 <start_project+0x44>
 8001bac:	08005ba0 	.word	0x08005ba0

08001bb0 <read_track>:
 * @param mthd Pointer to the start of the MIDI track data.
 * @param len Length of the MIDI track data.
 *
 * @return None.
 */
void read_track(uint8_t* mthd, uint32_t len) {
 8001bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb4:	b08b      	sub	sp, #44	; 0x2c
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
    while (len > 0) {
 8001bbc:	e0d5      	b.n	8001d6a <read_track+0x1ba>
        uint8_t event_type = *mthd++;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	60fa      	str	r2, [r7, #12]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        len--;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]

        if (event_type == 0xFF) { // Meta event
 8001bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bd4:	2bff      	cmp	r3, #255	; 0xff
 8001bd6:	f040 80c8 	bne.w	8001d6a <read_track+0x1ba>
            uint8_t meta_type = *mthd++;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	60fa      	str	r2, [r7, #12]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            len--;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]

            uint8_t event_len = *mthd++;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	60fa      	str	r2, [r7, #12]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            len--;
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]

            switch (meta_type) {
 8001bfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c02:	2b51      	cmp	r3, #81	; 0x51
 8001c04:	f000 808c 	beq.w	8001d20 <read_track+0x170>
 8001c08:	2b51      	cmp	r3, #81	; 0x51
 8001c0a:	f300 809d 	bgt.w	8001d48 <read_track+0x198>
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d002      	beq.n	8001c18 <read_track+0x68>
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d041      	beq.n	8001c9a <read_track+0xea>
                        printf("Tempo: %lu\n\r", tempo);
                    }
                    break;

                default:
                    break;
 8001c16:	e097      	b.n	8001d48 <read_track+0x198>
                    if (event_len > 0) {
 8001c18:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 8095 	beq.w	8001d4c <read_track+0x19c>
 8001c22:	466b      	mov	r3, sp
 8001c24:	461e      	mov	r6, r3
                        char copyright_str[event_len + 1];
 8001c26:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c2a:	1c59      	adds	r1, r3, #1
 8001c2c:	1e4b      	subs	r3, r1, #1
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	460a      	mov	r2, r1
 8001c32:	2300      	movs	r3, #0
 8001c34:	4614      	mov	r4, r2
 8001c36:	461d      	mov	r5, r3
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	00eb      	lsls	r3, r5, #3
 8001c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c46:	00e2      	lsls	r2, r4, #3
 8001c48:	460a      	mov	r2, r1
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	4690      	mov	r8, r2
 8001c4e:	4699      	mov	r9, r3
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c64:	460b      	mov	r3, r1
 8001c66:	3307      	adds	r3, #7
 8001c68:	08db      	lsrs	r3, r3, #3
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	ebad 0d03 	sub.w	sp, sp, r3
 8001c70:	466b      	mov	r3, sp
 8001c72:	3300      	adds	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
                        memcpy(copyright_str, mthd, event_len);
 8001c76:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68f9      	ldr	r1, [r7, #12]
 8001c7e:	6978      	ldr	r0, [r7, #20]
 8001c80:	f001 fdb3 	bl	80037ea <memcpy>
                        copyright_str[event_len] = '\0';
 8001c84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	54d1      	strb	r1, [r2, r3]
                        printf("Copyright: %s\n\r", copyright_str);
 8001c8e:	6979      	ldr	r1, [r7, #20]
 8001c90:	483b      	ldr	r0, [pc, #236]	; (8001d80 <read_track+0x1d0>)
 8001c92:	f7ff fb85 	bl	80013a0 <printf>
 8001c96:	46b5      	mov	sp, r6
                    break;
 8001c98:	e058      	b.n	8001d4c <read_track+0x19c>
                    if (event_len > 0) {
 8001c9a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d056      	beq.n	8001d50 <read_track+0x1a0>
 8001ca2:	466b      	mov	r3, sp
 8001ca4:	461e      	mov	r6, r3
                        char title_str[event_len + 1];
 8001ca6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001caa:	1c59      	adds	r1, r3, #1
 8001cac:	1e4b      	subs	r3, r1, #1
 8001cae:	623b      	str	r3, [r7, #32]
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	4692      	mov	sl, r2
 8001cb6:	469b      	mov	fp, r3
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ccc:	460a      	mov	r2, r1
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603a      	str	r2, [r7, #0]
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	00c3      	lsls	r3, r0, #3
 8001ce0:	6838      	ldr	r0, [r7, #0]
 8001ce2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ce6:	6838      	ldr	r0, [r7, #0]
 8001ce8:	00c2      	lsls	r2, r0, #3
 8001cea:	460b      	mov	r3, r1
 8001cec:	3307      	adds	r3, #7
 8001cee:	08db      	lsrs	r3, r3, #3
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	ebad 0d03 	sub.w	sp, sp, r3
 8001cf6:	466b      	mov	r3, sp
 8001cf8:	3300      	adds	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
                        memcpy(title_str, mthd, event_len);
 8001cfc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d00:	461a      	mov	r2, r3
 8001d02:	68f9      	ldr	r1, [r7, #12]
 8001d04:	69f8      	ldr	r0, [r7, #28]
 8001d06:	f001 fd70 	bl	80037ea <memcpy>
                        title_str[event_len] = '\0';
 8001d0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	2100      	movs	r1, #0
 8001d12:	54d1      	strb	r1, [r2, r3]
                        printf("Song Title: %s\n\r", title_str);
 8001d14:	69f9      	ldr	r1, [r7, #28]
 8001d16:	481b      	ldr	r0, [pc, #108]	; (8001d84 <read_track+0x1d4>)
 8001d18:	f7ff fb42 	bl	80013a0 <printf>
 8001d1c:	46b5      	mov	sp, r6
                    break;
 8001d1e:	e017      	b.n	8001d50 <read_track+0x1a0>
                    if (event_len == 3) {
 8001d20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d115      	bne.n	8001d54 <read_track+0x1a4>
                        uint32_t tempo = *((uint32_t*)mthd);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	613b      	str	r3, [r7, #16]
                        tempo = convert_into_uint24((uint8_t*)&tempo);
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f975 	bl	8002022 <convert_into_uint24>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	613b      	str	r3, [r7, #16]
                        printf("Tempo: %lu\n\r", tempo);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4811      	ldr	r0, [pc, #68]	; (8001d88 <read_track+0x1d8>)
 8001d42:	f7ff fb2d 	bl	80013a0 <printf>
                    break;
 8001d46:	e005      	b.n	8001d54 <read_track+0x1a4>
                    break;
 8001d48:	bf00      	nop
 8001d4a:	e004      	b.n	8001d56 <read_track+0x1a6>
                    break;
 8001d4c:	bf00      	nop
 8001d4e:	e002      	b.n	8001d56 <read_track+0x1a6>
                    break;
 8001d50:	bf00      	nop
 8001d52:	e000      	b.n	8001d56 <read_track+0x1a6>
                    break;
 8001d54:	bf00      	nop
            }
            mthd += event_len;
 8001d56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
            len -= event_len;
 8001d60:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	60bb      	str	r3, [r7, #8]
    while (len > 0) {
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f47f af26 	bne.w	8001bbe <read_track+0xe>
        }
    }
}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	372c      	adds	r7, #44	; 0x2c
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d7e:	bf00      	nop
 8001d80:	08005bc0 	.word	0x08005bc0
 8001d84:	08005bd0 	.word	0x08005bd0
 8001d88:	08005be4 	.word	0x08005be4

08001d8c <get_delay>:
 *
 * @param buffer The byte array containing MIDI data.
 * @param delay Pointer to store the computed delay value.
 * @return Returns the next index in the buffer after the last byte read.
 */
uint8_t get_delay (uint8_t* buffer, uint32_t* delay) {
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
    int index = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
    uint8_t temp;
    while (buffer[index] & (1 << 7)) {
 8001d9a:	e010      	b.n	8001dbe <get_delay+0x32>
        temp = buffer [index] & ~ (1 << 7);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da8:	72fb      	strb	r3, [r7, #11]
        *delay = (*delay << 7) + temp;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	01da      	lsls	r2, r3, #7
 8001db0:	7afb      	ldrb	r3, [r7, #11]
 8001db2:	441a      	add	r2, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	601a      	str	r2, [r3, #0]
        index++;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
    while (buffer[index] & (1 << 7)) {
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b25b      	sxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dbe7      	blt.n	8001d9c <get_delay+0x10>
    }
    temp = buffer [index] & ~(1 << 7);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dd8:	72fb      	strb	r3, [r7, #11]
    *delay = (*delay << 7) + temp;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	01da      	lsls	r2, r3, #7
 8001de0:	7afb      	ldrb	r3, [r7, #11]
 8001de2:	441a      	add	r2, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	601a      	str	r2, [r3, #0]

    return index + 1;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	b2db      	uxtb	r3, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <parse_division>:
 *
 * Extracts the division value from the MIDI header of a specified song and converts it to a uint16_t.
 *
 * @param song_num The identifier of the song.
 */
void parse_division(int song_num) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	MIDI_header * header = get_song_header(song_num);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 f857 	bl	8001ebc <get_song_header>
 8001e0e:	60f8      	str	r0, [r7, #12]
	division = convert_into_uint16((uint8_t*)&header->division);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	330c      	adds	r3, #12
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 f8ef 	bl	8001ff8 <convert_into_uint16>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <parse_division+0x30>)
 8001e20:	801a      	strh	r2, [r3, #0]
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000aab4 	.word	0x2000aab4

08001e30 <parse_meta_event>:
 * Only processes tempo meta events (0x51), converting three bytes into a 24-bit integer.
 *
 * @param index The start index of the meta event in the song's MIDI data.
 * @return The index after processing the meta event, adjusted for parsed bytes.
 */
uint32_t parse_meta_event(int index) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
    int length = the_song.p_song[index + 2];
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <parse_meta_event+0x84>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3302      	adds	r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	613b      	str	r3, [r7, #16]
    unsigned char the_tempo[3];
    if (the_song.p_song[index + 1] == 0x51) {
 8001e46:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <parse_meta_event+0x84>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b51      	cmp	r3, #81	; 0x51
 8001e54:	d123      	bne.n	8001e9e <parse_meta_event+0x6e>
        index += 3;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3303      	adds	r3, #3
 8001e5a:	607b      	str	r3, [r7, #4]
        for (int i = 0; i < length; i++) {
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	e010      	b.n	8001e84 <parse_meta_event+0x54>
            the_tempo[i] = the_song.p_song[index];
 8001e62:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <parse_meta_event+0x84>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	7819      	ldrb	r1, [r3, #0]
 8001e6c:	f107 020c 	add.w	r2, r7, #12
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	4413      	add	r3, r2
 8001e74:	460a      	mov	r2, r1
 8001e76:	701a      	strb	r2, [r3, #0]
            index++;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	607b      	str	r3, [r7, #4]
        for (int i = 0; i < length; i++) {
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbea      	blt.n	8001e62 <parse_meta_event+0x32>
        }
        tempo = convert_into_uint24((uint8_t*)&the_tempo);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 f8c6 	bl	8002022 <convert_into_uint24>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <parse_meta_event+0x88>)
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e004      	b.n	8001ea8 <parse_meta_event+0x78>
    } else {
        index += length + 2;
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	607b      	str	r3, [r7, #4]
    }
    return index;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20007ee4 	.word	0x20007ee4
 8001eb8:	2000aab0 	.word	0x2000aab0

08001ebc <get_song_header>:
 * Fetches the MIDI header from the song data, facilitating access to metadata like division.
 *
 * @param song_num The song identifier.
 * @return Pointer to the MIDI header of the specified song.
 */
MIDI_header* get_song_header(uint8_t song_num){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
	MIDI_header* header = (MIDI_header*) get_song(song_num).p_song;
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	79fa      	ldrb	r2, [r7, #7]
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f808 	bl	8001ee4 <get_song>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	617b      	str	r3, [r7, #20]
	return header;
 8001ed8:	697b      	ldr	r3, [r7, #20]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <get_song>:

// Convenience list of all the songs in one array.
song songs[] = {{song0, sizeof (song0)}, {song1, sizeof (song1)}, {song2, sizeof (song2)}, {song3, sizeof (song3)},
				{song4, sizeof (song4)}};

song get_song (uint8_t song_number){
 8001ee4:	b490      	push	{r4, r7}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
	return songs[song_number];
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <get_song+0x2c>)
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f00:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc90      	pop	{r4, r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20007aa4 	.word	0x20007aa4

08001f14 <SysTick_Handler>:
static tone_info tones[MAX_TONES] = {{0,0}};

/* You will want to integrate this with your existing one
   but it is here for standalone testing                 
*/
void SysTick_Handler() {
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
    counter++;
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <SysTick_Handler+0x18>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4a03      	ldr	r2, [pc, #12]	; (8001f2c <SysTick_Handler+0x18>)
 8001f20:	6013      	str	r3, [r2, #0]
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	2000aab8 	.word	0x2000aab8

08001f30 <hertz_to_midi_ticks>:

//uint32_t get_tick_speed ();


// Convert from hertz to ticks
uint32_t hertz_to_midi_ticks (float hertz) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	ed87 0a01 	vstr	s0, [r7, #4]
	float ticks_per_second = CPU_SPEED / (SysTick->LOAD + 1);
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <hertz_to_midi_ticks+0x80>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fae9 	bl	8000518 <__aeabi_ui2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	a117      	add	r1, pc, #92	; (adr r1, 8001fa8 <hertz_to_midi_ticks+0x78>)
 8001f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f50:	f7fe fc86 	bl	8000860 <__aeabi_ddiv>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f7fe fe2e 	bl	8000bbc <__aeabi_d2f>
 8001f60:	4603      	mov	r3, r0
 8001f62:	60fb      	str	r3, [r7, #12]
	if (hertz == 0)
 8001f64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f70:	d101      	bne.n	8001f76 <hertz_to_midi_ticks+0x46>
		return 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e011      	b.n	8001f9a <hertz_to_midi_ticks+0x6a>
	float duration = 1 / hertz;
 8001f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f82:	edc7 7a02 	vstr	s15, [r7, #8]
	return (uint32_t) (duration * ticks_per_second);
 8001f86:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f96:	ee17 3a90 	vmov	r3, s15
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	f3af 8000 	nop.w
 8001fa8:	00000000 	.word	0x00000000
 8001fac:	419312d0 	.word	0x419312d0
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <get_counter>:



// Accessor for the counter
uint32_t get_counter () {
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
	return counter;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <get_counter+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	2000aab8 	.word	0x2000aab8

08001fcc <get_frequency_from_note>:
    }
}


// Gets the frequency from a specific note played.
float get_frequency_from_note(uint8_t note) {
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
	return notes[note];
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <get_frequency_from_note+0x28>)
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	ee07 3a90 	vmov	s15, r3
}
 8001fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20007acc 	.word	0x20007acc

08001ff8 <convert_into_uint16>:
 * it to little-endian format (least significant byte first).
 *
 * @param p_value The pointer to the input array, which contains the big-endian value.
 * @return The converted 16-bit little-endian value.
 */
uint16_t convert_into_uint16(uint8_t* p_value) {
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    return (p_value[0] << 8) | p_value[1];
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3301      	adds	r3, #1
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b21b      	sxth	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b21b      	sxth	r3, r3
 8002014:	b29b      	uxth	r3, r3
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <convert_into_uint24>:
 * it to little-endian format (least significant byte first).
 *
 * @param p_value The pointer to the input array, which contains the big-endian value.
 * @return The converted 16-bit little-endian value.
 */
uint32_t convert_into_uint24(uint8_t* p_value){
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
	 return (p_value[0] <<16)+ (p_value[1]<< 8) + p_value[2];
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	041a      	lsls	r2, r3, #16
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3301      	adds	r3, #1
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	4413      	add	r3, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	3202      	adds	r2, #2
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	4413      	add	r3, r2
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <convert_into_uint32>:
 * it to little-endian format (least significant byte first).
 *
 * @param p_value The pointer to the input array, which contains the big-endian value.
 * @return The converted 32-bit little-endian value.
 */
uint32_t convert_into_uint32(uint8_t* p_value) {
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
    return (p_value[0] << 24) | (p_value[1] << 16) | (p_value[2] << 8) | p_value[3];
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	061a      	lsls	r2, r3, #24
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3301      	adds	r3, #1
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	041b      	lsls	r3, r3, #16
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3302      	adds	r3, #2
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	4313      	orrs	r3, r2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	3203      	adds	r2, #3
 8002074:	7812      	ldrb	r2, [r2, #0]
 8002076:	4313      	orrs	r3, r2
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 800208a:	4b6b      	ldr	r3, [pc, #428]	; (8002238 <System_Clock_Init+0x1b4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6a      	ldr	r2, [pc, #424]	; (8002238 <System_Clock_Init+0x1b4>)
 8002090:	f023 0307 	bic.w	r3, r3, #7
 8002094:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 8002096:	4b68      	ldr	r3, [pc, #416]	; (8002238 <System_Clock_Init+0x1b4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a67      	ldr	r2, [pc, #412]	; (8002238 <System_Clock_Init+0x1b4>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80020a2:	4b66      	ldr	r3, [pc, #408]	; (800223c <System_Clock_Init+0x1b8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a65      	ldr	r2, [pc, #404]	; (800223c <System_Clock_Init+0x1b8>)
 80020a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ac:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80020ae:	bf00      	nop
 80020b0:	4b62      	ldr	r3, [pc, #392]	; (800223c <System_Clock_Init+0x1b8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f9      	beq.n	80020b0 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80020bc:	2310      	movs	r3, #16
 80020be:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80020c0:	4b5e      	ldr	r3, [pc, #376]	; (800223c <System_Clock_Init+0x1b8>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a5d      	ldr	r2, [pc, #372]	; (800223c <System_Clock_Init+0x1b8>)
 80020c6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80020ca:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 80020cc:	4b5b      	ldr	r3, [pc, #364]	; (800223c <System_Clock_Init+0x1b8>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	061b      	lsls	r3, r3, #24
 80020d4:	4959      	ldr	r1, [pc, #356]	; (800223c <System_Clock_Init+0x1b8>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 80020da:	4b58      	ldr	r3, [pc, #352]	; (800223c <System_Clock_Init+0x1b8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a57      	ldr	r2, [pc, #348]	; (800223c <System_Clock_Init+0x1b8>)
 80020e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e4:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 80020e6:	bf00      	nop
 80020e8:	4b54      	ldr	r3, [pc, #336]	; (800223c <System_Clock_Init+0x1b8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020f4:	d0f8      	beq.n	80020e8 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 80020f6:	4b51      	ldr	r3, [pc, #324]	; (800223c <System_Clock_Init+0x1b8>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	4a50      	ldr	r2, [pc, #320]	; (800223c <System_Clock_Init+0x1b8>)
 80020fc:	f023 0303 	bic.w	r3, r3, #3
 8002100:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 8002102:	4b4e      	ldr	r3, [pc, #312]	; (800223c <System_Clock_Init+0x1b8>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4a4d      	ldr	r2, [pc, #308]	; (800223c <System_Clock_Init+0x1b8>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 800210e:	4b4b      	ldr	r3, [pc, #300]	; (800223c <System_Clock_Init+0x1b8>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002116:	4a49      	ldr	r2, [pc, #292]	; (800223c <System_Clock_Init+0x1b8>)
 8002118:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800211c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 800211e:	4b47      	ldr	r3, [pc, #284]	; (800223c <System_Clock_Init+0x1b8>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002126:	4a45      	ldr	r2, [pc, #276]	; (800223c <System_Clock_Init+0x1b8>)
 8002128:	f043 0310 	orr.w	r3, r3, #16
 800212c:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 800212e:	4b43      	ldr	r3, [pc, #268]	; (800223c <System_Clock_Init+0x1b8>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a42      	ldr	r2, [pc, #264]	; (800223c <System_Clock_Init+0x1b8>)
 8002134:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002138:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 800213a:	4b40      	ldr	r3, [pc, #256]	; (800223c <System_Clock_Init+0x1b8>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	4a3f      	ldr	r2, [pc, #252]	; (800223c <System_Clock_Init+0x1b8>)
 8002140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002144:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8002146:	4b3d      	ldr	r3, [pc, #244]	; (800223c <System_Clock_Init+0x1b8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a3c      	ldr	r2, [pc, #240]	; (800223c <System_Clock_Init+0x1b8>)
 800214c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002150:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8002152:	bf00      	nop
 8002154:	4b39      	ldr	r3, [pc, #228]	; (800223c <System_Clock_Init+0x1b8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f9      	beq.n	8002154 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <System_Clock_Init+0x1b8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a35      	ldr	r2, [pc, #212]	; (800223c <System_Clock_Init+0x1b8>)
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 800216c:	4b33      	ldr	r3, [pc, #204]	; (800223c <System_Clock_Init+0x1b8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a32      	ldr	r2, [pc, #200]	; (800223c <System_Clock_Init+0x1b8>)
 8002172:	f043 0303 	orr.w	r3, r3, #3
 8002176:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8002178:	bf00      	nop
 800217a:	4b30      	ldr	r3, [pc, #192]	; (800223c <System_Clock_Init+0x1b8>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d1f9      	bne.n	800217a <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 8002186:	4b2d      	ldr	r3, [pc, #180]	; (800223c <System_Clock_Init+0x1b8>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4a2c      	ldr	r2, [pc, #176]	; (800223c <System_Clock_Init+0x1b8>)
 800218c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002190:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 8002192:	4b2a      	ldr	r3, [pc, #168]	; (800223c <System_Clock_Init+0x1b8>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4a29      	ldr	r2, [pc, #164]	; (800223c <System_Clock_Init+0x1b8>)
 8002198:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800219c:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 800219e:	4b27      	ldr	r3, [pc, #156]	; (800223c <System_Clock_Init+0x1b8>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4a26      	ldr	r2, [pc, #152]	; (800223c <System_Clock_Init+0x1b8>)
 80021a4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021a8:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <System_Clock_Init+0x1b8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a23      	ldr	r2, [pc, #140]	; (800223c <System_Clock_Init+0x1b8>)
 80021b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021b4:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80021b6:	bf00      	nop
 80021b8:	4b20      	ldr	r3, [pc, #128]	; (800223c <System_Clock_Init+0x1b8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021c4:	d0f8      	beq.n	80021b8 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <System_Clock_Init+0x1b8>)
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	4a1c      	ldr	r2, [pc, #112]	; (800223c <System_Clock_Init+0x1b8>)
 80021cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021d0:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <System_Clock_Init+0x1b8>)
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	4a19      	ldr	r2, [pc, #100]	; (800223c <System_Clock_Init+0x1b8>)
 80021d8:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 80021dc:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <System_Clock_Init+0x1b8>)
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	4a16      	ldr	r2, [pc, #88]	; (800223c <System_Clock_Init+0x1b8>)
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <System_Clock_Init+0x1b8>)
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	4a13      	ldr	r2, [pc, #76]	; (800223c <System_Clock_Init+0x1b8>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <System_Clock_Init+0x1b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a10      	ldr	r2, [pc, #64]	; (800223c <System_Clock_Init+0x1b8>)
 80021fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002200:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 8002202:	bf00      	nop
 8002204:	4b0d      	ldr	r3, [pc, #52]	; (800223c <System_Clock_Init+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f9      	beq.n	8002204 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <System_Clock_Init+0x1b8>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	4a09      	ldr	r2, [pc, #36]	; (800223c <System_Clock_Init+0x1b8>)
 8002218:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800221c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <System_Clock_Init+0x1b8>)
 8002222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002224:	4a05      	ldr	r2, [pc, #20]	; (800223c <System_Clock_Init+0x1b8>)
 8002226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800222a:	6613      	str	r3, [r2, #96]	; 0x60
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40022000 	.word	0x40022000
 800223c:	40021000 	.word	0x40021000

08002240 <Error_Handler>:

/**
 * Error handler that is called by lower level functions. 
 * Add an implementation if desired.
*/
void Error_Handler () {
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
	
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
	return 1;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <_kill>:

int _kill(int pid, int sig)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002268:	f001 fa92 	bl	8003790 <__errno>
 800226c:	4603      	mov	r3, r0
 800226e:	2216      	movs	r2, #22
 8002270:	601a      	str	r2, [r3, #0]
	return -1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_exit>:

void _exit (int status)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002286:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffe7 	bl	800225e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002290:	e7fe      	b.n	8002290 <_exit+0x12>

08002292 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	e00a      	b.n	80022ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022a4:	f3af 8000 	nop.w
 80022a8:	4601      	mov	r1, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	60ba      	str	r2, [r7, #8]
 80022b0:	b2ca      	uxtb	r2, r1
 80022b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3301      	adds	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	429a      	cmp	r2, r3
 80022c0:	dbf0      	blt.n	80022a4 <_read+0x12>
	}

return len;
 80022c2:	687b      	ldr	r3, [r7, #4]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e009      	b.n	80022f2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	60ba      	str	r2, [r7, #8]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3301      	adds	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	dbf1      	blt.n	80022de <_write+0x12>
	}
	return len;
 80022fa:	687b      	ldr	r3, [r7, #4]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_close>:

int _close(int file)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	return -1;
 800230c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232c:	605a      	str	r2, [r3, #4]
	return 0;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_isatty>:

int _isatty(int file)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	return 1;
 8002344:	2301      	movs	r3, #1
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
	return 0;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f001 f9f8 	bl	8003790 <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20018000 	.word	0x20018000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	2000aabc 	.word	0x2000aabc
 80023d4:	2000ac18 	.word	0x2000ac18

080023d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023dc:	4b17      	ldr	r3, [pc, #92]	; (800243c <SystemInit+0x64>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	4a16      	ldr	r2, [pc, #88]	; (800243c <SystemInit+0x64>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <SystemInit+0x68>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <SystemInit+0x68>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <SystemInit+0x68>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <SystemInit+0x68>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <SystemInit+0x68>)
 8002404:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002408:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800240c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <SystemInit+0x68>)
 8002410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002414:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <SystemInit+0x68>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a09      	ldr	r2, [pc, #36]	; (8002440 <SystemInit+0x68>)
 800241c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <SystemInit+0x68>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <SystemInit+0x64>)
 800242a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800242e:	609a      	str	r2, [r3, #8]
#endif
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00
 8002440:	40021000 	.word	0x40021000

08002444 <get_count>:

static struct systick_timer* systick =  (struct systick_timer*) 0xE000E010;
static int counter = 0;
static uint8_t one_sec_elapsed = 0;

int get_count(){
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
	return counter;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <get_count+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	2000aac0 	.word	0x2000aac0

0800245c <init_systick>:
    return systick;
}

// This function is to Initialize SysTick registers
void init_systick()
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
	// Use the SysTick global structure pointer to do the following in this
	// exact order with separate lines for each step:
	//
	// Disable SysTick by clearing the CTRL (CSR) register.
	systick->CSR = 0;
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <init_systick+0x50>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

	// Set the LOAD (RVR) to 8 million to give us a 100 milliseconds timer.
//	systick->RVR = 7999999;
//	systick->RVR = 79999;
	systick->RVR = 7999;
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <init_systick+0x50>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002470:	605a      	str	r2, [r3, #4]
//	systick->RVR = 79;

	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	systick->CSR |= (1 << 2);
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <init_systick+0x50>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <init_systick+0x50>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0204 	orr.w	r2, r2, #4
 8002480:	601a      	str	r2, [r3, #0]

	systick->CSR |= (1 << 1); // Enable interrupt.
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <init_systick+0x50>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <init_systick+0x50>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0202 	orr.w	r2, r2, #2
 8002490:	601a      	str	r2, [r3, #0]

	// Set the enable bit in the CTRL (CSR) to start the timer.
	systick->CSR |= 1;
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <init_systick+0x50>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <init_systick+0x50>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	20007ccc 	.word	0x20007ccc

080024b0 <delay_systick>:
//    counter++;
//}

// This function is to create delay using SysTick timer counter
void delay_systick()
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
	// Using the SysTick global structure pointer do the following:
	// Create a for loop that loops 10 times
	for (int i = 0; i < 7; i++) {
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	e00a      	b.n	80024d2 <delay_systick+0x22>
		// Inside that for loop check the COUNTFLAG bit in the CTRL (CSR)
		// register in a loop. When that bit is set exit this inner loop
		// to do another pass in the outer loop of 10.
		while (!(systick->CSR & (1 << 16))) {
 80024bc:	bf00      	nop
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <delay_systick+0x38>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f8      	beq.n	80024be <delay_systick+0xe>
	for (int i = 0; i < 7; i++) {
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3301      	adds	r3, #1
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b06      	cmp	r3, #6
 80024d6:	ddf1      	ble.n	80024bc <delay_systick+0xc>
			;
        }
	}
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20007ccc 	.word	0x20007ccc

080024ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002524 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024f0:	f7ff ff72 	bl	80023d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f4:	480c      	ldr	r0, [pc, #48]	; (8002528 <LoopForever+0x6>)
  ldr r1, =_edata
 80024f6:	490d      	ldr	r1, [pc, #52]	; (800252c <LoopForever+0xa>)
  ldr r2, =_sidata
 80024f8:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <LoopForever+0xe>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024fc:	e002      	b.n	8002504 <LoopCopyDataInit>

080024fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002502:	3304      	adds	r3, #4

08002504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002508:	d3f9      	bcc.n	80024fe <CopyDataInit>
  
/* Zero fill the bss segment. */  ldr r2, =_sbss
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800250c:	4c0a      	ldr	r4, [pc, #40]	; (8002538 <LoopForever+0x16>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002510:	e001      	b.n	8002516 <LoopFillZerobss>

08002512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002514:	3204      	adds	r2, #4

08002516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002518:	d3fb      	bcc.n	8002512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800251a:	f001 f93f 	bl	800379c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800251e:	f7fe ff83 	bl	8001428 <main>

08002522 <LoopForever>:

LoopForever:
    b LoopForever
 8002522:	e7fe      	b.n	8002522 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002524:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800252c:	20007e9c 	.word	0x20007e9c
  ldr r2, =_sidata
 8002530:	08005f6c 	.word	0x08005f6c
/* Zero fill the bss segment. */  ldr r2, =_sbss
 8002534:	20007e9c 	.word	0x20007e9c
  ldr r4, =_ebss
 8002538:	2000ac14 	.word	0x2000ac14

0800253c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800253c:	e7fe      	b.n	800253c <ADC1_2_IRQHandler>
	...

08002540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return uwTick;
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <HAL_GetTick+0x14>)
 8002546:	681b      	ldr	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	2000aac4 	.word	0x2000aac4

08002558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002560:	f7ff ffee 	bl	8002540 <HAL_GetTick>
 8002564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002570:	d005      	beq.n	800257e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_Delay+0x44>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800257e:	bf00      	nop
 8002580:	f7ff ffde 	bl	8002540 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	429a      	cmp	r2, r3
 800258e:	d8f7      	bhi.n	8002580 <HAL_Delay+0x28>
  {
  }
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20007cd0 	.word	0x20007cd0

080025a0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e014      	b.n	80025dc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	791b      	ldrb	r3, [r3, #4]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d105      	bne.n	80025c8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe fe62 	bl	800128c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	795b      	ldrb	r3, [r3, #5]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_DAC_Start+0x16>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e03b      	b.n	8002672 <HAL_DAC_Start+0x8e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2201      	movs	r2, #1
 8002614:	409a      	lsls	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10f      	bne.n	8002644 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800262e:	2b04      	cmp	r3, #4
 8002630:	d118      	bne.n	8002664 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	e00f      	b.n	8002664 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800264e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002652:	d107      	bne.n	8002664 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0202 	orr.w	r2, r2, #2
 8002662:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800267e:	b480      	push	{r7}
 8002680:	b087      	sub	sp, #28
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d105      	bne.n	80026a8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	3308      	adds	r3, #8
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	e004      	b.n	80026b2 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	3314      	adds	r3, #20
 80026b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	461a      	mov	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	795b      	ldrb	r3, [r3, #5]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_DAC_ConfigChannel+0x1c>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e107      	b.n	80028f4 <HAL_DAC_ConfigChannel+0x22c>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2202      	movs	r2, #2
 80026ee:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d174      	bne.n	80027e2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80026f8:	f7ff ff22 	bl	8002540 <HAL_GetTick>
 80026fc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d134      	bne.n	800276e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002704:	e011      	b.n	800272a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002706:	f7ff ff1b 	bl	8002540 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d90a      	bls.n	800272a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f043 0208 	orr.w	r2, r3, #8
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2203      	movs	r2, #3
 8002724:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e0e4      	b.n	80028f4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1e6      	bne.n	8002706 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002738:	2001      	movs	r0, #1
 800273a:	f7ff ff0d 	bl	8002558 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	6992      	ldr	r2, [r2, #24]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
 8002748:	e01e      	b.n	8002788 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800274a:	f7ff fef9 	bl	8002540 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b01      	cmp	r3, #1
 8002756:	d90a      	bls.n	800276e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f043 0208 	orr.w	r2, r3, #8
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2203      	movs	r2, #3
 8002768:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0c2      	b.n	80028f4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002774:	2b00      	cmp	r3, #0
 8002776:	dbe8      	blt.n	800274a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002778:	2001      	movs	r0, #1
 800277a:	f7ff feed 	bl	8002558 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	6992      	ldr	r2, [r2, #24]
 8002786:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	ea02 0103 	and.w	r1, r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	409a      	lsls	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	21ff      	movs	r1, #255	; 0xff
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	ea02 0103 	and.w	r1, r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	6a1a      	ldr	r2, [r3, #32]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	409a      	lsls	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d11d      	bne.n	8002826 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	221f      	movs	r2, #31
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2207      	movs	r2, #7
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	431a      	orrs	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	400a      	ands	r2, r1
 800288a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	f640 72fc 	movw	r2, #4092	; 0xffc
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	22c0      	movs	r2, #192	; 0xc0
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43da      	mvns	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	400a      	ands	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3720      	adds	r7, #32
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800290a:	e17f      	b.n	8002c0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2101      	movs	r1, #1
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8171 	beq.w	8002c06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d005      	beq.n	800293c <HAL_GPIO_Init+0x40>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d130      	bne.n	800299e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2203      	movs	r2, #3
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002972:	2201      	movs	r2, #1
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	f003 0201 	and.w	r2, r3, #1
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d118      	bne.n	80029dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029b0:	2201      	movs	r2, #1
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	f003 0201 	and.w	r2, r3, #1
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d017      	beq.n	8002a18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d123      	bne.n	8002a6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	08da      	lsrs	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3208      	adds	r2, #8
 8002a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	08da      	lsrs	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3208      	adds	r2, #8
 8002a66:	6939      	ldr	r1, [r7, #16]
 8002a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	2203      	movs	r2, #3
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0203 	and.w	r2, r3, #3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80ac 	beq.w	8002c06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aae:	4b5f      	ldr	r3, [pc, #380]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab2:	4a5e      	ldr	r2, [pc, #376]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6613      	str	r3, [r2, #96]	; 0x60
 8002aba:	4b5c      	ldr	r3, [pc, #368]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ac6:	4a5a      	ldr	r2, [pc, #360]	; (8002c30 <HAL_GPIO_Init+0x334>)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	089b      	lsrs	r3, r3, #2
 8002acc:	3302      	adds	r3, #2
 8002ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	220f      	movs	r2, #15
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002af0:	d025      	beq.n	8002b3e <HAL_GPIO_Init+0x242>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4f      	ldr	r2, [pc, #316]	; (8002c34 <HAL_GPIO_Init+0x338>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01f      	beq.n	8002b3a <HAL_GPIO_Init+0x23e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a4e      	ldr	r2, [pc, #312]	; (8002c38 <HAL_GPIO_Init+0x33c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d019      	beq.n	8002b36 <HAL_GPIO_Init+0x23a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4d      	ldr	r2, [pc, #308]	; (8002c3c <HAL_GPIO_Init+0x340>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_GPIO_Init+0x236>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4c      	ldr	r2, [pc, #304]	; (8002c40 <HAL_GPIO_Init+0x344>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00d      	beq.n	8002b2e <HAL_GPIO_Init+0x232>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4b      	ldr	r2, [pc, #300]	; (8002c44 <HAL_GPIO_Init+0x348>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <HAL_GPIO_Init+0x22e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4a      	ldr	r2, [pc, #296]	; (8002c48 <HAL_GPIO_Init+0x34c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d101      	bne.n	8002b26 <HAL_GPIO_Init+0x22a>
 8002b22:	2306      	movs	r3, #6
 8002b24:	e00c      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b26:	2307      	movs	r3, #7
 8002b28:	e00a      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	e008      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b2e:	2304      	movs	r3, #4
 8002b30:	e006      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b32:	2303      	movs	r3, #3
 8002b34:	e004      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e002      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_GPIO_Init+0x244>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	f002 0203 	and.w	r2, r2, #3
 8002b46:	0092      	lsls	r2, r2, #2
 8002b48:	4093      	lsls	r3, r2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b50:	4937      	ldr	r1, [pc, #220]	; (8002c30 <HAL_GPIO_Init+0x334>)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	089b      	lsrs	r3, r3, #2
 8002b56:	3302      	adds	r3, #2
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <HAL_GPIO_Init+0x350>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b82:	4a32      	ldr	r2, [pc, #200]	; (8002c4c <HAL_GPIO_Init+0x350>)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b88:	4b30      	ldr	r3, [pc, #192]	; (8002c4c <HAL_GPIO_Init+0x350>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bac:	4a27      	ldr	r2, [pc, #156]	; (8002c4c <HAL_GPIO_Init+0x350>)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bb2:	4b26      	ldr	r3, [pc, #152]	; (8002c4c <HAL_GPIO_Init+0x350>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bd6:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <HAL_GPIO_Init+0x350>)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <HAL_GPIO_Init+0x350>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c00:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <HAL_GPIO_Init+0x350>)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	fa22 f303 	lsr.w	r3, r2, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f47f ae78 	bne.w	800290c <HAL_GPIO_Init+0x10>
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40010000 	.word	0x40010000
 8002c34:	48000400 	.word	0x48000400
 8002c38:	48000800 	.word	0x48000800
 8002c3c:	48000c00 	.word	0x48000c00
 8002c40:	48001000 	.word	0x48001000
 8002c44:	48001400 	.word	0x48001400
 8002c48:	48001800 	.word	0x48001800
 8002c4c:	40010400 	.word	0x40010400

08002c50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	887b      	ldrh	r3, [r7, #2]
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
 8002c6c:	e001      	b.n	8002c72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d006      	beq.n	8002ca4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c96:	4a05      	ldr	r2, [pc, #20]	; (8002cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe f8b4 	bl	8000e0c <HAL_GPIO_EXTI_Callback>
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40010400 	.word	0x40010400

08002cb0 <__cvt>:
 8002cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb4:	ec55 4b10 	vmov	r4, r5, d0
 8002cb8:	2d00      	cmp	r5, #0
 8002cba:	460e      	mov	r6, r1
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	462b      	mov	r3, r5
 8002cc0:	bfbb      	ittet	lt
 8002cc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002cc6:	461d      	movlt	r5, r3
 8002cc8:	2300      	movge	r3, #0
 8002cca:	232d      	movlt	r3, #45	; 0x2d
 8002ccc:	700b      	strb	r3, [r1, #0]
 8002cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cd0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002cd4:	4691      	mov	r9, r2
 8002cd6:	f023 0820 	bic.w	r8, r3, #32
 8002cda:	bfbc      	itt	lt
 8002cdc:	4622      	movlt	r2, r4
 8002cde:	4614      	movlt	r4, r2
 8002ce0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ce4:	d005      	beq.n	8002cf2 <__cvt+0x42>
 8002ce6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002cea:	d100      	bne.n	8002cee <__cvt+0x3e>
 8002cec:	3601      	adds	r6, #1
 8002cee:	2102      	movs	r1, #2
 8002cf0:	e000      	b.n	8002cf4 <__cvt+0x44>
 8002cf2:	2103      	movs	r1, #3
 8002cf4:	ab03      	add	r3, sp, #12
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	ab02      	add	r3, sp, #8
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	ec45 4b10 	vmov	d0, r4, r5
 8002d00:	4653      	mov	r3, sl
 8002d02:	4632      	mov	r2, r6
 8002d04:	f000 fe08 	bl	8003918 <_dtoa_r>
 8002d08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002d0c:	4607      	mov	r7, r0
 8002d0e:	d102      	bne.n	8002d16 <__cvt+0x66>
 8002d10:	f019 0f01 	tst.w	r9, #1
 8002d14:	d022      	beq.n	8002d5c <__cvt+0xac>
 8002d16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002d1a:	eb07 0906 	add.w	r9, r7, r6
 8002d1e:	d110      	bne.n	8002d42 <__cvt+0x92>
 8002d20:	783b      	ldrb	r3, [r7, #0]
 8002d22:	2b30      	cmp	r3, #48	; 0x30
 8002d24:	d10a      	bne.n	8002d3c <__cvt+0x8c>
 8002d26:	2200      	movs	r2, #0
 8002d28:	2300      	movs	r3, #0
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	f7fd fed5 	bl	8000adc <__aeabi_dcmpeq>
 8002d32:	b918      	cbnz	r0, 8002d3c <__cvt+0x8c>
 8002d34:	f1c6 0601 	rsb	r6, r6, #1
 8002d38:	f8ca 6000 	str.w	r6, [sl]
 8002d3c:	f8da 3000 	ldr.w	r3, [sl]
 8002d40:	4499      	add	r9, r3
 8002d42:	2200      	movs	r2, #0
 8002d44:	2300      	movs	r3, #0
 8002d46:	4620      	mov	r0, r4
 8002d48:	4629      	mov	r1, r5
 8002d4a:	f7fd fec7 	bl	8000adc <__aeabi_dcmpeq>
 8002d4e:	b108      	cbz	r0, 8002d54 <__cvt+0xa4>
 8002d50:	f8cd 900c 	str.w	r9, [sp, #12]
 8002d54:	2230      	movs	r2, #48	; 0x30
 8002d56:	9b03      	ldr	r3, [sp, #12]
 8002d58:	454b      	cmp	r3, r9
 8002d5a:	d307      	bcc.n	8002d6c <__cvt+0xbc>
 8002d5c:	9b03      	ldr	r3, [sp, #12]
 8002d5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d60:	1bdb      	subs	r3, r3, r7
 8002d62:	4638      	mov	r0, r7
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	b004      	add	sp, #16
 8002d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d6c:	1c59      	adds	r1, r3, #1
 8002d6e:	9103      	str	r1, [sp, #12]
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e7f0      	b.n	8002d56 <__cvt+0xa6>

08002d74 <__exponent>:
 8002d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d76:	4603      	mov	r3, r0
 8002d78:	2900      	cmp	r1, #0
 8002d7a:	bfb8      	it	lt
 8002d7c:	4249      	neglt	r1, r1
 8002d7e:	f803 2b02 	strb.w	r2, [r3], #2
 8002d82:	bfb4      	ite	lt
 8002d84:	222d      	movlt	r2, #45	; 0x2d
 8002d86:	222b      	movge	r2, #43	; 0x2b
 8002d88:	2909      	cmp	r1, #9
 8002d8a:	7042      	strb	r2, [r0, #1]
 8002d8c:	dd2a      	ble.n	8002de4 <__exponent+0x70>
 8002d8e:	f10d 0207 	add.w	r2, sp, #7
 8002d92:	4617      	mov	r7, r2
 8002d94:	260a      	movs	r6, #10
 8002d96:	4694      	mov	ip, r2
 8002d98:	fb91 f5f6 	sdiv	r5, r1, r6
 8002d9c:	fb06 1415 	mls	r4, r6, r5, r1
 8002da0:	3430      	adds	r4, #48	; 0x30
 8002da2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002da6:	460c      	mov	r4, r1
 8002da8:	2c63      	cmp	r4, #99	; 0x63
 8002daa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8002dae:	4629      	mov	r1, r5
 8002db0:	dcf1      	bgt.n	8002d96 <__exponent+0x22>
 8002db2:	3130      	adds	r1, #48	; 0x30
 8002db4:	f1ac 0402 	sub.w	r4, ip, #2
 8002db8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002dbc:	1c41      	adds	r1, r0, #1
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	42ba      	cmp	r2, r7
 8002dc2:	d30a      	bcc.n	8002dda <__exponent+0x66>
 8002dc4:	f10d 0209 	add.w	r2, sp, #9
 8002dc8:	eba2 020c 	sub.w	r2, r2, ip
 8002dcc:	42bc      	cmp	r4, r7
 8002dce:	bf88      	it	hi
 8002dd0:	2200      	movhi	r2, #0
 8002dd2:	4413      	add	r3, r2
 8002dd4:	1a18      	subs	r0, r3, r0
 8002dd6:	b003      	add	sp, #12
 8002dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dda:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002dde:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002de2:	e7ed      	b.n	8002dc0 <__exponent+0x4c>
 8002de4:	2330      	movs	r3, #48	; 0x30
 8002de6:	3130      	adds	r1, #48	; 0x30
 8002de8:	7083      	strb	r3, [r0, #2]
 8002dea:	70c1      	strb	r1, [r0, #3]
 8002dec:	1d03      	adds	r3, r0, #4
 8002dee:	e7f1      	b.n	8002dd4 <__exponent+0x60>

08002df0 <_printf_float>:
 8002df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df4:	ed2d 8b02 	vpush	{d8}
 8002df8:	b08d      	sub	sp, #52	; 0x34
 8002dfa:	460c      	mov	r4, r1
 8002dfc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002e00:	4616      	mov	r6, r2
 8002e02:	461f      	mov	r7, r3
 8002e04:	4605      	mov	r5, r0
 8002e06:	f000 fcbf 	bl	8003788 <_localeconv_r>
 8002e0a:	f8d0 a000 	ldr.w	sl, [r0]
 8002e0e:	4650      	mov	r0, sl
 8002e10:	f7fd fa2e 	bl	8000270 <strlen>
 8002e14:	2300      	movs	r3, #0
 8002e16:	930a      	str	r3, [sp, #40]	; 0x28
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	9305      	str	r3, [sp, #20]
 8002e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002e24:	3307      	adds	r3, #7
 8002e26:	f023 0307 	bic.w	r3, r3, #7
 8002e2a:	f103 0208 	add.w	r2, r3, #8
 8002e2e:	f8c8 2000 	str.w	r2, [r8]
 8002e32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002e3a:	9307      	str	r3, [sp, #28]
 8002e3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8002e40:	ee08 0a10 	vmov	s16, r0
 8002e44:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8002e48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e4c:	4b9e      	ldr	r3, [pc, #632]	; (80030c8 <_printf_float+0x2d8>)
 8002e4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e52:	f7fd fe75 	bl	8000b40 <__aeabi_dcmpun>
 8002e56:	bb88      	cbnz	r0, 8002ebc <_printf_float+0xcc>
 8002e58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e5c:	4b9a      	ldr	r3, [pc, #616]	; (80030c8 <_printf_float+0x2d8>)
 8002e5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e62:	f7fd fe4f 	bl	8000b04 <__aeabi_dcmple>
 8002e66:	bb48      	cbnz	r0, 8002ebc <_printf_float+0xcc>
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	4640      	mov	r0, r8
 8002e6e:	4649      	mov	r1, r9
 8002e70:	f7fd fe3e 	bl	8000af0 <__aeabi_dcmplt>
 8002e74:	b110      	cbz	r0, 8002e7c <_printf_float+0x8c>
 8002e76:	232d      	movs	r3, #45	; 0x2d
 8002e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e7c:	4a93      	ldr	r2, [pc, #588]	; (80030cc <_printf_float+0x2dc>)
 8002e7e:	4b94      	ldr	r3, [pc, #592]	; (80030d0 <_printf_float+0x2e0>)
 8002e80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002e84:	bf94      	ite	ls
 8002e86:	4690      	movls	r8, r2
 8002e88:	4698      	movhi	r8, r3
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	6123      	str	r3, [r4, #16]
 8002e8e:	9b05      	ldr	r3, [sp, #20]
 8002e90:	f023 0304 	bic.w	r3, r3, #4
 8002e94:	6023      	str	r3, [r4, #0]
 8002e96:	f04f 0900 	mov.w	r9, #0
 8002e9a:	9700      	str	r7, [sp, #0]
 8002e9c:	4633      	mov	r3, r6
 8002e9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	f000 f9da 	bl	800325c <_printf_common>
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	f040 8090 	bne.w	8002fce <_printf_float+0x1de>
 8002eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eb2:	b00d      	add	sp, #52	; 0x34
 8002eb4:	ecbd 8b02 	vpop	{d8}
 8002eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ebc:	4642      	mov	r2, r8
 8002ebe:	464b      	mov	r3, r9
 8002ec0:	4640      	mov	r0, r8
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	f7fd fe3c 	bl	8000b40 <__aeabi_dcmpun>
 8002ec8:	b140      	cbz	r0, 8002edc <_printf_float+0xec>
 8002eca:	464b      	mov	r3, r9
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bfbc      	itt	lt
 8002ed0:	232d      	movlt	r3, #45	; 0x2d
 8002ed2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002ed6:	4a7f      	ldr	r2, [pc, #508]	; (80030d4 <_printf_float+0x2e4>)
 8002ed8:	4b7f      	ldr	r3, [pc, #508]	; (80030d8 <_printf_float+0x2e8>)
 8002eda:	e7d1      	b.n	8002e80 <_printf_float+0x90>
 8002edc:	6863      	ldr	r3, [r4, #4]
 8002ede:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002ee2:	9206      	str	r2, [sp, #24]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	d13f      	bne.n	8002f68 <_printf_float+0x178>
 8002ee8:	2306      	movs	r3, #6
 8002eea:	6063      	str	r3, [r4, #4]
 8002eec:	9b05      	ldr	r3, [sp, #20]
 8002eee:	6861      	ldr	r1, [r4, #4]
 8002ef0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	9303      	str	r3, [sp, #12]
 8002ef8:	ab0a      	add	r3, sp, #40	; 0x28
 8002efa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002efe:	ab09      	add	r3, sp, #36	; 0x24
 8002f00:	ec49 8b10 	vmov	d0, r8, r9
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	6022      	str	r2, [r4, #0]
 8002f08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	f7ff fecf 	bl	8002cb0 <__cvt>
 8002f12:	9b06      	ldr	r3, [sp, #24]
 8002f14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f16:	2b47      	cmp	r3, #71	; 0x47
 8002f18:	4680      	mov	r8, r0
 8002f1a:	d108      	bne.n	8002f2e <_printf_float+0x13e>
 8002f1c:	1cc8      	adds	r0, r1, #3
 8002f1e:	db02      	blt.n	8002f26 <_printf_float+0x136>
 8002f20:	6863      	ldr	r3, [r4, #4]
 8002f22:	4299      	cmp	r1, r3
 8002f24:	dd41      	ble.n	8002faa <_printf_float+0x1ba>
 8002f26:	f1ab 0302 	sub.w	r3, fp, #2
 8002f2a:	fa5f fb83 	uxtb.w	fp, r3
 8002f2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002f32:	d820      	bhi.n	8002f76 <_printf_float+0x186>
 8002f34:	3901      	subs	r1, #1
 8002f36:	465a      	mov	r2, fp
 8002f38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002f3c:	9109      	str	r1, [sp, #36]	; 0x24
 8002f3e:	f7ff ff19 	bl	8002d74 <__exponent>
 8002f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f44:	1813      	adds	r3, r2, r0
 8002f46:	2a01      	cmp	r2, #1
 8002f48:	4681      	mov	r9, r0
 8002f4a:	6123      	str	r3, [r4, #16]
 8002f4c:	dc02      	bgt.n	8002f54 <_printf_float+0x164>
 8002f4e:	6822      	ldr	r2, [r4, #0]
 8002f50:	07d2      	lsls	r2, r2, #31
 8002f52:	d501      	bpl.n	8002f58 <_printf_float+0x168>
 8002f54:	3301      	adds	r3, #1
 8002f56:	6123      	str	r3, [r4, #16]
 8002f58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d09c      	beq.n	8002e9a <_printf_float+0xaa>
 8002f60:	232d      	movs	r3, #45	; 0x2d
 8002f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f66:	e798      	b.n	8002e9a <_printf_float+0xaa>
 8002f68:	9a06      	ldr	r2, [sp, #24]
 8002f6a:	2a47      	cmp	r2, #71	; 0x47
 8002f6c:	d1be      	bne.n	8002eec <_printf_float+0xfc>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1bc      	bne.n	8002eec <_printf_float+0xfc>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e7b9      	b.n	8002eea <_printf_float+0xfa>
 8002f76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002f7a:	d118      	bne.n	8002fae <_printf_float+0x1be>
 8002f7c:	2900      	cmp	r1, #0
 8002f7e:	6863      	ldr	r3, [r4, #4]
 8002f80:	dd0b      	ble.n	8002f9a <_printf_float+0x1aa>
 8002f82:	6121      	str	r1, [r4, #16]
 8002f84:	b913      	cbnz	r3, 8002f8c <_printf_float+0x19c>
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	07d0      	lsls	r0, r2, #31
 8002f8a:	d502      	bpl.n	8002f92 <_printf_float+0x1a2>
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	440b      	add	r3, r1
 8002f90:	6123      	str	r3, [r4, #16]
 8002f92:	65a1      	str	r1, [r4, #88]	; 0x58
 8002f94:	f04f 0900 	mov.w	r9, #0
 8002f98:	e7de      	b.n	8002f58 <_printf_float+0x168>
 8002f9a:	b913      	cbnz	r3, 8002fa2 <_printf_float+0x1b2>
 8002f9c:	6822      	ldr	r2, [r4, #0]
 8002f9e:	07d2      	lsls	r2, r2, #31
 8002fa0:	d501      	bpl.n	8002fa6 <_printf_float+0x1b6>
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	e7f4      	b.n	8002f90 <_printf_float+0x1a0>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e7f2      	b.n	8002f90 <_printf_float+0x1a0>
 8002faa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fb0:	4299      	cmp	r1, r3
 8002fb2:	db05      	blt.n	8002fc0 <_printf_float+0x1d0>
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	6121      	str	r1, [r4, #16]
 8002fb8:	07d8      	lsls	r0, r3, #31
 8002fba:	d5ea      	bpl.n	8002f92 <_printf_float+0x1a2>
 8002fbc:	1c4b      	adds	r3, r1, #1
 8002fbe:	e7e7      	b.n	8002f90 <_printf_float+0x1a0>
 8002fc0:	2900      	cmp	r1, #0
 8002fc2:	bfd4      	ite	le
 8002fc4:	f1c1 0202 	rsble	r2, r1, #2
 8002fc8:	2201      	movgt	r2, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	e7e0      	b.n	8002f90 <_printf_float+0x1a0>
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	055a      	lsls	r2, r3, #21
 8002fd2:	d407      	bmi.n	8002fe4 <_printf_float+0x1f4>
 8002fd4:	6923      	ldr	r3, [r4, #16]
 8002fd6:	4642      	mov	r2, r8
 8002fd8:	4631      	mov	r1, r6
 8002fda:	4628      	mov	r0, r5
 8002fdc:	47b8      	blx	r7
 8002fde:	3001      	adds	r0, #1
 8002fe0:	d12c      	bne.n	800303c <_printf_float+0x24c>
 8002fe2:	e764      	b.n	8002eae <_printf_float+0xbe>
 8002fe4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002fe8:	f240 80e0 	bls.w	80031ac <_printf_float+0x3bc>
 8002fec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f7fd fd72 	bl	8000adc <__aeabi_dcmpeq>
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	d034      	beq.n	8003066 <_printf_float+0x276>
 8002ffc:	4a37      	ldr	r2, [pc, #220]	; (80030dc <_printf_float+0x2ec>)
 8002ffe:	2301      	movs	r3, #1
 8003000:	4631      	mov	r1, r6
 8003002:	4628      	mov	r0, r5
 8003004:	47b8      	blx	r7
 8003006:	3001      	adds	r0, #1
 8003008:	f43f af51 	beq.w	8002eae <_printf_float+0xbe>
 800300c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003010:	429a      	cmp	r2, r3
 8003012:	db02      	blt.n	800301a <_printf_float+0x22a>
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	07d8      	lsls	r0, r3, #31
 8003018:	d510      	bpl.n	800303c <_printf_float+0x24c>
 800301a:	ee18 3a10 	vmov	r3, s16
 800301e:	4652      	mov	r2, sl
 8003020:	4631      	mov	r1, r6
 8003022:	4628      	mov	r0, r5
 8003024:	47b8      	blx	r7
 8003026:	3001      	adds	r0, #1
 8003028:	f43f af41 	beq.w	8002eae <_printf_float+0xbe>
 800302c:	f04f 0800 	mov.w	r8, #0
 8003030:	f104 091a 	add.w	r9, r4, #26
 8003034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003036:	3b01      	subs	r3, #1
 8003038:	4543      	cmp	r3, r8
 800303a:	dc09      	bgt.n	8003050 <_printf_float+0x260>
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	079b      	lsls	r3, r3, #30
 8003040:	f100 8107 	bmi.w	8003252 <_printf_float+0x462>
 8003044:	68e0      	ldr	r0, [r4, #12]
 8003046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003048:	4298      	cmp	r0, r3
 800304a:	bfb8      	it	lt
 800304c:	4618      	movlt	r0, r3
 800304e:	e730      	b.n	8002eb2 <_printf_float+0xc2>
 8003050:	2301      	movs	r3, #1
 8003052:	464a      	mov	r2, r9
 8003054:	4631      	mov	r1, r6
 8003056:	4628      	mov	r0, r5
 8003058:	47b8      	blx	r7
 800305a:	3001      	adds	r0, #1
 800305c:	f43f af27 	beq.w	8002eae <_printf_float+0xbe>
 8003060:	f108 0801 	add.w	r8, r8, #1
 8003064:	e7e6      	b.n	8003034 <_printf_float+0x244>
 8003066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003068:	2b00      	cmp	r3, #0
 800306a:	dc39      	bgt.n	80030e0 <_printf_float+0x2f0>
 800306c:	4a1b      	ldr	r2, [pc, #108]	; (80030dc <_printf_float+0x2ec>)
 800306e:	2301      	movs	r3, #1
 8003070:	4631      	mov	r1, r6
 8003072:	4628      	mov	r0, r5
 8003074:	47b8      	blx	r7
 8003076:	3001      	adds	r0, #1
 8003078:	f43f af19 	beq.w	8002eae <_printf_float+0xbe>
 800307c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003080:	4313      	orrs	r3, r2
 8003082:	d102      	bne.n	800308a <_printf_float+0x29a>
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	07d9      	lsls	r1, r3, #31
 8003088:	d5d8      	bpl.n	800303c <_printf_float+0x24c>
 800308a:	ee18 3a10 	vmov	r3, s16
 800308e:	4652      	mov	r2, sl
 8003090:	4631      	mov	r1, r6
 8003092:	4628      	mov	r0, r5
 8003094:	47b8      	blx	r7
 8003096:	3001      	adds	r0, #1
 8003098:	f43f af09 	beq.w	8002eae <_printf_float+0xbe>
 800309c:	f04f 0900 	mov.w	r9, #0
 80030a0:	f104 0a1a 	add.w	sl, r4, #26
 80030a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030a6:	425b      	negs	r3, r3
 80030a8:	454b      	cmp	r3, r9
 80030aa:	dc01      	bgt.n	80030b0 <_printf_float+0x2c0>
 80030ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030ae:	e792      	b.n	8002fd6 <_printf_float+0x1e6>
 80030b0:	2301      	movs	r3, #1
 80030b2:	4652      	mov	r2, sl
 80030b4:	4631      	mov	r1, r6
 80030b6:	4628      	mov	r0, r5
 80030b8:	47b8      	blx	r7
 80030ba:	3001      	adds	r0, #1
 80030bc:	f43f aef7 	beq.w	8002eae <_printf_float+0xbe>
 80030c0:	f109 0901 	add.w	r9, r9, #1
 80030c4:	e7ee      	b.n	80030a4 <_printf_float+0x2b4>
 80030c6:	bf00      	nop
 80030c8:	7fefffff 	.word	0x7fefffff
 80030cc:	08005bf1 	.word	0x08005bf1
 80030d0:	08005bf5 	.word	0x08005bf5
 80030d4:	08005bf9 	.word	0x08005bf9
 80030d8:	08005bfd 	.word	0x08005bfd
 80030dc:	08005c01 	.word	0x08005c01
 80030e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030e4:	429a      	cmp	r2, r3
 80030e6:	bfa8      	it	ge
 80030e8:	461a      	movge	r2, r3
 80030ea:	2a00      	cmp	r2, #0
 80030ec:	4691      	mov	r9, r2
 80030ee:	dc37      	bgt.n	8003160 <_printf_float+0x370>
 80030f0:	f04f 0b00 	mov.w	fp, #0
 80030f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030f8:	f104 021a 	add.w	r2, r4, #26
 80030fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030fe:	9305      	str	r3, [sp, #20]
 8003100:	eba3 0309 	sub.w	r3, r3, r9
 8003104:	455b      	cmp	r3, fp
 8003106:	dc33      	bgt.n	8003170 <_printf_float+0x380>
 8003108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800310c:	429a      	cmp	r2, r3
 800310e:	db3b      	blt.n	8003188 <_printf_float+0x398>
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	07da      	lsls	r2, r3, #31
 8003114:	d438      	bmi.n	8003188 <_printf_float+0x398>
 8003116:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800311a:	eba2 0903 	sub.w	r9, r2, r3
 800311e:	9b05      	ldr	r3, [sp, #20]
 8003120:	1ad2      	subs	r2, r2, r3
 8003122:	4591      	cmp	r9, r2
 8003124:	bfa8      	it	ge
 8003126:	4691      	movge	r9, r2
 8003128:	f1b9 0f00 	cmp.w	r9, #0
 800312c:	dc35      	bgt.n	800319a <_printf_float+0x3aa>
 800312e:	f04f 0800 	mov.w	r8, #0
 8003132:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003136:	f104 0a1a 	add.w	sl, r4, #26
 800313a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	eba3 0309 	sub.w	r3, r3, r9
 8003144:	4543      	cmp	r3, r8
 8003146:	f77f af79 	ble.w	800303c <_printf_float+0x24c>
 800314a:	2301      	movs	r3, #1
 800314c:	4652      	mov	r2, sl
 800314e:	4631      	mov	r1, r6
 8003150:	4628      	mov	r0, r5
 8003152:	47b8      	blx	r7
 8003154:	3001      	adds	r0, #1
 8003156:	f43f aeaa 	beq.w	8002eae <_printf_float+0xbe>
 800315a:	f108 0801 	add.w	r8, r8, #1
 800315e:	e7ec      	b.n	800313a <_printf_float+0x34a>
 8003160:	4613      	mov	r3, r2
 8003162:	4631      	mov	r1, r6
 8003164:	4642      	mov	r2, r8
 8003166:	4628      	mov	r0, r5
 8003168:	47b8      	blx	r7
 800316a:	3001      	adds	r0, #1
 800316c:	d1c0      	bne.n	80030f0 <_printf_float+0x300>
 800316e:	e69e      	b.n	8002eae <_printf_float+0xbe>
 8003170:	2301      	movs	r3, #1
 8003172:	4631      	mov	r1, r6
 8003174:	4628      	mov	r0, r5
 8003176:	9205      	str	r2, [sp, #20]
 8003178:	47b8      	blx	r7
 800317a:	3001      	adds	r0, #1
 800317c:	f43f ae97 	beq.w	8002eae <_printf_float+0xbe>
 8003180:	9a05      	ldr	r2, [sp, #20]
 8003182:	f10b 0b01 	add.w	fp, fp, #1
 8003186:	e7b9      	b.n	80030fc <_printf_float+0x30c>
 8003188:	ee18 3a10 	vmov	r3, s16
 800318c:	4652      	mov	r2, sl
 800318e:	4631      	mov	r1, r6
 8003190:	4628      	mov	r0, r5
 8003192:	47b8      	blx	r7
 8003194:	3001      	adds	r0, #1
 8003196:	d1be      	bne.n	8003116 <_printf_float+0x326>
 8003198:	e689      	b.n	8002eae <_printf_float+0xbe>
 800319a:	9a05      	ldr	r2, [sp, #20]
 800319c:	464b      	mov	r3, r9
 800319e:	4442      	add	r2, r8
 80031a0:	4631      	mov	r1, r6
 80031a2:	4628      	mov	r0, r5
 80031a4:	47b8      	blx	r7
 80031a6:	3001      	adds	r0, #1
 80031a8:	d1c1      	bne.n	800312e <_printf_float+0x33e>
 80031aa:	e680      	b.n	8002eae <_printf_float+0xbe>
 80031ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031ae:	2a01      	cmp	r2, #1
 80031b0:	dc01      	bgt.n	80031b6 <_printf_float+0x3c6>
 80031b2:	07db      	lsls	r3, r3, #31
 80031b4:	d53a      	bpl.n	800322c <_printf_float+0x43c>
 80031b6:	2301      	movs	r3, #1
 80031b8:	4642      	mov	r2, r8
 80031ba:	4631      	mov	r1, r6
 80031bc:	4628      	mov	r0, r5
 80031be:	47b8      	blx	r7
 80031c0:	3001      	adds	r0, #1
 80031c2:	f43f ae74 	beq.w	8002eae <_printf_float+0xbe>
 80031c6:	ee18 3a10 	vmov	r3, s16
 80031ca:	4652      	mov	r2, sl
 80031cc:	4631      	mov	r1, r6
 80031ce:	4628      	mov	r0, r5
 80031d0:	47b8      	blx	r7
 80031d2:	3001      	adds	r0, #1
 80031d4:	f43f ae6b 	beq.w	8002eae <_printf_float+0xbe>
 80031d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031dc:	2200      	movs	r2, #0
 80031de:	2300      	movs	r3, #0
 80031e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80031e4:	f7fd fc7a 	bl	8000adc <__aeabi_dcmpeq>
 80031e8:	b9d8      	cbnz	r0, 8003222 <_printf_float+0x432>
 80031ea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80031ee:	f108 0201 	add.w	r2, r8, #1
 80031f2:	4631      	mov	r1, r6
 80031f4:	4628      	mov	r0, r5
 80031f6:	47b8      	blx	r7
 80031f8:	3001      	adds	r0, #1
 80031fa:	d10e      	bne.n	800321a <_printf_float+0x42a>
 80031fc:	e657      	b.n	8002eae <_printf_float+0xbe>
 80031fe:	2301      	movs	r3, #1
 8003200:	4652      	mov	r2, sl
 8003202:	4631      	mov	r1, r6
 8003204:	4628      	mov	r0, r5
 8003206:	47b8      	blx	r7
 8003208:	3001      	adds	r0, #1
 800320a:	f43f ae50 	beq.w	8002eae <_printf_float+0xbe>
 800320e:	f108 0801 	add.w	r8, r8, #1
 8003212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003214:	3b01      	subs	r3, #1
 8003216:	4543      	cmp	r3, r8
 8003218:	dcf1      	bgt.n	80031fe <_printf_float+0x40e>
 800321a:	464b      	mov	r3, r9
 800321c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003220:	e6da      	b.n	8002fd8 <_printf_float+0x1e8>
 8003222:	f04f 0800 	mov.w	r8, #0
 8003226:	f104 0a1a 	add.w	sl, r4, #26
 800322a:	e7f2      	b.n	8003212 <_printf_float+0x422>
 800322c:	2301      	movs	r3, #1
 800322e:	4642      	mov	r2, r8
 8003230:	e7df      	b.n	80031f2 <_printf_float+0x402>
 8003232:	2301      	movs	r3, #1
 8003234:	464a      	mov	r2, r9
 8003236:	4631      	mov	r1, r6
 8003238:	4628      	mov	r0, r5
 800323a:	47b8      	blx	r7
 800323c:	3001      	adds	r0, #1
 800323e:	f43f ae36 	beq.w	8002eae <_printf_float+0xbe>
 8003242:	f108 0801 	add.w	r8, r8, #1
 8003246:	68e3      	ldr	r3, [r4, #12]
 8003248:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800324a:	1a5b      	subs	r3, r3, r1
 800324c:	4543      	cmp	r3, r8
 800324e:	dcf0      	bgt.n	8003232 <_printf_float+0x442>
 8003250:	e6f8      	b.n	8003044 <_printf_float+0x254>
 8003252:	f04f 0800 	mov.w	r8, #0
 8003256:	f104 0919 	add.w	r9, r4, #25
 800325a:	e7f4      	b.n	8003246 <_printf_float+0x456>

0800325c <_printf_common>:
 800325c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003260:	4616      	mov	r6, r2
 8003262:	4699      	mov	r9, r3
 8003264:	688a      	ldr	r2, [r1, #8]
 8003266:	690b      	ldr	r3, [r1, #16]
 8003268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800326c:	4293      	cmp	r3, r2
 800326e:	bfb8      	it	lt
 8003270:	4613      	movlt	r3, r2
 8003272:	6033      	str	r3, [r6, #0]
 8003274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003278:	4607      	mov	r7, r0
 800327a:	460c      	mov	r4, r1
 800327c:	b10a      	cbz	r2, 8003282 <_printf_common+0x26>
 800327e:	3301      	adds	r3, #1
 8003280:	6033      	str	r3, [r6, #0]
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	0699      	lsls	r1, r3, #26
 8003286:	bf42      	ittt	mi
 8003288:	6833      	ldrmi	r3, [r6, #0]
 800328a:	3302      	addmi	r3, #2
 800328c:	6033      	strmi	r3, [r6, #0]
 800328e:	6825      	ldr	r5, [r4, #0]
 8003290:	f015 0506 	ands.w	r5, r5, #6
 8003294:	d106      	bne.n	80032a4 <_printf_common+0x48>
 8003296:	f104 0a19 	add.w	sl, r4, #25
 800329a:	68e3      	ldr	r3, [r4, #12]
 800329c:	6832      	ldr	r2, [r6, #0]
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	42ab      	cmp	r3, r5
 80032a2:	dc26      	bgt.n	80032f2 <_printf_common+0x96>
 80032a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032a8:	1e13      	subs	r3, r2, #0
 80032aa:	6822      	ldr	r2, [r4, #0]
 80032ac:	bf18      	it	ne
 80032ae:	2301      	movne	r3, #1
 80032b0:	0692      	lsls	r2, r2, #26
 80032b2:	d42b      	bmi.n	800330c <_printf_common+0xb0>
 80032b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032b8:	4649      	mov	r1, r9
 80032ba:	4638      	mov	r0, r7
 80032bc:	47c0      	blx	r8
 80032be:	3001      	adds	r0, #1
 80032c0:	d01e      	beq.n	8003300 <_printf_common+0xa4>
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	6922      	ldr	r2, [r4, #16]
 80032c6:	f003 0306 	and.w	r3, r3, #6
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	bf02      	ittt	eq
 80032ce:	68e5      	ldreq	r5, [r4, #12]
 80032d0:	6833      	ldreq	r3, [r6, #0]
 80032d2:	1aed      	subeq	r5, r5, r3
 80032d4:	68a3      	ldr	r3, [r4, #8]
 80032d6:	bf0c      	ite	eq
 80032d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032dc:	2500      	movne	r5, #0
 80032de:	4293      	cmp	r3, r2
 80032e0:	bfc4      	itt	gt
 80032e2:	1a9b      	subgt	r3, r3, r2
 80032e4:	18ed      	addgt	r5, r5, r3
 80032e6:	2600      	movs	r6, #0
 80032e8:	341a      	adds	r4, #26
 80032ea:	42b5      	cmp	r5, r6
 80032ec:	d11a      	bne.n	8003324 <_printf_common+0xc8>
 80032ee:	2000      	movs	r0, #0
 80032f0:	e008      	b.n	8003304 <_printf_common+0xa8>
 80032f2:	2301      	movs	r3, #1
 80032f4:	4652      	mov	r2, sl
 80032f6:	4649      	mov	r1, r9
 80032f8:	4638      	mov	r0, r7
 80032fa:	47c0      	blx	r8
 80032fc:	3001      	adds	r0, #1
 80032fe:	d103      	bne.n	8003308 <_printf_common+0xac>
 8003300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003308:	3501      	adds	r5, #1
 800330a:	e7c6      	b.n	800329a <_printf_common+0x3e>
 800330c:	18e1      	adds	r1, r4, r3
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	2030      	movs	r0, #48	; 0x30
 8003312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003316:	4422      	add	r2, r4
 8003318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800331c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003320:	3302      	adds	r3, #2
 8003322:	e7c7      	b.n	80032b4 <_printf_common+0x58>
 8003324:	2301      	movs	r3, #1
 8003326:	4622      	mov	r2, r4
 8003328:	4649      	mov	r1, r9
 800332a:	4638      	mov	r0, r7
 800332c:	47c0      	blx	r8
 800332e:	3001      	adds	r0, #1
 8003330:	d0e6      	beq.n	8003300 <_printf_common+0xa4>
 8003332:	3601      	adds	r6, #1
 8003334:	e7d9      	b.n	80032ea <_printf_common+0x8e>
	...

08003338 <_printf_i>:
 8003338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800333c:	7e0f      	ldrb	r7, [r1, #24]
 800333e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003340:	2f78      	cmp	r7, #120	; 0x78
 8003342:	4691      	mov	r9, r2
 8003344:	4680      	mov	r8, r0
 8003346:	460c      	mov	r4, r1
 8003348:	469a      	mov	sl, r3
 800334a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800334e:	d807      	bhi.n	8003360 <_printf_i+0x28>
 8003350:	2f62      	cmp	r7, #98	; 0x62
 8003352:	d80a      	bhi.n	800336a <_printf_i+0x32>
 8003354:	2f00      	cmp	r7, #0
 8003356:	f000 80d4 	beq.w	8003502 <_printf_i+0x1ca>
 800335a:	2f58      	cmp	r7, #88	; 0x58
 800335c:	f000 80c0 	beq.w	80034e0 <_printf_i+0x1a8>
 8003360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003368:	e03a      	b.n	80033e0 <_printf_i+0xa8>
 800336a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800336e:	2b15      	cmp	r3, #21
 8003370:	d8f6      	bhi.n	8003360 <_printf_i+0x28>
 8003372:	a101      	add	r1, pc, #4	; (adr r1, 8003378 <_printf_i+0x40>)
 8003374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003378:	080033d1 	.word	0x080033d1
 800337c:	080033e5 	.word	0x080033e5
 8003380:	08003361 	.word	0x08003361
 8003384:	08003361 	.word	0x08003361
 8003388:	08003361 	.word	0x08003361
 800338c:	08003361 	.word	0x08003361
 8003390:	080033e5 	.word	0x080033e5
 8003394:	08003361 	.word	0x08003361
 8003398:	08003361 	.word	0x08003361
 800339c:	08003361 	.word	0x08003361
 80033a0:	08003361 	.word	0x08003361
 80033a4:	080034e9 	.word	0x080034e9
 80033a8:	08003411 	.word	0x08003411
 80033ac:	080034a3 	.word	0x080034a3
 80033b0:	08003361 	.word	0x08003361
 80033b4:	08003361 	.word	0x08003361
 80033b8:	0800350b 	.word	0x0800350b
 80033bc:	08003361 	.word	0x08003361
 80033c0:	08003411 	.word	0x08003411
 80033c4:	08003361 	.word	0x08003361
 80033c8:	08003361 	.word	0x08003361
 80033cc:	080034ab 	.word	0x080034ab
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	1d1a      	adds	r2, r3, #4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	602a      	str	r2, [r5, #0]
 80033d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033e0:	2301      	movs	r3, #1
 80033e2:	e09f      	b.n	8003524 <_printf_i+0x1ec>
 80033e4:	6820      	ldr	r0, [r4, #0]
 80033e6:	682b      	ldr	r3, [r5, #0]
 80033e8:	0607      	lsls	r7, r0, #24
 80033ea:	f103 0104 	add.w	r1, r3, #4
 80033ee:	6029      	str	r1, [r5, #0]
 80033f0:	d501      	bpl.n	80033f6 <_printf_i+0xbe>
 80033f2:	681e      	ldr	r6, [r3, #0]
 80033f4:	e003      	b.n	80033fe <_printf_i+0xc6>
 80033f6:	0646      	lsls	r6, r0, #25
 80033f8:	d5fb      	bpl.n	80033f2 <_printf_i+0xba>
 80033fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80033fe:	2e00      	cmp	r6, #0
 8003400:	da03      	bge.n	800340a <_printf_i+0xd2>
 8003402:	232d      	movs	r3, #45	; 0x2d
 8003404:	4276      	negs	r6, r6
 8003406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800340a:	485a      	ldr	r0, [pc, #360]	; (8003574 <_printf_i+0x23c>)
 800340c:	230a      	movs	r3, #10
 800340e:	e012      	b.n	8003436 <_printf_i+0xfe>
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	1d19      	adds	r1, r3, #4
 8003416:	6029      	str	r1, [r5, #0]
 8003418:	0605      	lsls	r5, r0, #24
 800341a:	d501      	bpl.n	8003420 <_printf_i+0xe8>
 800341c:	681e      	ldr	r6, [r3, #0]
 800341e:	e002      	b.n	8003426 <_printf_i+0xee>
 8003420:	0641      	lsls	r1, r0, #25
 8003422:	d5fb      	bpl.n	800341c <_printf_i+0xe4>
 8003424:	881e      	ldrh	r6, [r3, #0]
 8003426:	4853      	ldr	r0, [pc, #332]	; (8003574 <_printf_i+0x23c>)
 8003428:	2f6f      	cmp	r7, #111	; 0x6f
 800342a:	bf0c      	ite	eq
 800342c:	2308      	moveq	r3, #8
 800342e:	230a      	movne	r3, #10
 8003430:	2100      	movs	r1, #0
 8003432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003436:	6865      	ldr	r5, [r4, #4]
 8003438:	60a5      	str	r5, [r4, #8]
 800343a:	2d00      	cmp	r5, #0
 800343c:	bfa2      	ittt	ge
 800343e:	6821      	ldrge	r1, [r4, #0]
 8003440:	f021 0104 	bicge.w	r1, r1, #4
 8003444:	6021      	strge	r1, [r4, #0]
 8003446:	b90e      	cbnz	r6, 800344c <_printf_i+0x114>
 8003448:	2d00      	cmp	r5, #0
 800344a:	d04b      	beq.n	80034e4 <_printf_i+0x1ac>
 800344c:	4615      	mov	r5, r2
 800344e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003452:	fb03 6711 	mls	r7, r3, r1, r6
 8003456:	5dc7      	ldrb	r7, [r0, r7]
 8003458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800345c:	4637      	mov	r7, r6
 800345e:	42bb      	cmp	r3, r7
 8003460:	460e      	mov	r6, r1
 8003462:	d9f4      	bls.n	800344e <_printf_i+0x116>
 8003464:	2b08      	cmp	r3, #8
 8003466:	d10b      	bne.n	8003480 <_printf_i+0x148>
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	07de      	lsls	r6, r3, #31
 800346c:	d508      	bpl.n	8003480 <_printf_i+0x148>
 800346e:	6923      	ldr	r3, [r4, #16]
 8003470:	6861      	ldr	r1, [r4, #4]
 8003472:	4299      	cmp	r1, r3
 8003474:	bfde      	ittt	le
 8003476:	2330      	movle	r3, #48	; 0x30
 8003478:	f805 3c01 	strble.w	r3, [r5, #-1]
 800347c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003480:	1b52      	subs	r2, r2, r5
 8003482:	6122      	str	r2, [r4, #16]
 8003484:	f8cd a000 	str.w	sl, [sp]
 8003488:	464b      	mov	r3, r9
 800348a:	aa03      	add	r2, sp, #12
 800348c:	4621      	mov	r1, r4
 800348e:	4640      	mov	r0, r8
 8003490:	f7ff fee4 	bl	800325c <_printf_common>
 8003494:	3001      	adds	r0, #1
 8003496:	d14a      	bne.n	800352e <_printf_i+0x1f6>
 8003498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800349c:	b004      	add	sp, #16
 800349e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	f043 0320 	orr.w	r3, r3, #32
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	4833      	ldr	r0, [pc, #204]	; (8003578 <_printf_i+0x240>)
 80034ac:	2778      	movs	r7, #120	; 0x78
 80034ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	6829      	ldr	r1, [r5, #0]
 80034b6:	061f      	lsls	r7, r3, #24
 80034b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80034bc:	d402      	bmi.n	80034c4 <_printf_i+0x18c>
 80034be:	065f      	lsls	r7, r3, #25
 80034c0:	bf48      	it	mi
 80034c2:	b2b6      	uxthmi	r6, r6
 80034c4:	07df      	lsls	r7, r3, #31
 80034c6:	bf48      	it	mi
 80034c8:	f043 0320 	orrmi.w	r3, r3, #32
 80034cc:	6029      	str	r1, [r5, #0]
 80034ce:	bf48      	it	mi
 80034d0:	6023      	strmi	r3, [r4, #0]
 80034d2:	b91e      	cbnz	r6, 80034dc <_printf_i+0x1a4>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	f023 0320 	bic.w	r3, r3, #32
 80034da:	6023      	str	r3, [r4, #0]
 80034dc:	2310      	movs	r3, #16
 80034de:	e7a7      	b.n	8003430 <_printf_i+0xf8>
 80034e0:	4824      	ldr	r0, [pc, #144]	; (8003574 <_printf_i+0x23c>)
 80034e2:	e7e4      	b.n	80034ae <_printf_i+0x176>
 80034e4:	4615      	mov	r5, r2
 80034e6:	e7bd      	b.n	8003464 <_printf_i+0x12c>
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	6826      	ldr	r6, [r4, #0]
 80034ec:	6961      	ldr	r1, [r4, #20]
 80034ee:	1d18      	adds	r0, r3, #4
 80034f0:	6028      	str	r0, [r5, #0]
 80034f2:	0635      	lsls	r5, r6, #24
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	d501      	bpl.n	80034fc <_printf_i+0x1c4>
 80034f8:	6019      	str	r1, [r3, #0]
 80034fa:	e002      	b.n	8003502 <_printf_i+0x1ca>
 80034fc:	0670      	lsls	r0, r6, #25
 80034fe:	d5fb      	bpl.n	80034f8 <_printf_i+0x1c0>
 8003500:	8019      	strh	r1, [r3, #0]
 8003502:	2300      	movs	r3, #0
 8003504:	6123      	str	r3, [r4, #16]
 8003506:	4615      	mov	r5, r2
 8003508:	e7bc      	b.n	8003484 <_printf_i+0x14c>
 800350a:	682b      	ldr	r3, [r5, #0]
 800350c:	1d1a      	adds	r2, r3, #4
 800350e:	602a      	str	r2, [r5, #0]
 8003510:	681d      	ldr	r5, [r3, #0]
 8003512:	6862      	ldr	r2, [r4, #4]
 8003514:	2100      	movs	r1, #0
 8003516:	4628      	mov	r0, r5
 8003518:	f7fc fe5a 	bl	80001d0 <memchr>
 800351c:	b108      	cbz	r0, 8003522 <_printf_i+0x1ea>
 800351e:	1b40      	subs	r0, r0, r5
 8003520:	6060      	str	r0, [r4, #4]
 8003522:	6863      	ldr	r3, [r4, #4]
 8003524:	6123      	str	r3, [r4, #16]
 8003526:	2300      	movs	r3, #0
 8003528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800352c:	e7aa      	b.n	8003484 <_printf_i+0x14c>
 800352e:	6923      	ldr	r3, [r4, #16]
 8003530:	462a      	mov	r2, r5
 8003532:	4649      	mov	r1, r9
 8003534:	4640      	mov	r0, r8
 8003536:	47d0      	blx	sl
 8003538:	3001      	adds	r0, #1
 800353a:	d0ad      	beq.n	8003498 <_printf_i+0x160>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	079b      	lsls	r3, r3, #30
 8003540:	d413      	bmi.n	800356a <_printf_i+0x232>
 8003542:	68e0      	ldr	r0, [r4, #12]
 8003544:	9b03      	ldr	r3, [sp, #12]
 8003546:	4298      	cmp	r0, r3
 8003548:	bfb8      	it	lt
 800354a:	4618      	movlt	r0, r3
 800354c:	e7a6      	b.n	800349c <_printf_i+0x164>
 800354e:	2301      	movs	r3, #1
 8003550:	4632      	mov	r2, r6
 8003552:	4649      	mov	r1, r9
 8003554:	4640      	mov	r0, r8
 8003556:	47d0      	blx	sl
 8003558:	3001      	adds	r0, #1
 800355a:	d09d      	beq.n	8003498 <_printf_i+0x160>
 800355c:	3501      	adds	r5, #1
 800355e:	68e3      	ldr	r3, [r4, #12]
 8003560:	9903      	ldr	r1, [sp, #12]
 8003562:	1a5b      	subs	r3, r3, r1
 8003564:	42ab      	cmp	r3, r5
 8003566:	dcf2      	bgt.n	800354e <_printf_i+0x216>
 8003568:	e7eb      	b.n	8003542 <_printf_i+0x20a>
 800356a:	2500      	movs	r5, #0
 800356c:	f104 0619 	add.w	r6, r4, #25
 8003570:	e7f5      	b.n	800355e <_printf_i+0x226>
 8003572:	bf00      	nop
 8003574:	08005c03 	.word	0x08005c03
 8003578:	08005c14 	.word	0x08005c14

0800357c <std>:
 800357c:	2300      	movs	r3, #0
 800357e:	b510      	push	{r4, lr}
 8003580:	4604      	mov	r4, r0
 8003582:	e9c0 3300 	strd	r3, r3, [r0]
 8003586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800358a:	6083      	str	r3, [r0, #8]
 800358c:	8181      	strh	r1, [r0, #12]
 800358e:	6643      	str	r3, [r0, #100]	; 0x64
 8003590:	81c2      	strh	r2, [r0, #14]
 8003592:	6183      	str	r3, [r0, #24]
 8003594:	4619      	mov	r1, r3
 8003596:	2208      	movs	r2, #8
 8003598:	305c      	adds	r0, #92	; 0x5c
 800359a:	f000 f8ec 	bl	8003776 <memset>
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <std+0x58>)
 80035a0:	6263      	str	r3, [r4, #36]	; 0x24
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <std+0x5c>)
 80035a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80035a6:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <std+0x60>)
 80035a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <std+0x64>)
 80035ac:	6323      	str	r3, [r4, #48]	; 0x30
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <std+0x68>)
 80035b0:	6224      	str	r4, [r4, #32]
 80035b2:	429c      	cmp	r4, r3
 80035b4:	d006      	beq.n	80035c4 <std+0x48>
 80035b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80035ba:	4294      	cmp	r4, r2
 80035bc:	d002      	beq.n	80035c4 <std+0x48>
 80035be:	33d0      	adds	r3, #208	; 0xd0
 80035c0:	429c      	cmp	r4, r3
 80035c2:	d105      	bne.n	80035d0 <std+0x54>
 80035c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035cc:	f000 b90a 	b.w	80037e4 <__retarget_lock_init_recursive>
 80035d0:	bd10      	pop	{r4, pc}
 80035d2:	bf00      	nop
 80035d4:	08005169 	.word	0x08005169
 80035d8:	0800518b 	.word	0x0800518b
 80035dc:	080051c3 	.word	0x080051c3
 80035e0:	080051e7 	.word	0x080051e7
 80035e4:	2000aac8 	.word	0x2000aac8

080035e8 <stdio_exit_handler>:
 80035e8:	4a02      	ldr	r2, [pc, #8]	; (80035f4 <stdio_exit_handler+0xc>)
 80035ea:	4903      	ldr	r1, [pc, #12]	; (80035f8 <stdio_exit_handler+0x10>)
 80035ec:	4803      	ldr	r0, [pc, #12]	; (80035fc <stdio_exit_handler+0x14>)
 80035ee:	f000 b869 	b.w	80036c4 <_fwalk_sglue>
 80035f2:	bf00      	nop
 80035f4:	20007cd4 	.word	0x20007cd4
 80035f8:	08004a09 	.word	0x08004a09
 80035fc:	20007ce0 	.word	0x20007ce0

08003600 <cleanup_stdio>:
 8003600:	6841      	ldr	r1, [r0, #4]
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <cleanup_stdio+0x34>)
 8003604:	4299      	cmp	r1, r3
 8003606:	b510      	push	{r4, lr}
 8003608:	4604      	mov	r4, r0
 800360a:	d001      	beq.n	8003610 <cleanup_stdio+0x10>
 800360c:	f001 f9fc 	bl	8004a08 <_fflush_r>
 8003610:	68a1      	ldr	r1, [r4, #8]
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <cleanup_stdio+0x38>)
 8003614:	4299      	cmp	r1, r3
 8003616:	d002      	beq.n	800361e <cleanup_stdio+0x1e>
 8003618:	4620      	mov	r0, r4
 800361a:	f001 f9f5 	bl	8004a08 <_fflush_r>
 800361e:	68e1      	ldr	r1, [r4, #12]
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <cleanup_stdio+0x3c>)
 8003622:	4299      	cmp	r1, r3
 8003624:	d004      	beq.n	8003630 <cleanup_stdio+0x30>
 8003626:	4620      	mov	r0, r4
 8003628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800362c:	f001 b9ec 	b.w	8004a08 <_fflush_r>
 8003630:	bd10      	pop	{r4, pc}
 8003632:	bf00      	nop
 8003634:	2000aac8 	.word	0x2000aac8
 8003638:	2000ab30 	.word	0x2000ab30
 800363c:	2000ab98 	.word	0x2000ab98

08003640 <global_stdio_init.part.0>:
 8003640:	b510      	push	{r4, lr}
 8003642:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <global_stdio_init.part.0+0x30>)
 8003644:	4c0b      	ldr	r4, [pc, #44]	; (8003674 <global_stdio_init.part.0+0x34>)
 8003646:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <global_stdio_init.part.0+0x38>)
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	4620      	mov	r0, r4
 800364c:	2200      	movs	r2, #0
 800364e:	2104      	movs	r1, #4
 8003650:	f7ff ff94 	bl	800357c <std>
 8003654:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003658:	2201      	movs	r2, #1
 800365a:	2109      	movs	r1, #9
 800365c:	f7ff ff8e 	bl	800357c <std>
 8003660:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003664:	2202      	movs	r2, #2
 8003666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800366a:	2112      	movs	r1, #18
 800366c:	f7ff bf86 	b.w	800357c <std>
 8003670:	2000ac00 	.word	0x2000ac00
 8003674:	2000aac8 	.word	0x2000aac8
 8003678:	080035e9 	.word	0x080035e9

0800367c <__sfp_lock_acquire>:
 800367c:	4801      	ldr	r0, [pc, #4]	; (8003684 <__sfp_lock_acquire+0x8>)
 800367e:	f000 b8b2 	b.w	80037e6 <__retarget_lock_acquire_recursive>
 8003682:	bf00      	nop
 8003684:	2000ac05 	.word	0x2000ac05

08003688 <__sfp_lock_release>:
 8003688:	4801      	ldr	r0, [pc, #4]	; (8003690 <__sfp_lock_release+0x8>)
 800368a:	f000 b8ad 	b.w	80037e8 <__retarget_lock_release_recursive>
 800368e:	bf00      	nop
 8003690:	2000ac05 	.word	0x2000ac05

08003694 <__sinit>:
 8003694:	b510      	push	{r4, lr}
 8003696:	4604      	mov	r4, r0
 8003698:	f7ff fff0 	bl	800367c <__sfp_lock_acquire>
 800369c:	6a23      	ldr	r3, [r4, #32]
 800369e:	b11b      	cbz	r3, 80036a8 <__sinit+0x14>
 80036a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036a4:	f7ff bff0 	b.w	8003688 <__sfp_lock_release>
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <__sinit+0x28>)
 80036aa:	6223      	str	r3, [r4, #32]
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <__sinit+0x2c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f5      	bne.n	80036a0 <__sinit+0xc>
 80036b4:	f7ff ffc4 	bl	8003640 <global_stdio_init.part.0>
 80036b8:	e7f2      	b.n	80036a0 <__sinit+0xc>
 80036ba:	bf00      	nop
 80036bc:	08003601 	.word	0x08003601
 80036c0:	2000ac00 	.word	0x2000ac00

080036c4 <_fwalk_sglue>:
 80036c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036c8:	4607      	mov	r7, r0
 80036ca:	4688      	mov	r8, r1
 80036cc:	4614      	mov	r4, r2
 80036ce:	2600      	movs	r6, #0
 80036d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036d4:	f1b9 0901 	subs.w	r9, r9, #1
 80036d8:	d505      	bpl.n	80036e6 <_fwalk_sglue+0x22>
 80036da:	6824      	ldr	r4, [r4, #0]
 80036dc:	2c00      	cmp	r4, #0
 80036de:	d1f7      	bne.n	80036d0 <_fwalk_sglue+0xc>
 80036e0:	4630      	mov	r0, r6
 80036e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036e6:	89ab      	ldrh	r3, [r5, #12]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d907      	bls.n	80036fc <_fwalk_sglue+0x38>
 80036ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036f0:	3301      	adds	r3, #1
 80036f2:	d003      	beq.n	80036fc <_fwalk_sglue+0x38>
 80036f4:	4629      	mov	r1, r5
 80036f6:	4638      	mov	r0, r7
 80036f8:	47c0      	blx	r8
 80036fa:	4306      	orrs	r6, r0
 80036fc:	3568      	adds	r5, #104	; 0x68
 80036fe:	e7e9      	b.n	80036d4 <_fwalk_sglue+0x10>

08003700 <_vsiprintf_r>:
 8003700:	b500      	push	{lr}
 8003702:	b09b      	sub	sp, #108	; 0x6c
 8003704:	9100      	str	r1, [sp, #0]
 8003706:	9104      	str	r1, [sp, #16]
 8003708:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800370c:	9105      	str	r1, [sp, #20]
 800370e:	9102      	str	r1, [sp, #8]
 8003710:	4905      	ldr	r1, [pc, #20]	; (8003728 <_vsiprintf_r+0x28>)
 8003712:	9103      	str	r1, [sp, #12]
 8003714:	4669      	mov	r1, sp
 8003716:	f000 ff4b 	bl	80045b0 <_svfiprintf_r>
 800371a:	9b00      	ldr	r3, [sp, #0]
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	b01b      	add	sp, #108	; 0x6c
 8003722:	f85d fb04 	ldr.w	pc, [sp], #4
 8003726:	bf00      	nop
 8003728:	ffff0208 	.word	0xffff0208

0800372c <vsiprintf>:
 800372c:	4613      	mov	r3, r2
 800372e:	460a      	mov	r2, r1
 8003730:	4601      	mov	r1, r0
 8003732:	4802      	ldr	r0, [pc, #8]	; (800373c <vsiprintf+0x10>)
 8003734:	6800      	ldr	r0, [r0, #0]
 8003736:	f7ff bfe3 	b.w	8003700 <_vsiprintf_r>
 800373a:	bf00      	nop
 800373c:	20007d2c 	.word	0x20007d2c

08003740 <putchar>:
 8003740:	4b02      	ldr	r3, [pc, #8]	; (800374c <putchar+0xc>)
 8003742:	4601      	mov	r1, r0
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	6882      	ldr	r2, [r0, #8]
 8003748:	f001 be78 	b.w	800543c <_putc_r>
 800374c:	20007d2c 	.word	0x20007d2c

08003750 <strncpy>:
 8003750:	b510      	push	{r4, lr}
 8003752:	3901      	subs	r1, #1
 8003754:	4603      	mov	r3, r0
 8003756:	b132      	cbz	r2, 8003766 <strncpy+0x16>
 8003758:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800375c:	f803 4b01 	strb.w	r4, [r3], #1
 8003760:	3a01      	subs	r2, #1
 8003762:	2c00      	cmp	r4, #0
 8003764:	d1f7      	bne.n	8003756 <strncpy+0x6>
 8003766:	441a      	add	r2, r3
 8003768:	2100      	movs	r1, #0
 800376a:	4293      	cmp	r3, r2
 800376c:	d100      	bne.n	8003770 <strncpy+0x20>
 800376e:	bd10      	pop	{r4, pc}
 8003770:	f803 1b01 	strb.w	r1, [r3], #1
 8003774:	e7f9      	b.n	800376a <strncpy+0x1a>

08003776 <memset>:
 8003776:	4402      	add	r2, r0
 8003778:	4603      	mov	r3, r0
 800377a:	4293      	cmp	r3, r2
 800377c:	d100      	bne.n	8003780 <memset+0xa>
 800377e:	4770      	bx	lr
 8003780:	f803 1b01 	strb.w	r1, [r3], #1
 8003784:	e7f9      	b.n	800377a <memset+0x4>
	...

08003788 <_localeconv_r>:
 8003788:	4800      	ldr	r0, [pc, #0]	; (800378c <_localeconv_r+0x4>)
 800378a:	4770      	bx	lr
 800378c:	20007e20 	.word	0x20007e20

08003790 <__errno>:
 8003790:	4b01      	ldr	r3, [pc, #4]	; (8003798 <__errno+0x8>)
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20007d2c 	.word	0x20007d2c

0800379c <__libc_init_array>:
 800379c:	b570      	push	{r4, r5, r6, lr}
 800379e:	4d0d      	ldr	r5, [pc, #52]	; (80037d4 <__libc_init_array+0x38>)
 80037a0:	4c0d      	ldr	r4, [pc, #52]	; (80037d8 <__libc_init_array+0x3c>)
 80037a2:	1b64      	subs	r4, r4, r5
 80037a4:	10a4      	asrs	r4, r4, #2
 80037a6:	2600      	movs	r6, #0
 80037a8:	42a6      	cmp	r6, r4
 80037aa:	d109      	bne.n	80037c0 <__libc_init_array+0x24>
 80037ac:	4d0b      	ldr	r5, [pc, #44]	; (80037dc <__libc_init_array+0x40>)
 80037ae:	4c0c      	ldr	r4, [pc, #48]	; (80037e0 <__libc_init_array+0x44>)
 80037b0:	f002 f952 	bl	8005a58 <_init>
 80037b4:	1b64      	subs	r4, r4, r5
 80037b6:	10a4      	asrs	r4, r4, #2
 80037b8:	2600      	movs	r6, #0
 80037ba:	42a6      	cmp	r6, r4
 80037bc:	d105      	bne.n	80037ca <__libc_init_array+0x2e>
 80037be:	bd70      	pop	{r4, r5, r6, pc}
 80037c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c4:	4798      	blx	r3
 80037c6:	3601      	adds	r6, #1
 80037c8:	e7ee      	b.n	80037a8 <__libc_init_array+0xc>
 80037ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ce:	4798      	blx	r3
 80037d0:	3601      	adds	r6, #1
 80037d2:	e7f2      	b.n	80037ba <__libc_init_array+0x1e>
 80037d4:	08005f64 	.word	0x08005f64
 80037d8:	08005f64 	.word	0x08005f64
 80037dc:	08005f64 	.word	0x08005f64
 80037e0:	08005f68 	.word	0x08005f68

080037e4 <__retarget_lock_init_recursive>:
 80037e4:	4770      	bx	lr

080037e6 <__retarget_lock_acquire_recursive>:
 80037e6:	4770      	bx	lr

080037e8 <__retarget_lock_release_recursive>:
 80037e8:	4770      	bx	lr

080037ea <memcpy>:
 80037ea:	440a      	add	r2, r1
 80037ec:	4291      	cmp	r1, r2
 80037ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80037f2:	d100      	bne.n	80037f6 <memcpy+0xc>
 80037f4:	4770      	bx	lr
 80037f6:	b510      	push	{r4, lr}
 80037f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003800:	4291      	cmp	r1, r2
 8003802:	d1f9      	bne.n	80037f8 <memcpy+0xe>
 8003804:	bd10      	pop	{r4, pc}

08003806 <quorem>:
 8003806:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800380a:	6903      	ldr	r3, [r0, #16]
 800380c:	690c      	ldr	r4, [r1, #16]
 800380e:	42a3      	cmp	r3, r4
 8003810:	4607      	mov	r7, r0
 8003812:	db7e      	blt.n	8003912 <quorem+0x10c>
 8003814:	3c01      	subs	r4, #1
 8003816:	f101 0814 	add.w	r8, r1, #20
 800381a:	f100 0514 	add.w	r5, r0, #20
 800381e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800382c:	3301      	adds	r3, #1
 800382e:	429a      	cmp	r2, r3
 8003830:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003834:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003838:	fbb2 f6f3 	udiv	r6, r2, r3
 800383c:	d331      	bcc.n	80038a2 <quorem+0x9c>
 800383e:	f04f 0e00 	mov.w	lr, #0
 8003842:	4640      	mov	r0, r8
 8003844:	46ac      	mov	ip, r5
 8003846:	46f2      	mov	sl, lr
 8003848:	f850 2b04 	ldr.w	r2, [r0], #4
 800384c:	b293      	uxth	r3, r2
 800384e:	fb06 e303 	mla	r3, r6, r3, lr
 8003852:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003856:	0c1a      	lsrs	r2, r3, #16
 8003858:	b29b      	uxth	r3, r3
 800385a:	ebaa 0303 	sub.w	r3, sl, r3
 800385e:	f8dc a000 	ldr.w	sl, [ip]
 8003862:	fa13 f38a 	uxtah	r3, r3, sl
 8003866:	fb06 220e 	mla	r2, r6, lr, r2
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	9b00      	ldr	r3, [sp, #0]
 800386e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003872:	b292      	uxth	r2, r2
 8003874:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003878:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800387c:	f8bd 3000 	ldrh.w	r3, [sp]
 8003880:	4581      	cmp	r9, r0
 8003882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003886:	f84c 3b04 	str.w	r3, [ip], #4
 800388a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800388e:	d2db      	bcs.n	8003848 <quorem+0x42>
 8003890:	f855 300b 	ldr.w	r3, [r5, fp]
 8003894:	b92b      	cbnz	r3, 80038a2 <quorem+0x9c>
 8003896:	9b01      	ldr	r3, [sp, #4]
 8003898:	3b04      	subs	r3, #4
 800389a:	429d      	cmp	r5, r3
 800389c:	461a      	mov	r2, r3
 800389e:	d32c      	bcc.n	80038fa <quorem+0xf4>
 80038a0:	613c      	str	r4, [r7, #16]
 80038a2:	4638      	mov	r0, r7
 80038a4:	f001 fb60 	bl	8004f68 <__mcmp>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	db22      	blt.n	80038f2 <quorem+0xec>
 80038ac:	3601      	adds	r6, #1
 80038ae:	4629      	mov	r1, r5
 80038b0:	2000      	movs	r0, #0
 80038b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80038b6:	f8d1 c000 	ldr.w	ip, [r1]
 80038ba:	b293      	uxth	r3, r2
 80038bc:	1ac3      	subs	r3, r0, r3
 80038be:	0c12      	lsrs	r2, r2, #16
 80038c0:	fa13 f38c 	uxtah	r3, r3, ip
 80038c4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80038c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038d2:	45c1      	cmp	r9, r8
 80038d4:	f841 3b04 	str.w	r3, [r1], #4
 80038d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80038dc:	d2e9      	bcs.n	80038b2 <quorem+0xac>
 80038de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038e6:	b922      	cbnz	r2, 80038f2 <quorem+0xec>
 80038e8:	3b04      	subs	r3, #4
 80038ea:	429d      	cmp	r5, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	d30a      	bcc.n	8003906 <quorem+0x100>
 80038f0:	613c      	str	r4, [r7, #16]
 80038f2:	4630      	mov	r0, r6
 80038f4:	b003      	add	sp, #12
 80038f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	3b04      	subs	r3, #4
 80038fe:	2a00      	cmp	r2, #0
 8003900:	d1ce      	bne.n	80038a0 <quorem+0x9a>
 8003902:	3c01      	subs	r4, #1
 8003904:	e7c9      	b.n	800389a <quorem+0x94>
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	3b04      	subs	r3, #4
 800390a:	2a00      	cmp	r2, #0
 800390c:	d1f0      	bne.n	80038f0 <quorem+0xea>
 800390e:	3c01      	subs	r4, #1
 8003910:	e7eb      	b.n	80038ea <quorem+0xe4>
 8003912:	2000      	movs	r0, #0
 8003914:	e7ee      	b.n	80038f4 <quorem+0xee>
	...

08003918 <_dtoa_r>:
 8003918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391c:	ed2d 8b04 	vpush	{d8-d9}
 8003920:	69c5      	ldr	r5, [r0, #28]
 8003922:	b093      	sub	sp, #76	; 0x4c
 8003924:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003928:	ec57 6b10 	vmov	r6, r7, d0
 800392c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003930:	9107      	str	r1, [sp, #28]
 8003932:	4604      	mov	r4, r0
 8003934:	920a      	str	r2, [sp, #40]	; 0x28
 8003936:	930d      	str	r3, [sp, #52]	; 0x34
 8003938:	b975      	cbnz	r5, 8003958 <_dtoa_r+0x40>
 800393a:	2010      	movs	r0, #16
 800393c:	f000 ff36 	bl	80047ac <malloc>
 8003940:	4602      	mov	r2, r0
 8003942:	61e0      	str	r0, [r4, #28]
 8003944:	b920      	cbnz	r0, 8003950 <_dtoa_r+0x38>
 8003946:	4bae      	ldr	r3, [pc, #696]	; (8003c00 <_dtoa_r+0x2e8>)
 8003948:	21ef      	movs	r1, #239	; 0xef
 800394a:	48ae      	ldr	r0, [pc, #696]	; (8003c04 <_dtoa_r+0x2ec>)
 800394c:	f001 fe3c 	bl	80055c8 <__assert_func>
 8003950:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003954:	6005      	str	r5, [r0, #0]
 8003956:	60c5      	str	r5, [r0, #12]
 8003958:	69e3      	ldr	r3, [r4, #28]
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	b151      	cbz	r1, 8003974 <_dtoa_r+0x5c>
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	604a      	str	r2, [r1, #4]
 8003962:	2301      	movs	r3, #1
 8003964:	4093      	lsls	r3, r2
 8003966:	608b      	str	r3, [r1, #8]
 8003968:	4620      	mov	r0, r4
 800396a:	f001 f8c1 	bl	8004af0 <_Bfree>
 800396e:	69e3      	ldr	r3, [r4, #28]
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	1e3b      	subs	r3, r7, #0
 8003976:	bfbb      	ittet	lt
 8003978:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800397c:	9303      	strlt	r3, [sp, #12]
 800397e:	2300      	movge	r3, #0
 8003980:	2201      	movlt	r2, #1
 8003982:	bfac      	ite	ge
 8003984:	f8c8 3000 	strge.w	r3, [r8]
 8003988:	f8c8 2000 	strlt.w	r2, [r8]
 800398c:	4b9e      	ldr	r3, [pc, #632]	; (8003c08 <_dtoa_r+0x2f0>)
 800398e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003992:	ea33 0308 	bics.w	r3, r3, r8
 8003996:	d11b      	bne.n	80039d0 <_dtoa_r+0xb8>
 8003998:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800399a:	f242 730f 	movw	r3, #9999	; 0x270f
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80039a4:	4333      	orrs	r3, r6
 80039a6:	f000 8593 	beq.w	80044d0 <_dtoa_r+0xbb8>
 80039aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039ac:	b963      	cbnz	r3, 80039c8 <_dtoa_r+0xb0>
 80039ae:	4b97      	ldr	r3, [pc, #604]	; (8003c0c <_dtoa_r+0x2f4>)
 80039b0:	e027      	b.n	8003a02 <_dtoa_r+0xea>
 80039b2:	4b97      	ldr	r3, [pc, #604]	; (8003c10 <_dtoa_r+0x2f8>)
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	3308      	adds	r3, #8
 80039b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	9800      	ldr	r0, [sp, #0]
 80039be:	b013      	add	sp, #76	; 0x4c
 80039c0:	ecbd 8b04 	vpop	{d8-d9}
 80039c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c8:	4b90      	ldr	r3, [pc, #576]	; (8003c0c <_dtoa_r+0x2f4>)
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	3303      	adds	r3, #3
 80039ce:	e7f3      	b.n	80039b8 <_dtoa_r+0xa0>
 80039d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80039d4:	2200      	movs	r2, #0
 80039d6:	ec51 0b17 	vmov	r0, r1, d7
 80039da:	eeb0 8a47 	vmov.f32	s16, s14
 80039de:	eef0 8a67 	vmov.f32	s17, s15
 80039e2:	2300      	movs	r3, #0
 80039e4:	f7fd f87a 	bl	8000adc <__aeabi_dcmpeq>
 80039e8:	4681      	mov	r9, r0
 80039ea:	b160      	cbz	r0, 8003a06 <_dtoa_r+0xee>
 80039ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80039ee:	2301      	movs	r3, #1
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8568 	beq.w	80044ca <_dtoa_r+0xbb2>
 80039fa:	4b86      	ldr	r3, [pc, #536]	; (8003c14 <_dtoa_r+0x2fc>)
 80039fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	e7da      	b.n	80039bc <_dtoa_r+0xa4>
 8003a06:	aa10      	add	r2, sp, #64	; 0x40
 8003a08:	a911      	add	r1, sp, #68	; 0x44
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	eeb0 0a48 	vmov.f32	s0, s16
 8003a10:	eef0 0a68 	vmov.f32	s1, s17
 8003a14:	f001 fb4e 	bl	80050b4 <__d2b>
 8003a18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003a1c:	4682      	mov	sl, r0
 8003a1e:	2d00      	cmp	r5, #0
 8003a20:	d07f      	beq.n	8003b22 <_dtoa_r+0x20a>
 8003a22:	ee18 3a90 	vmov	r3, s17
 8003a26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a2a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003a2e:	ec51 0b18 	vmov	r0, r1, d8
 8003a32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003a36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003a3a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003a3e:	4619      	mov	r1, r3
 8003a40:	2200      	movs	r2, #0
 8003a42:	4b75      	ldr	r3, [pc, #468]	; (8003c18 <_dtoa_r+0x300>)
 8003a44:	f7fc fc2a 	bl	800029c <__aeabi_dsub>
 8003a48:	a367      	add	r3, pc, #412	; (adr r3, 8003be8 <_dtoa_r+0x2d0>)
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f7fc fddd 	bl	800060c <__aeabi_dmul>
 8003a52:	a367      	add	r3, pc, #412	; (adr r3, 8003bf0 <_dtoa_r+0x2d8>)
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f7fc fc22 	bl	80002a0 <__adddf3>
 8003a5c:	4606      	mov	r6, r0
 8003a5e:	4628      	mov	r0, r5
 8003a60:	460f      	mov	r7, r1
 8003a62:	f7fc fd69 	bl	8000538 <__aeabi_i2d>
 8003a66:	a364      	add	r3, pc, #400	; (adr r3, 8003bf8 <_dtoa_r+0x2e0>)
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f7fc fdce 	bl	800060c <__aeabi_dmul>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4630      	mov	r0, r6
 8003a76:	4639      	mov	r1, r7
 8003a78:	f7fc fc12 	bl	80002a0 <__adddf3>
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	460f      	mov	r7, r1
 8003a80:	f7fd f874 	bl	8000b6c <__aeabi_d2iz>
 8003a84:	2200      	movs	r2, #0
 8003a86:	4683      	mov	fp, r0
 8003a88:	2300      	movs	r3, #0
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	4639      	mov	r1, r7
 8003a8e:	f7fd f82f 	bl	8000af0 <__aeabi_dcmplt>
 8003a92:	b148      	cbz	r0, 8003aa8 <_dtoa_r+0x190>
 8003a94:	4658      	mov	r0, fp
 8003a96:	f7fc fd4f 	bl	8000538 <__aeabi_i2d>
 8003a9a:	4632      	mov	r2, r6
 8003a9c:	463b      	mov	r3, r7
 8003a9e:	f7fd f81d 	bl	8000adc <__aeabi_dcmpeq>
 8003aa2:	b908      	cbnz	r0, 8003aa8 <_dtoa_r+0x190>
 8003aa4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003aa8:	f1bb 0f16 	cmp.w	fp, #22
 8003aac:	d857      	bhi.n	8003b5e <_dtoa_r+0x246>
 8003aae:	4b5b      	ldr	r3, [pc, #364]	; (8003c1c <_dtoa_r+0x304>)
 8003ab0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	ec51 0b18 	vmov	r0, r1, d8
 8003abc:	f7fd f818 	bl	8000af0 <__aeabi_dcmplt>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d04e      	beq.n	8003b62 <_dtoa_r+0x24a>
 8003ac4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003ac8:	2300      	movs	r3, #0
 8003aca:	930c      	str	r3, [sp, #48]	; 0x30
 8003acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003ace:	1b5b      	subs	r3, r3, r5
 8003ad0:	1e5a      	subs	r2, r3, #1
 8003ad2:	bf45      	ittet	mi
 8003ad4:	f1c3 0301 	rsbmi	r3, r3, #1
 8003ad8:	9305      	strmi	r3, [sp, #20]
 8003ada:	2300      	movpl	r3, #0
 8003adc:	2300      	movmi	r3, #0
 8003ade:	9206      	str	r2, [sp, #24]
 8003ae0:	bf54      	ite	pl
 8003ae2:	9305      	strpl	r3, [sp, #20]
 8003ae4:	9306      	strmi	r3, [sp, #24]
 8003ae6:	f1bb 0f00 	cmp.w	fp, #0
 8003aea:	db3c      	blt.n	8003b66 <_dtoa_r+0x24e>
 8003aec:	9b06      	ldr	r3, [sp, #24]
 8003aee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003af2:	445b      	add	r3, fp
 8003af4:	9306      	str	r3, [sp, #24]
 8003af6:	2300      	movs	r3, #0
 8003af8:	9308      	str	r3, [sp, #32]
 8003afa:	9b07      	ldr	r3, [sp, #28]
 8003afc:	2b09      	cmp	r3, #9
 8003afe:	d868      	bhi.n	8003bd2 <_dtoa_r+0x2ba>
 8003b00:	2b05      	cmp	r3, #5
 8003b02:	bfc4      	itt	gt
 8003b04:	3b04      	subgt	r3, #4
 8003b06:	9307      	strgt	r3, [sp, #28]
 8003b08:	9b07      	ldr	r3, [sp, #28]
 8003b0a:	f1a3 0302 	sub.w	r3, r3, #2
 8003b0e:	bfcc      	ite	gt
 8003b10:	2500      	movgt	r5, #0
 8003b12:	2501      	movle	r5, #1
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	f200 8085 	bhi.w	8003c24 <_dtoa_r+0x30c>
 8003b1a:	e8df f003 	tbb	[pc, r3]
 8003b1e:	3b2e      	.short	0x3b2e
 8003b20:	5839      	.short	0x5839
 8003b22:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003b26:	441d      	add	r5, r3
 8003b28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	bfc1      	itttt	gt
 8003b30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003b34:	fa08 f803 	lslgt.w	r8, r8, r3
 8003b38:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003b3c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003b40:	bfd6      	itet	le
 8003b42:	f1c3 0320 	rsble	r3, r3, #32
 8003b46:	ea48 0003 	orrgt.w	r0, r8, r3
 8003b4a:	fa06 f003 	lslle.w	r0, r6, r3
 8003b4e:	f7fc fce3 	bl	8000518 <__aeabi_ui2d>
 8003b52:	2201      	movs	r2, #1
 8003b54:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003b58:	3d01      	subs	r5, #1
 8003b5a:	920e      	str	r2, [sp, #56]	; 0x38
 8003b5c:	e76f      	b.n	8003a3e <_dtoa_r+0x126>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e7b3      	b.n	8003aca <_dtoa_r+0x1b2>
 8003b62:	900c      	str	r0, [sp, #48]	; 0x30
 8003b64:	e7b2      	b.n	8003acc <_dtoa_r+0x1b4>
 8003b66:	9b05      	ldr	r3, [sp, #20]
 8003b68:	eba3 030b 	sub.w	r3, r3, fp
 8003b6c:	9305      	str	r3, [sp, #20]
 8003b6e:	f1cb 0300 	rsb	r3, fp, #0
 8003b72:	9308      	str	r3, [sp, #32]
 8003b74:	2300      	movs	r3, #0
 8003b76:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b78:	e7bf      	b.n	8003afa <_dtoa_r+0x1e2>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	dc52      	bgt.n	8003c2a <_dtoa_r+0x312>
 8003b84:	2301      	movs	r3, #1
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	9304      	str	r3, [sp, #16]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	920a      	str	r2, [sp, #40]	; 0x28
 8003b8e:	e00b      	b.n	8003ba8 <_dtoa_r+0x290>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e7f3      	b.n	8003b7c <_dtoa_r+0x264>
 8003b94:	2300      	movs	r3, #0
 8003b96:	9309      	str	r3, [sp, #36]	; 0x24
 8003b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b9a:	445b      	add	r3, fp
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	9304      	str	r3, [sp, #16]
 8003ba4:	bfb8      	it	lt
 8003ba6:	2301      	movlt	r3, #1
 8003ba8:	69e0      	ldr	r0, [r4, #28]
 8003baa:	2100      	movs	r1, #0
 8003bac:	2204      	movs	r2, #4
 8003bae:	f102 0614 	add.w	r6, r2, #20
 8003bb2:	429e      	cmp	r6, r3
 8003bb4:	d93d      	bls.n	8003c32 <_dtoa_r+0x31a>
 8003bb6:	6041      	str	r1, [r0, #4]
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f000 ff59 	bl	8004a70 <_Balloc>
 8003bbe:	9000      	str	r0, [sp, #0]
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	d139      	bne.n	8003c38 <_dtoa_r+0x320>
 8003bc4:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <_dtoa_r+0x308>)
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	f240 11af 	movw	r1, #431	; 0x1af
 8003bcc:	e6bd      	b.n	800394a <_dtoa_r+0x32>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e7e1      	b.n	8003b96 <_dtoa_r+0x27e>
 8003bd2:	2501      	movs	r5, #1
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	9307      	str	r3, [sp, #28]
 8003bd8:	9509      	str	r5, [sp, #36]	; 0x24
 8003bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	9304      	str	r3, [sp, #16]
 8003be2:	2200      	movs	r2, #0
 8003be4:	2312      	movs	r3, #18
 8003be6:	e7d1      	b.n	8003b8c <_dtoa_r+0x274>
 8003be8:	636f4361 	.word	0x636f4361
 8003bec:	3fd287a7 	.word	0x3fd287a7
 8003bf0:	8b60c8b3 	.word	0x8b60c8b3
 8003bf4:	3fc68a28 	.word	0x3fc68a28
 8003bf8:	509f79fb 	.word	0x509f79fb
 8003bfc:	3fd34413 	.word	0x3fd34413
 8003c00:	08005c32 	.word	0x08005c32
 8003c04:	08005c49 	.word	0x08005c49
 8003c08:	7ff00000 	.word	0x7ff00000
 8003c0c:	08005c2e 	.word	0x08005c2e
 8003c10:	08005c25 	.word	0x08005c25
 8003c14:	08005c02 	.word	0x08005c02
 8003c18:	3ff80000 	.word	0x3ff80000
 8003c1c:	08005d48 	.word	0x08005d48
 8003c20:	08005ca1 	.word	0x08005ca1
 8003c24:	2301      	movs	r3, #1
 8003c26:	9309      	str	r3, [sp, #36]	; 0x24
 8003c28:	e7d7      	b.n	8003bda <_dtoa_r+0x2c2>
 8003c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	9304      	str	r3, [sp, #16]
 8003c30:	e7ba      	b.n	8003ba8 <_dtoa_r+0x290>
 8003c32:	3101      	adds	r1, #1
 8003c34:	0052      	lsls	r2, r2, #1
 8003c36:	e7ba      	b.n	8003bae <_dtoa_r+0x296>
 8003c38:	69e3      	ldr	r3, [r4, #28]
 8003c3a:	9a00      	ldr	r2, [sp, #0]
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	9b04      	ldr	r3, [sp, #16]
 8003c40:	2b0e      	cmp	r3, #14
 8003c42:	f200 80a8 	bhi.w	8003d96 <_dtoa_r+0x47e>
 8003c46:	2d00      	cmp	r5, #0
 8003c48:	f000 80a5 	beq.w	8003d96 <_dtoa_r+0x47e>
 8003c4c:	f1bb 0f00 	cmp.w	fp, #0
 8003c50:	dd38      	ble.n	8003cc4 <_dtoa_r+0x3ac>
 8003c52:	4bc0      	ldr	r3, [pc, #768]	; (8003f54 <_dtoa_r+0x63c>)
 8003c54:	f00b 020f 	and.w	r2, fp, #15
 8003c58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003c60:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003c64:	ea4f 182b 	mov.w	r8, fp, asr #4
 8003c68:	d019      	beq.n	8003c9e <_dtoa_r+0x386>
 8003c6a:	4bbb      	ldr	r3, [pc, #748]	; (8003f58 <_dtoa_r+0x640>)
 8003c6c:	ec51 0b18 	vmov	r0, r1, d8
 8003c70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c74:	f7fc fdf4 	bl	8000860 <__aeabi_ddiv>
 8003c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c7c:	f008 080f 	and.w	r8, r8, #15
 8003c80:	2503      	movs	r5, #3
 8003c82:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8003f58 <_dtoa_r+0x640>
 8003c86:	f1b8 0f00 	cmp.w	r8, #0
 8003c8a:	d10a      	bne.n	8003ca2 <_dtoa_r+0x38a>
 8003c8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c90:	4632      	mov	r2, r6
 8003c92:	463b      	mov	r3, r7
 8003c94:	f7fc fde4 	bl	8000860 <__aeabi_ddiv>
 8003c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c9c:	e02b      	b.n	8003cf6 <_dtoa_r+0x3de>
 8003c9e:	2502      	movs	r5, #2
 8003ca0:	e7ef      	b.n	8003c82 <_dtoa_r+0x36a>
 8003ca2:	f018 0f01 	tst.w	r8, #1
 8003ca6:	d008      	beq.n	8003cba <_dtoa_r+0x3a2>
 8003ca8:	4630      	mov	r0, r6
 8003caa:	4639      	mov	r1, r7
 8003cac:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003cb0:	f7fc fcac 	bl	800060c <__aeabi_dmul>
 8003cb4:	3501      	adds	r5, #1
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	460f      	mov	r7, r1
 8003cba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003cbe:	f109 0908 	add.w	r9, r9, #8
 8003cc2:	e7e0      	b.n	8003c86 <_dtoa_r+0x36e>
 8003cc4:	f000 809f 	beq.w	8003e06 <_dtoa_r+0x4ee>
 8003cc8:	f1cb 0600 	rsb	r6, fp, #0
 8003ccc:	4ba1      	ldr	r3, [pc, #644]	; (8003f54 <_dtoa_r+0x63c>)
 8003cce:	4fa2      	ldr	r7, [pc, #648]	; (8003f58 <_dtoa_r+0x640>)
 8003cd0:	f006 020f 	and.w	r2, r6, #15
 8003cd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	ec51 0b18 	vmov	r0, r1, d8
 8003ce0:	f7fc fc94 	bl	800060c <__aeabi_dmul>
 8003ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ce8:	1136      	asrs	r6, r6, #4
 8003cea:	2300      	movs	r3, #0
 8003cec:	2502      	movs	r5, #2
 8003cee:	2e00      	cmp	r6, #0
 8003cf0:	d17e      	bne.n	8003df0 <_dtoa_r+0x4d8>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1d0      	bne.n	8003c98 <_dtoa_r+0x380>
 8003cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cf8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8084 	beq.w	8003e0a <_dtoa_r+0x4f2>
 8003d02:	4b96      	ldr	r3, [pc, #600]	; (8003f5c <_dtoa_r+0x644>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	4640      	mov	r0, r8
 8003d08:	4649      	mov	r1, r9
 8003d0a:	f7fc fef1 	bl	8000af0 <__aeabi_dcmplt>
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d07b      	beq.n	8003e0a <_dtoa_r+0x4f2>
 8003d12:	9b04      	ldr	r3, [sp, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d078      	beq.n	8003e0a <_dtoa_r+0x4f2>
 8003d18:	9b01      	ldr	r3, [sp, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	dd39      	ble.n	8003d92 <_dtoa_r+0x47a>
 8003d1e:	4b90      	ldr	r3, [pc, #576]	; (8003f60 <_dtoa_r+0x648>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	4640      	mov	r0, r8
 8003d24:	4649      	mov	r1, r9
 8003d26:	f7fc fc71 	bl	800060c <__aeabi_dmul>
 8003d2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d2e:	9e01      	ldr	r6, [sp, #4]
 8003d30:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8003d34:	3501      	adds	r5, #1
 8003d36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f7fc fbfc 	bl	8000538 <__aeabi_i2d>
 8003d40:	4642      	mov	r2, r8
 8003d42:	464b      	mov	r3, r9
 8003d44:	f7fc fc62 	bl	800060c <__aeabi_dmul>
 8003d48:	4b86      	ldr	r3, [pc, #536]	; (8003f64 <_dtoa_r+0x64c>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f7fc faa8 	bl	80002a0 <__adddf3>
 8003d50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d58:	9303      	str	r3, [sp, #12]
 8003d5a:	2e00      	cmp	r6, #0
 8003d5c:	d158      	bne.n	8003e10 <_dtoa_r+0x4f8>
 8003d5e:	4b82      	ldr	r3, [pc, #520]	; (8003f68 <_dtoa_r+0x650>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	4640      	mov	r0, r8
 8003d64:	4649      	mov	r1, r9
 8003d66:	f7fc fa99 	bl	800029c <__aeabi_dsub>
 8003d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d6e:	4680      	mov	r8, r0
 8003d70:	4689      	mov	r9, r1
 8003d72:	f7fc fedb 	bl	8000b2c <__aeabi_dcmpgt>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	f040 8296 	bne.w	80042a8 <_dtoa_r+0x990>
 8003d7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003d80:	4640      	mov	r0, r8
 8003d82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d86:	4649      	mov	r1, r9
 8003d88:	f7fc feb2 	bl	8000af0 <__aeabi_dcmplt>
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	f040 8289 	bne.w	80042a4 <_dtoa_r+0x98c>
 8003d92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8003d96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f2c0 814e 	blt.w	800403a <_dtoa_r+0x722>
 8003d9e:	f1bb 0f0e 	cmp.w	fp, #14
 8003da2:	f300 814a 	bgt.w	800403a <_dtoa_r+0x722>
 8003da6:	4b6b      	ldr	r3, [pc, #428]	; (8003f54 <_dtoa_r+0x63c>)
 8003da8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003dac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f280 80dc 	bge.w	8003f70 <_dtoa_r+0x658>
 8003db8:	9b04      	ldr	r3, [sp, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f300 80d8 	bgt.w	8003f70 <_dtoa_r+0x658>
 8003dc0:	f040 826f 	bne.w	80042a2 <_dtoa_r+0x98a>
 8003dc4:	4b68      	ldr	r3, [pc, #416]	; (8003f68 <_dtoa_r+0x650>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4640      	mov	r0, r8
 8003dca:	4649      	mov	r1, r9
 8003dcc:	f7fc fc1e 	bl	800060c <__aeabi_dmul>
 8003dd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dd4:	f7fc fea0 	bl	8000b18 <__aeabi_dcmpge>
 8003dd8:	9e04      	ldr	r6, [sp, #16]
 8003dda:	4637      	mov	r7, r6
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	f040 8245 	bne.w	800426c <_dtoa_r+0x954>
 8003de2:	9d00      	ldr	r5, [sp, #0]
 8003de4:	2331      	movs	r3, #49	; 0x31
 8003de6:	f805 3b01 	strb.w	r3, [r5], #1
 8003dea:	f10b 0b01 	add.w	fp, fp, #1
 8003dee:	e241      	b.n	8004274 <_dtoa_r+0x95c>
 8003df0:	07f2      	lsls	r2, r6, #31
 8003df2:	d505      	bpl.n	8003e00 <_dtoa_r+0x4e8>
 8003df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003df8:	f7fc fc08 	bl	800060c <__aeabi_dmul>
 8003dfc:	3501      	adds	r5, #1
 8003dfe:	2301      	movs	r3, #1
 8003e00:	1076      	asrs	r6, r6, #1
 8003e02:	3708      	adds	r7, #8
 8003e04:	e773      	b.n	8003cee <_dtoa_r+0x3d6>
 8003e06:	2502      	movs	r5, #2
 8003e08:	e775      	b.n	8003cf6 <_dtoa_r+0x3de>
 8003e0a:	9e04      	ldr	r6, [sp, #16]
 8003e0c:	465f      	mov	r7, fp
 8003e0e:	e792      	b.n	8003d36 <_dtoa_r+0x41e>
 8003e10:	9900      	ldr	r1, [sp, #0]
 8003e12:	4b50      	ldr	r3, [pc, #320]	; (8003f54 <_dtoa_r+0x63c>)
 8003e14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003e18:	4431      	add	r1, r6
 8003e1a:	9102      	str	r1, [sp, #8]
 8003e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e1e:	eeb0 9a47 	vmov.f32	s18, s14
 8003e22:	eef0 9a67 	vmov.f32	s19, s15
 8003e26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003e2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	d044      	beq.n	8003ebc <_dtoa_r+0x5a4>
 8003e32:	494e      	ldr	r1, [pc, #312]	; (8003f6c <_dtoa_r+0x654>)
 8003e34:	2000      	movs	r0, #0
 8003e36:	f7fc fd13 	bl	8000860 <__aeabi_ddiv>
 8003e3a:	ec53 2b19 	vmov	r2, r3, d9
 8003e3e:	f7fc fa2d 	bl	800029c <__aeabi_dsub>
 8003e42:	9d00      	ldr	r5, [sp, #0]
 8003e44:	ec41 0b19 	vmov	d9, r0, r1
 8003e48:	4649      	mov	r1, r9
 8003e4a:	4640      	mov	r0, r8
 8003e4c:	f7fc fe8e 	bl	8000b6c <__aeabi_d2iz>
 8003e50:	4606      	mov	r6, r0
 8003e52:	f7fc fb71 	bl	8000538 <__aeabi_i2d>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4640      	mov	r0, r8
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	f7fc fa1d 	bl	800029c <__aeabi_dsub>
 8003e62:	3630      	adds	r6, #48	; 0x30
 8003e64:	f805 6b01 	strb.w	r6, [r5], #1
 8003e68:	ec53 2b19 	vmov	r2, r3, d9
 8003e6c:	4680      	mov	r8, r0
 8003e6e:	4689      	mov	r9, r1
 8003e70:	f7fc fe3e 	bl	8000af0 <__aeabi_dcmplt>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d164      	bne.n	8003f42 <_dtoa_r+0x62a>
 8003e78:	4642      	mov	r2, r8
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	4937      	ldr	r1, [pc, #220]	; (8003f5c <_dtoa_r+0x644>)
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f7fc fa0c 	bl	800029c <__aeabi_dsub>
 8003e84:	ec53 2b19 	vmov	r2, r3, d9
 8003e88:	f7fc fe32 	bl	8000af0 <__aeabi_dcmplt>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	f040 80b6 	bne.w	8003ffe <_dtoa_r+0x6e6>
 8003e92:	9b02      	ldr	r3, [sp, #8]
 8003e94:	429d      	cmp	r5, r3
 8003e96:	f43f af7c 	beq.w	8003d92 <_dtoa_r+0x47a>
 8003e9a:	4b31      	ldr	r3, [pc, #196]	; (8003f60 <_dtoa_r+0x648>)
 8003e9c:	ec51 0b19 	vmov	r0, r1, d9
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f7fc fbb3 	bl	800060c <__aeabi_dmul>
 8003ea6:	4b2e      	ldr	r3, [pc, #184]	; (8003f60 <_dtoa_r+0x648>)
 8003ea8:	ec41 0b19 	vmov	d9, r0, r1
 8003eac:	2200      	movs	r2, #0
 8003eae:	4640      	mov	r0, r8
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	f7fc fbab 	bl	800060c <__aeabi_dmul>
 8003eb6:	4680      	mov	r8, r0
 8003eb8:	4689      	mov	r9, r1
 8003eba:	e7c5      	b.n	8003e48 <_dtoa_r+0x530>
 8003ebc:	ec51 0b17 	vmov	r0, r1, d7
 8003ec0:	f7fc fba4 	bl	800060c <__aeabi_dmul>
 8003ec4:	9b02      	ldr	r3, [sp, #8]
 8003ec6:	9d00      	ldr	r5, [sp, #0]
 8003ec8:	930f      	str	r3, [sp, #60]	; 0x3c
 8003eca:	ec41 0b19 	vmov	d9, r0, r1
 8003ece:	4649      	mov	r1, r9
 8003ed0:	4640      	mov	r0, r8
 8003ed2:	f7fc fe4b 	bl	8000b6c <__aeabi_d2iz>
 8003ed6:	4606      	mov	r6, r0
 8003ed8:	f7fc fb2e 	bl	8000538 <__aeabi_i2d>
 8003edc:	3630      	adds	r6, #48	; 0x30
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	f7fc f9d9 	bl	800029c <__aeabi_dsub>
 8003eea:	f805 6b01 	strb.w	r6, [r5], #1
 8003eee:	9b02      	ldr	r3, [sp, #8]
 8003ef0:	429d      	cmp	r5, r3
 8003ef2:	4680      	mov	r8, r0
 8003ef4:	4689      	mov	r9, r1
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	d124      	bne.n	8003f46 <_dtoa_r+0x62e>
 8003efc:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <_dtoa_r+0x654>)
 8003efe:	ec51 0b19 	vmov	r0, r1, d9
 8003f02:	f7fc f9cd 	bl	80002a0 <__adddf3>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4640      	mov	r0, r8
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	f7fc fe0d 	bl	8000b2c <__aeabi_dcmpgt>
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d173      	bne.n	8003ffe <_dtoa_r+0x6e6>
 8003f16:	ec53 2b19 	vmov	r2, r3, d9
 8003f1a:	4914      	ldr	r1, [pc, #80]	; (8003f6c <_dtoa_r+0x654>)
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7fc f9bd 	bl	800029c <__aeabi_dsub>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4640      	mov	r0, r8
 8003f28:	4649      	mov	r1, r9
 8003f2a:	f7fc fde1 	bl	8000af0 <__aeabi_dcmplt>
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	f43f af2f 	beq.w	8003d92 <_dtoa_r+0x47a>
 8003f34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003f36:	1e6b      	subs	r3, r5, #1
 8003f38:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f3e:	2b30      	cmp	r3, #48	; 0x30
 8003f40:	d0f8      	beq.n	8003f34 <_dtoa_r+0x61c>
 8003f42:	46bb      	mov	fp, r7
 8003f44:	e04a      	b.n	8003fdc <_dtoa_r+0x6c4>
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <_dtoa_r+0x648>)
 8003f48:	f7fc fb60 	bl	800060c <__aeabi_dmul>
 8003f4c:	4680      	mov	r8, r0
 8003f4e:	4689      	mov	r9, r1
 8003f50:	e7bd      	b.n	8003ece <_dtoa_r+0x5b6>
 8003f52:	bf00      	nop
 8003f54:	08005d48 	.word	0x08005d48
 8003f58:	08005d20 	.word	0x08005d20
 8003f5c:	3ff00000 	.word	0x3ff00000
 8003f60:	40240000 	.word	0x40240000
 8003f64:	401c0000 	.word	0x401c0000
 8003f68:	40140000 	.word	0x40140000
 8003f6c:	3fe00000 	.word	0x3fe00000
 8003f70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f74:	9d00      	ldr	r5, [sp, #0]
 8003f76:	4642      	mov	r2, r8
 8003f78:	464b      	mov	r3, r9
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	4639      	mov	r1, r7
 8003f7e:	f7fc fc6f 	bl	8000860 <__aeabi_ddiv>
 8003f82:	f7fc fdf3 	bl	8000b6c <__aeabi_d2iz>
 8003f86:	9001      	str	r0, [sp, #4]
 8003f88:	f7fc fad6 	bl	8000538 <__aeabi_i2d>
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	464b      	mov	r3, r9
 8003f90:	f7fc fb3c 	bl	800060c <__aeabi_dmul>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4630      	mov	r0, r6
 8003f9a:	4639      	mov	r1, r7
 8003f9c:	f7fc f97e 	bl	800029c <__aeabi_dsub>
 8003fa0:	9e01      	ldr	r6, [sp, #4]
 8003fa2:	9f04      	ldr	r7, [sp, #16]
 8003fa4:	3630      	adds	r6, #48	; 0x30
 8003fa6:	f805 6b01 	strb.w	r6, [r5], #1
 8003faa:	9e00      	ldr	r6, [sp, #0]
 8003fac:	1bae      	subs	r6, r5, r6
 8003fae:	42b7      	cmp	r7, r6
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	d134      	bne.n	8004020 <_dtoa_r+0x708>
 8003fb6:	f7fc f973 	bl	80002a0 <__adddf3>
 8003fba:	4642      	mov	r2, r8
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	4606      	mov	r6, r0
 8003fc0:	460f      	mov	r7, r1
 8003fc2:	f7fc fdb3 	bl	8000b2c <__aeabi_dcmpgt>
 8003fc6:	b9c8      	cbnz	r0, 8003ffc <_dtoa_r+0x6e4>
 8003fc8:	4642      	mov	r2, r8
 8003fca:	464b      	mov	r3, r9
 8003fcc:	4630      	mov	r0, r6
 8003fce:	4639      	mov	r1, r7
 8003fd0:	f7fc fd84 	bl	8000adc <__aeabi_dcmpeq>
 8003fd4:	b110      	cbz	r0, 8003fdc <_dtoa_r+0x6c4>
 8003fd6:	9b01      	ldr	r3, [sp, #4]
 8003fd8:	07db      	lsls	r3, r3, #31
 8003fda:	d40f      	bmi.n	8003ffc <_dtoa_r+0x6e4>
 8003fdc:	4651      	mov	r1, sl
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f000 fd86 	bl	8004af0 <_Bfree>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003fe8:	702b      	strb	r3, [r5, #0]
 8003fea:	f10b 0301 	add.w	r3, fp, #1
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f43f ace2 	beq.w	80039bc <_dtoa_r+0xa4>
 8003ff8:	601d      	str	r5, [r3, #0]
 8003ffa:	e4df      	b.n	80039bc <_dtoa_r+0xa4>
 8003ffc:	465f      	mov	r7, fp
 8003ffe:	462b      	mov	r3, r5
 8004000:	461d      	mov	r5, r3
 8004002:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004006:	2a39      	cmp	r2, #57	; 0x39
 8004008:	d106      	bne.n	8004018 <_dtoa_r+0x700>
 800400a:	9a00      	ldr	r2, [sp, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d1f7      	bne.n	8004000 <_dtoa_r+0x6e8>
 8004010:	9900      	ldr	r1, [sp, #0]
 8004012:	2230      	movs	r2, #48	; 0x30
 8004014:	3701      	adds	r7, #1
 8004016:	700a      	strb	r2, [r1, #0]
 8004018:	781a      	ldrb	r2, [r3, #0]
 800401a:	3201      	adds	r2, #1
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e790      	b.n	8003f42 <_dtoa_r+0x62a>
 8004020:	4ba3      	ldr	r3, [pc, #652]	; (80042b0 <_dtoa_r+0x998>)
 8004022:	2200      	movs	r2, #0
 8004024:	f7fc faf2 	bl	800060c <__aeabi_dmul>
 8004028:	2200      	movs	r2, #0
 800402a:	2300      	movs	r3, #0
 800402c:	4606      	mov	r6, r0
 800402e:	460f      	mov	r7, r1
 8004030:	f7fc fd54 	bl	8000adc <__aeabi_dcmpeq>
 8004034:	2800      	cmp	r0, #0
 8004036:	d09e      	beq.n	8003f76 <_dtoa_r+0x65e>
 8004038:	e7d0      	b.n	8003fdc <_dtoa_r+0x6c4>
 800403a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800403c:	2a00      	cmp	r2, #0
 800403e:	f000 80ca 	beq.w	80041d6 <_dtoa_r+0x8be>
 8004042:	9a07      	ldr	r2, [sp, #28]
 8004044:	2a01      	cmp	r2, #1
 8004046:	f300 80ad 	bgt.w	80041a4 <_dtoa_r+0x88c>
 800404a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800404c:	2a00      	cmp	r2, #0
 800404e:	f000 80a5 	beq.w	800419c <_dtoa_r+0x884>
 8004052:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004056:	9e08      	ldr	r6, [sp, #32]
 8004058:	9d05      	ldr	r5, [sp, #20]
 800405a:	9a05      	ldr	r2, [sp, #20]
 800405c:	441a      	add	r2, r3
 800405e:	9205      	str	r2, [sp, #20]
 8004060:	9a06      	ldr	r2, [sp, #24]
 8004062:	2101      	movs	r1, #1
 8004064:	441a      	add	r2, r3
 8004066:	4620      	mov	r0, r4
 8004068:	9206      	str	r2, [sp, #24]
 800406a:	f000 fdf7 	bl	8004c5c <__i2b>
 800406e:	4607      	mov	r7, r0
 8004070:	b165      	cbz	r5, 800408c <_dtoa_r+0x774>
 8004072:	9b06      	ldr	r3, [sp, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	dd09      	ble.n	800408c <_dtoa_r+0x774>
 8004078:	42ab      	cmp	r3, r5
 800407a:	9a05      	ldr	r2, [sp, #20]
 800407c:	bfa8      	it	ge
 800407e:	462b      	movge	r3, r5
 8004080:	1ad2      	subs	r2, r2, r3
 8004082:	9205      	str	r2, [sp, #20]
 8004084:	9a06      	ldr	r2, [sp, #24]
 8004086:	1aed      	subs	r5, r5, r3
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	9306      	str	r3, [sp, #24]
 800408c:	9b08      	ldr	r3, [sp, #32]
 800408e:	b1f3      	cbz	r3, 80040ce <_dtoa_r+0x7b6>
 8004090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80a3 	beq.w	80041de <_dtoa_r+0x8c6>
 8004098:	2e00      	cmp	r6, #0
 800409a:	dd10      	ble.n	80040be <_dtoa_r+0x7a6>
 800409c:	4639      	mov	r1, r7
 800409e:	4632      	mov	r2, r6
 80040a0:	4620      	mov	r0, r4
 80040a2:	f000 fe9b 	bl	8004ddc <__pow5mult>
 80040a6:	4652      	mov	r2, sl
 80040a8:	4601      	mov	r1, r0
 80040aa:	4607      	mov	r7, r0
 80040ac:	4620      	mov	r0, r4
 80040ae:	f000 fdeb 	bl	8004c88 <__multiply>
 80040b2:	4651      	mov	r1, sl
 80040b4:	4680      	mov	r8, r0
 80040b6:	4620      	mov	r0, r4
 80040b8:	f000 fd1a 	bl	8004af0 <_Bfree>
 80040bc:	46c2      	mov	sl, r8
 80040be:	9b08      	ldr	r3, [sp, #32]
 80040c0:	1b9a      	subs	r2, r3, r6
 80040c2:	d004      	beq.n	80040ce <_dtoa_r+0x7b6>
 80040c4:	4651      	mov	r1, sl
 80040c6:	4620      	mov	r0, r4
 80040c8:	f000 fe88 	bl	8004ddc <__pow5mult>
 80040cc:	4682      	mov	sl, r0
 80040ce:	2101      	movs	r1, #1
 80040d0:	4620      	mov	r0, r4
 80040d2:	f000 fdc3 	bl	8004c5c <__i2b>
 80040d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	4606      	mov	r6, r0
 80040dc:	f340 8081 	ble.w	80041e2 <_dtoa_r+0x8ca>
 80040e0:	461a      	mov	r2, r3
 80040e2:	4601      	mov	r1, r0
 80040e4:	4620      	mov	r0, r4
 80040e6:	f000 fe79 	bl	8004ddc <__pow5mult>
 80040ea:	9b07      	ldr	r3, [sp, #28]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	4606      	mov	r6, r0
 80040f0:	dd7a      	ble.n	80041e8 <_dtoa_r+0x8d0>
 80040f2:	f04f 0800 	mov.w	r8, #0
 80040f6:	6933      	ldr	r3, [r6, #16]
 80040f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80040fc:	6918      	ldr	r0, [r3, #16]
 80040fe:	f000 fd5f 	bl	8004bc0 <__hi0bits>
 8004102:	f1c0 0020 	rsb	r0, r0, #32
 8004106:	9b06      	ldr	r3, [sp, #24]
 8004108:	4418      	add	r0, r3
 800410a:	f010 001f 	ands.w	r0, r0, #31
 800410e:	f000 8094 	beq.w	800423a <_dtoa_r+0x922>
 8004112:	f1c0 0320 	rsb	r3, r0, #32
 8004116:	2b04      	cmp	r3, #4
 8004118:	f340 8085 	ble.w	8004226 <_dtoa_r+0x90e>
 800411c:	9b05      	ldr	r3, [sp, #20]
 800411e:	f1c0 001c 	rsb	r0, r0, #28
 8004122:	4403      	add	r3, r0
 8004124:	9305      	str	r3, [sp, #20]
 8004126:	9b06      	ldr	r3, [sp, #24]
 8004128:	4403      	add	r3, r0
 800412a:	4405      	add	r5, r0
 800412c:	9306      	str	r3, [sp, #24]
 800412e:	9b05      	ldr	r3, [sp, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	dd05      	ble.n	8004140 <_dtoa_r+0x828>
 8004134:	4651      	mov	r1, sl
 8004136:	461a      	mov	r2, r3
 8004138:	4620      	mov	r0, r4
 800413a:	f000 fea9 	bl	8004e90 <__lshift>
 800413e:	4682      	mov	sl, r0
 8004140:	9b06      	ldr	r3, [sp, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	dd05      	ble.n	8004152 <_dtoa_r+0x83a>
 8004146:	4631      	mov	r1, r6
 8004148:	461a      	mov	r2, r3
 800414a:	4620      	mov	r0, r4
 800414c:	f000 fea0 	bl	8004e90 <__lshift>
 8004150:	4606      	mov	r6, r0
 8004152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004154:	2b00      	cmp	r3, #0
 8004156:	d072      	beq.n	800423e <_dtoa_r+0x926>
 8004158:	4631      	mov	r1, r6
 800415a:	4650      	mov	r0, sl
 800415c:	f000 ff04 	bl	8004f68 <__mcmp>
 8004160:	2800      	cmp	r0, #0
 8004162:	da6c      	bge.n	800423e <_dtoa_r+0x926>
 8004164:	2300      	movs	r3, #0
 8004166:	4651      	mov	r1, sl
 8004168:	220a      	movs	r2, #10
 800416a:	4620      	mov	r0, r4
 800416c:	f000 fce2 	bl	8004b34 <__multadd>
 8004170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004172:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004176:	4682      	mov	sl, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 81b0 	beq.w	80044de <_dtoa_r+0xbc6>
 800417e:	2300      	movs	r3, #0
 8004180:	4639      	mov	r1, r7
 8004182:	220a      	movs	r2, #10
 8004184:	4620      	mov	r0, r4
 8004186:	f000 fcd5 	bl	8004b34 <__multadd>
 800418a:	9b01      	ldr	r3, [sp, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	4607      	mov	r7, r0
 8004190:	f300 8096 	bgt.w	80042c0 <_dtoa_r+0x9a8>
 8004194:	9b07      	ldr	r3, [sp, #28]
 8004196:	2b02      	cmp	r3, #2
 8004198:	dc59      	bgt.n	800424e <_dtoa_r+0x936>
 800419a:	e091      	b.n	80042c0 <_dtoa_r+0x9a8>
 800419c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800419e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80041a2:	e758      	b.n	8004056 <_dtoa_r+0x73e>
 80041a4:	9b04      	ldr	r3, [sp, #16]
 80041a6:	1e5e      	subs	r6, r3, #1
 80041a8:	9b08      	ldr	r3, [sp, #32]
 80041aa:	42b3      	cmp	r3, r6
 80041ac:	bfbf      	itttt	lt
 80041ae:	9b08      	ldrlt	r3, [sp, #32]
 80041b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80041b2:	9608      	strlt	r6, [sp, #32]
 80041b4:	1af3      	sublt	r3, r6, r3
 80041b6:	bfb4      	ite	lt
 80041b8:	18d2      	addlt	r2, r2, r3
 80041ba:	1b9e      	subge	r6, r3, r6
 80041bc:	9b04      	ldr	r3, [sp, #16]
 80041be:	bfbc      	itt	lt
 80041c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80041c2:	2600      	movlt	r6, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bfb7      	itett	lt
 80041c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80041cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80041d0:	1a9d      	sublt	r5, r3, r2
 80041d2:	2300      	movlt	r3, #0
 80041d4:	e741      	b.n	800405a <_dtoa_r+0x742>
 80041d6:	9e08      	ldr	r6, [sp, #32]
 80041d8:	9d05      	ldr	r5, [sp, #20]
 80041da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80041dc:	e748      	b.n	8004070 <_dtoa_r+0x758>
 80041de:	9a08      	ldr	r2, [sp, #32]
 80041e0:	e770      	b.n	80040c4 <_dtoa_r+0x7ac>
 80041e2:	9b07      	ldr	r3, [sp, #28]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	dc19      	bgt.n	800421c <_dtoa_r+0x904>
 80041e8:	9b02      	ldr	r3, [sp, #8]
 80041ea:	b9bb      	cbnz	r3, 800421c <_dtoa_r+0x904>
 80041ec:	9b03      	ldr	r3, [sp, #12]
 80041ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041f2:	b99b      	cbnz	r3, 800421c <_dtoa_r+0x904>
 80041f4:	9b03      	ldr	r3, [sp, #12]
 80041f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041fa:	0d1b      	lsrs	r3, r3, #20
 80041fc:	051b      	lsls	r3, r3, #20
 80041fe:	b183      	cbz	r3, 8004222 <_dtoa_r+0x90a>
 8004200:	9b05      	ldr	r3, [sp, #20]
 8004202:	3301      	adds	r3, #1
 8004204:	9305      	str	r3, [sp, #20]
 8004206:	9b06      	ldr	r3, [sp, #24]
 8004208:	3301      	adds	r3, #1
 800420a:	9306      	str	r3, [sp, #24]
 800420c:	f04f 0801 	mov.w	r8, #1
 8004210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004212:	2b00      	cmp	r3, #0
 8004214:	f47f af6f 	bne.w	80040f6 <_dtoa_r+0x7de>
 8004218:	2001      	movs	r0, #1
 800421a:	e774      	b.n	8004106 <_dtoa_r+0x7ee>
 800421c:	f04f 0800 	mov.w	r8, #0
 8004220:	e7f6      	b.n	8004210 <_dtoa_r+0x8f8>
 8004222:	4698      	mov	r8, r3
 8004224:	e7f4      	b.n	8004210 <_dtoa_r+0x8f8>
 8004226:	d082      	beq.n	800412e <_dtoa_r+0x816>
 8004228:	9a05      	ldr	r2, [sp, #20]
 800422a:	331c      	adds	r3, #28
 800422c:	441a      	add	r2, r3
 800422e:	9205      	str	r2, [sp, #20]
 8004230:	9a06      	ldr	r2, [sp, #24]
 8004232:	441a      	add	r2, r3
 8004234:	441d      	add	r5, r3
 8004236:	9206      	str	r2, [sp, #24]
 8004238:	e779      	b.n	800412e <_dtoa_r+0x816>
 800423a:	4603      	mov	r3, r0
 800423c:	e7f4      	b.n	8004228 <_dtoa_r+0x910>
 800423e:	9b04      	ldr	r3, [sp, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	dc37      	bgt.n	80042b4 <_dtoa_r+0x99c>
 8004244:	9b07      	ldr	r3, [sp, #28]
 8004246:	2b02      	cmp	r3, #2
 8004248:	dd34      	ble.n	80042b4 <_dtoa_r+0x99c>
 800424a:	9b04      	ldr	r3, [sp, #16]
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	9b01      	ldr	r3, [sp, #4]
 8004250:	b963      	cbnz	r3, 800426c <_dtoa_r+0x954>
 8004252:	4631      	mov	r1, r6
 8004254:	2205      	movs	r2, #5
 8004256:	4620      	mov	r0, r4
 8004258:	f000 fc6c 	bl	8004b34 <__multadd>
 800425c:	4601      	mov	r1, r0
 800425e:	4606      	mov	r6, r0
 8004260:	4650      	mov	r0, sl
 8004262:	f000 fe81 	bl	8004f68 <__mcmp>
 8004266:	2800      	cmp	r0, #0
 8004268:	f73f adbb 	bgt.w	8003de2 <_dtoa_r+0x4ca>
 800426c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800426e:	9d00      	ldr	r5, [sp, #0]
 8004270:	ea6f 0b03 	mvn.w	fp, r3
 8004274:	f04f 0800 	mov.w	r8, #0
 8004278:	4631      	mov	r1, r6
 800427a:	4620      	mov	r0, r4
 800427c:	f000 fc38 	bl	8004af0 <_Bfree>
 8004280:	2f00      	cmp	r7, #0
 8004282:	f43f aeab 	beq.w	8003fdc <_dtoa_r+0x6c4>
 8004286:	f1b8 0f00 	cmp.w	r8, #0
 800428a:	d005      	beq.n	8004298 <_dtoa_r+0x980>
 800428c:	45b8      	cmp	r8, r7
 800428e:	d003      	beq.n	8004298 <_dtoa_r+0x980>
 8004290:	4641      	mov	r1, r8
 8004292:	4620      	mov	r0, r4
 8004294:	f000 fc2c 	bl	8004af0 <_Bfree>
 8004298:	4639      	mov	r1, r7
 800429a:	4620      	mov	r0, r4
 800429c:	f000 fc28 	bl	8004af0 <_Bfree>
 80042a0:	e69c      	b.n	8003fdc <_dtoa_r+0x6c4>
 80042a2:	2600      	movs	r6, #0
 80042a4:	4637      	mov	r7, r6
 80042a6:	e7e1      	b.n	800426c <_dtoa_r+0x954>
 80042a8:	46bb      	mov	fp, r7
 80042aa:	4637      	mov	r7, r6
 80042ac:	e599      	b.n	8003de2 <_dtoa_r+0x4ca>
 80042ae:	bf00      	nop
 80042b0:	40240000 	.word	0x40240000
 80042b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80c8 	beq.w	800444c <_dtoa_r+0xb34>
 80042bc:	9b04      	ldr	r3, [sp, #16]
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	2d00      	cmp	r5, #0
 80042c2:	dd05      	ble.n	80042d0 <_dtoa_r+0x9b8>
 80042c4:	4639      	mov	r1, r7
 80042c6:	462a      	mov	r2, r5
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 fde1 	bl	8004e90 <__lshift>
 80042ce:	4607      	mov	r7, r0
 80042d0:	f1b8 0f00 	cmp.w	r8, #0
 80042d4:	d05b      	beq.n	800438e <_dtoa_r+0xa76>
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4620      	mov	r0, r4
 80042da:	f000 fbc9 	bl	8004a70 <_Balloc>
 80042de:	4605      	mov	r5, r0
 80042e0:	b928      	cbnz	r0, 80042ee <_dtoa_r+0x9d6>
 80042e2:	4b83      	ldr	r3, [pc, #524]	; (80044f0 <_dtoa_r+0xbd8>)
 80042e4:	4602      	mov	r2, r0
 80042e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80042ea:	f7ff bb2e 	b.w	800394a <_dtoa_r+0x32>
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	3202      	adds	r2, #2
 80042f2:	0092      	lsls	r2, r2, #2
 80042f4:	f107 010c 	add.w	r1, r7, #12
 80042f8:	300c      	adds	r0, #12
 80042fa:	f7ff fa76 	bl	80037ea <memcpy>
 80042fe:	2201      	movs	r2, #1
 8004300:	4629      	mov	r1, r5
 8004302:	4620      	mov	r0, r4
 8004304:	f000 fdc4 	bl	8004e90 <__lshift>
 8004308:	9b00      	ldr	r3, [sp, #0]
 800430a:	3301      	adds	r3, #1
 800430c:	9304      	str	r3, [sp, #16]
 800430e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004312:	4413      	add	r3, r2
 8004314:	9308      	str	r3, [sp, #32]
 8004316:	9b02      	ldr	r3, [sp, #8]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	46b8      	mov	r8, r7
 800431e:	9306      	str	r3, [sp, #24]
 8004320:	4607      	mov	r7, r0
 8004322:	9b04      	ldr	r3, [sp, #16]
 8004324:	4631      	mov	r1, r6
 8004326:	3b01      	subs	r3, #1
 8004328:	4650      	mov	r0, sl
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	f7ff fa6b 	bl	8003806 <quorem>
 8004330:	4641      	mov	r1, r8
 8004332:	9002      	str	r0, [sp, #8]
 8004334:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004338:	4650      	mov	r0, sl
 800433a:	f000 fe15 	bl	8004f68 <__mcmp>
 800433e:	463a      	mov	r2, r7
 8004340:	9005      	str	r0, [sp, #20]
 8004342:	4631      	mov	r1, r6
 8004344:	4620      	mov	r0, r4
 8004346:	f000 fe2b 	bl	8004fa0 <__mdiff>
 800434a:	68c2      	ldr	r2, [r0, #12]
 800434c:	4605      	mov	r5, r0
 800434e:	bb02      	cbnz	r2, 8004392 <_dtoa_r+0xa7a>
 8004350:	4601      	mov	r1, r0
 8004352:	4650      	mov	r0, sl
 8004354:	f000 fe08 	bl	8004f68 <__mcmp>
 8004358:	4602      	mov	r2, r0
 800435a:	4629      	mov	r1, r5
 800435c:	4620      	mov	r0, r4
 800435e:	9209      	str	r2, [sp, #36]	; 0x24
 8004360:	f000 fbc6 	bl	8004af0 <_Bfree>
 8004364:	9b07      	ldr	r3, [sp, #28]
 8004366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004368:	9d04      	ldr	r5, [sp, #16]
 800436a:	ea43 0102 	orr.w	r1, r3, r2
 800436e:	9b06      	ldr	r3, [sp, #24]
 8004370:	4319      	orrs	r1, r3
 8004372:	d110      	bne.n	8004396 <_dtoa_r+0xa7e>
 8004374:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004378:	d029      	beq.n	80043ce <_dtoa_r+0xab6>
 800437a:	9b05      	ldr	r3, [sp, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	dd02      	ble.n	8004386 <_dtoa_r+0xa6e>
 8004380:	9b02      	ldr	r3, [sp, #8]
 8004382:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004386:	9b01      	ldr	r3, [sp, #4]
 8004388:	f883 9000 	strb.w	r9, [r3]
 800438c:	e774      	b.n	8004278 <_dtoa_r+0x960>
 800438e:	4638      	mov	r0, r7
 8004390:	e7ba      	b.n	8004308 <_dtoa_r+0x9f0>
 8004392:	2201      	movs	r2, #1
 8004394:	e7e1      	b.n	800435a <_dtoa_r+0xa42>
 8004396:	9b05      	ldr	r3, [sp, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	db04      	blt.n	80043a6 <_dtoa_r+0xa8e>
 800439c:	9907      	ldr	r1, [sp, #28]
 800439e:	430b      	orrs	r3, r1
 80043a0:	9906      	ldr	r1, [sp, #24]
 80043a2:	430b      	orrs	r3, r1
 80043a4:	d120      	bne.n	80043e8 <_dtoa_r+0xad0>
 80043a6:	2a00      	cmp	r2, #0
 80043a8:	dded      	ble.n	8004386 <_dtoa_r+0xa6e>
 80043aa:	4651      	mov	r1, sl
 80043ac:	2201      	movs	r2, #1
 80043ae:	4620      	mov	r0, r4
 80043b0:	f000 fd6e 	bl	8004e90 <__lshift>
 80043b4:	4631      	mov	r1, r6
 80043b6:	4682      	mov	sl, r0
 80043b8:	f000 fdd6 	bl	8004f68 <__mcmp>
 80043bc:	2800      	cmp	r0, #0
 80043be:	dc03      	bgt.n	80043c8 <_dtoa_r+0xab0>
 80043c0:	d1e1      	bne.n	8004386 <_dtoa_r+0xa6e>
 80043c2:	f019 0f01 	tst.w	r9, #1
 80043c6:	d0de      	beq.n	8004386 <_dtoa_r+0xa6e>
 80043c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80043cc:	d1d8      	bne.n	8004380 <_dtoa_r+0xa68>
 80043ce:	9a01      	ldr	r2, [sp, #4]
 80043d0:	2339      	movs	r3, #57	; 0x39
 80043d2:	7013      	strb	r3, [r2, #0]
 80043d4:	462b      	mov	r3, r5
 80043d6:	461d      	mov	r5, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80043de:	2a39      	cmp	r2, #57	; 0x39
 80043e0:	d06c      	beq.n	80044bc <_dtoa_r+0xba4>
 80043e2:	3201      	adds	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e747      	b.n	8004278 <_dtoa_r+0x960>
 80043e8:	2a00      	cmp	r2, #0
 80043ea:	dd07      	ble.n	80043fc <_dtoa_r+0xae4>
 80043ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80043f0:	d0ed      	beq.n	80043ce <_dtoa_r+0xab6>
 80043f2:	9a01      	ldr	r2, [sp, #4]
 80043f4:	f109 0301 	add.w	r3, r9, #1
 80043f8:	7013      	strb	r3, [r2, #0]
 80043fa:	e73d      	b.n	8004278 <_dtoa_r+0x960>
 80043fc:	9b04      	ldr	r3, [sp, #16]
 80043fe:	9a08      	ldr	r2, [sp, #32]
 8004400:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004404:	4293      	cmp	r3, r2
 8004406:	d043      	beq.n	8004490 <_dtoa_r+0xb78>
 8004408:	4651      	mov	r1, sl
 800440a:	2300      	movs	r3, #0
 800440c:	220a      	movs	r2, #10
 800440e:	4620      	mov	r0, r4
 8004410:	f000 fb90 	bl	8004b34 <__multadd>
 8004414:	45b8      	cmp	r8, r7
 8004416:	4682      	mov	sl, r0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	f04f 020a 	mov.w	r2, #10
 8004420:	4641      	mov	r1, r8
 8004422:	4620      	mov	r0, r4
 8004424:	d107      	bne.n	8004436 <_dtoa_r+0xb1e>
 8004426:	f000 fb85 	bl	8004b34 <__multadd>
 800442a:	4680      	mov	r8, r0
 800442c:	4607      	mov	r7, r0
 800442e:	9b04      	ldr	r3, [sp, #16]
 8004430:	3301      	adds	r3, #1
 8004432:	9304      	str	r3, [sp, #16]
 8004434:	e775      	b.n	8004322 <_dtoa_r+0xa0a>
 8004436:	f000 fb7d 	bl	8004b34 <__multadd>
 800443a:	4639      	mov	r1, r7
 800443c:	4680      	mov	r8, r0
 800443e:	2300      	movs	r3, #0
 8004440:	220a      	movs	r2, #10
 8004442:	4620      	mov	r0, r4
 8004444:	f000 fb76 	bl	8004b34 <__multadd>
 8004448:	4607      	mov	r7, r0
 800444a:	e7f0      	b.n	800442e <_dtoa_r+0xb16>
 800444c:	9b04      	ldr	r3, [sp, #16]
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	9d00      	ldr	r5, [sp, #0]
 8004452:	4631      	mov	r1, r6
 8004454:	4650      	mov	r0, sl
 8004456:	f7ff f9d6 	bl	8003806 <quorem>
 800445a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800445e:	9b00      	ldr	r3, [sp, #0]
 8004460:	f805 9b01 	strb.w	r9, [r5], #1
 8004464:	1aea      	subs	r2, r5, r3
 8004466:	9b01      	ldr	r3, [sp, #4]
 8004468:	4293      	cmp	r3, r2
 800446a:	dd07      	ble.n	800447c <_dtoa_r+0xb64>
 800446c:	4651      	mov	r1, sl
 800446e:	2300      	movs	r3, #0
 8004470:	220a      	movs	r2, #10
 8004472:	4620      	mov	r0, r4
 8004474:	f000 fb5e 	bl	8004b34 <__multadd>
 8004478:	4682      	mov	sl, r0
 800447a:	e7ea      	b.n	8004452 <_dtoa_r+0xb3a>
 800447c:	9b01      	ldr	r3, [sp, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	bfc8      	it	gt
 8004482:	461d      	movgt	r5, r3
 8004484:	9b00      	ldr	r3, [sp, #0]
 8004486:	bfd8      	it	le
 8004488:	2501      	movle	r5, #1
 800448a:	441d      	add	r5, r3
 800448c:	f04f 0800 	mov.w	r8, #0
 8004490:	4651      	mov	r1, sl
 8004492:	2201      	movs	r2, #1
 8004494:	4620      	mov	r0, r4
 8004496:	f000 fcfb 	bl	8004e90 <__lshift>
 800449a:	4631      	mov	r1, r6
 800449c:	4682      	mov	sl, r0
 800449e:	f000 fd63 	bl	8004f68 <__mcmp>
 80044a2:	2800      	cmp	r0, #0
 80044a4:	dc96      	bgt.n	80043d4 <_dtoa_r+0xabc>
 80044a6:	d102      	bne.n	80044ae <_dtoa_r+0xb96>
 80044a8:	f019 0f01 	tst.w	r9, #1
 80044ac:	d192      	bne.n	80043d4 <_dtoa_r+0xabc>
 80044ae:	462b      	mov	r3, r5
 80044b0:	461d      	mov	r5, r3
 80044b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80044b6:	2a30      	cmp	r2, #48	; 0x30
 80044b8:	d0fa      	beq.n	80044b0 <_dtoa_r+0xb98>
 80044ba:	e6dd      	b.n	8004278 <_dtoa_r+0x960>
 80044bc:	9a00      	ldr	r2, [sp, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d189      	bne.n	80043d6 <_dtoa_r+0xabe>
 80044c2:	f10b 0b01 	add.w	fp, fp, #1
 80044c6:	2331      	movs	r3, #49	; 0x31
 80044c8:	e796      	b.n	80043f8 <_dtoa_r+0xae0>
 80044ca:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <_dtoa_r+0xbdc>)
 80044cc:	f7ff ba99 	b.w	8003a02 <_dtoa_r+0xea>
 80044d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f47f aa6d 	bne.w	80039b2 <_dtoa_r+0x9a>
 80044d8:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <_dtoa_r+0xbe0>)
 80044da:	f7ff ba92 	b.w	8003a02 <_dtoa_r+0xea>
 80044de:	9b01      	ldr	r3, [sp, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	dcb5      	bgt.n	8004450 <_dtoa_r+0xb38>
 80044e4:	9b07      	ldr	r3, [sp, #28]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	f73f aeb1 	bgt.w	800424e <_dtoa_r+0x936>
 80044ec:	e7b0      	b.n	8004450 <_dtoa_r+0xb38>
 80044ee:	bf00      	nop
 80044f0:	08005ca1 	.word	0x08005ca1
 80044f4:	08005c01 	.word	0x08005c01
 80044f8:	08005c25 	.word	0x08005c25

080044fc <__ssputs_r>:
 80044fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004500:	688e      	ldr	r6, [r1, #8]
 8004502:	461f      	mov	r7, r3
 8004504:	42be      	cmp	r6, r7
 8004506:	680b      	ldr	r3, [r1, #0]
 8004508:	4682      	mov	sl, r0
 800450a:	460c      	mov	r4, r1
 800450c:	4690      	mov	r8, r2
 800450e:	d82c      	bhi.n	800456a <__ssputs_r+0x6e>
 8004510:	898a      	ldrh	r2, [r1, #12]
 8004512:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004516:	d026      	beq.n	8004566 <__ssputs_r+0x6a>
 8004518:	6965      	ldr	r5, [r4, #20]
 800451a:	6909      	ldr	r1, [r1, #16]
 800451c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004520:	eba3 0901 	sub.w	r9, r3, r1
 8004524:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004528:	1c7b      	adds	r3, r7, #1
 800452a:	444b      	add	r3, r9
 800452c:	106d      	asrs	r5, r5, #1
 800452e:	429d      	cmp	r5, r3
 8004530:	bf38      	it	cc
 8004532:	461d      	movcc	r5, r3
 8004534:	0553      	lsls	r3, r2, #21
 8004536:	d527      	bpl.n	8004588 <__ssputs_r+0x8c>
 8004538:	4629      	mov	r1, r5
 800453a:	f000 f95f 	bl	80047fc <_malloc_r>
 800453e:	4606      	mov	r6, r0
 8004540:	b360      	cbz	r0, 800459c <__ssputs_r+0xa0>
 8004542:	6921      	ldr	r1, [r4, #16]
 8004544:	464a      	mov	r2, r9
 8004546:	f7ff f950 	bl	80037ea <memcpy>
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004554:	81a3      	strh	r3, [r4, #12]
 8004556:	6126      	str	r6, [r4, #16]
 8004558:	6165      	str	r5, [r4, #20]
 800455a:	444e      	add	r6, r9
 800455c:	eba5 0509 	sub.w	r5, r5, r9
 8004560:	6026      	str	r6, [r4, #0]
 8004562:	60a5      	str	r5, [r4, #8]
 8004564:	463e      	mov	r6, r7
 8004566:	42be      	cmp	r6, r7
 8004568:	d900      	bls.n	800456c <__ssputs_r+0x70>
 800456a:	463e      	mov	r6, r7
 800456c:	6820      	ldr	r0, [r4, #0]
 800456e:	4632      	mov	r2, r6
 8004570:	4641      	mov	r1, r8
 8004572:	f000 ff97 	bl	80054a4 <memmove>
 8004576:	68a3      	ldr	r3, [r4, #8]
 8004578:	1b9b      	subs	r3, r3, r6
 800457a:	60a3      	str	r3, [r4, #8]
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	4433      	add	r3, r6
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	2000      	movs	r0, #0
 8004584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004588:	462a      	mov	r2, r5
 800458a:	f000 fe30 	bl	80051ee <_realloc_r>
 800458e:	4606      	mov	r6, r0
 8004590:	2800      	cmp	r0, #0
 8004592:	d1e0      	bne.n	8004556 <__ssputs_r+0x5a>
 8004594:	6921      	ldr	r1, [r4, #16]
 8004596:	4650      	mov	r0, sl
 8004598:	f001 f84a 	bl	8005630 <_free_r>
 800459c:	230c      	movs	r3, #12
 800459e:	f8ca 3000 	str.w	r3, [sl]
 80045a2:	89a3      	ldrh	r3, [r4, #12]
 80045a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a8:	81a3      	strh	r3, [r4, #12]
 80045aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045ae:	e7e9      	b.n	8004584 <__ssputs_r+0x88>

080045b0 <_svfiprintf_r>:
 80045b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b4:	4698      	mov	r8, r3
 80045b6:	898b      	ldrh	r3, [r1, #12]
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	b09d      	sub	sp, #116	; 0x74
 80045bc:	4607      	mov	r7, r0
 80045be:	460d      	mov	r5, r1
 80045c0:	4614      	mov	r4, r2
 80045c2:	d50e      	bpl.n	80045e2 <_svfiprintf_r+0x32>
 80045c4:	690b      	ldr	r3, [r1, #16]
 80045c6:	b963      	cbnz	r3, 80045e2 <_svfiprintf_r+0x32>
 80045c8:	2140      	movs	r1, #64	; 0x40
 80045ca:	f000 f917 	bl	80047fc <_malloc_r>
 80045ce:	6028      	str	r0, [r5, #0]
 80045d0:	6128      	str	r0, [r5, #16]
 80045d2:	b920      	cbnz	r0, 80045de <_svfiprintf_r+0x2e>
 80045d4:	230c      	movs	r3, #12
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045dc:	e0d0      	b.n	8004780 <_svfiprintf_r+0x1d0>
 80045de:	2340      	movs	r3, #64	; 0x40
 80045e0:	616b      	str	r3, [r5, #20]
 80045e2:	2300      	movs	r3, #0
 80045e4:	9309      	str	r3, [sp, #36]	; 0x24
 80045e6:	2320      	movs	r3, #32
 80045e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80045f0:	2330      	movs	r3, #48	; 0x30
 80045f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004798 <_svfiprintf_r+0x1e8>
 80045f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045fa:	f04f 0901 	mov.w	r9, #1
 80045fe:	4623      	mov	r3, r4
 8004600:	469a      	mov	sl, r3
 8004602:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004606:	b10a      	cbz	r2, 800460c <_svfiprintf_r+0x5c>
 8004608:	2a25      	cmp	r2, #37	; 0x25
 800460a:	d1f9      	bne.n	8004600 <_svfiprintf_r+0x50>
 800460c:	ebba 0b04 	subs.w	fp, sl, r4
 8004610:	d00b      	beq.n	800462a <_svfiprintf_r+0x7a>
 8004612:	465b      	mov	r3, fp
 8004614:	4622      	mov	r2, r4
 8004616:	4629      	mov	r1, r5
 8004618:	4638      	mov	r0, r7
 800461a:	f7ff ff6f 	bl	80044fc <__ssputs_r>
 800461e:	3001      	adds	r0, #1
 8004620:	f000 80a9 	beq.w	8004776 <_svfiprintf_r+0x1c6>
 8004624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004626:	445a      	add	r2, fp
 8004628:	9209      	str	r2, [sp, #36]	; 0x24
 800462a:	f89a 3000 	ldrb.w	r3, [sl]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80a1 	beq.w	8004776 <_svfiprintf_r+0x1c6>
 8004634:	2300      	movs	r3, #0
 8004636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800463a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800463e:	f10a 0a01 	add.w	sl, sl, #1
 8004642:	9304      	str	r3, [sp, #16]
 8004644:	9307      	str	r3, [sp, #28]
 8004646:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800464a:	931a      	str	r3, [sp, #104]	; 0x68
 800464c:	4654      	mov	r4, sl
 800464e:	2205      	movs	r2, #5
 8004650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004654:	4850      	ldr	r0, [pc, #320]	; (8004798 <_svfiprintf_r+0x1e8>)
 8004656:	f7fb fdbb 	bl	80001d0 <memchr>
 800465a:	9a04      	ldr	r2, [sp, #16]
 800465c:	b9d8      	cbnz	r0, 8004696 <_svfiprintf_r+0xe6>
 800465e:	06d0      	lsls	r0, r2, #27
 8004660:	bf44      	itt	mi
 8004662:	2320      	movmi	r3, #32
 8004664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004668:	0711      	lsls	r1, r2, #28
 800466a:	bf44      	itt	mi
 800466c:	232b      	movmi	r3, #43	; 0x2b
 800466e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004672:	f89a 3000 	ldrb.w	r3, [sl]
 8004676:	2b2a      	cmp	r3, #42	; 0x2a
 8004678:	d015      	beq.n	80046a6 <_svfiprintf_r+0xf6>
 800467a:	9a07      	ldr	r2, [sp, #28]
 800467c:	4654      	mov	r4, sl
 800467e:	2000      	movs	r0, #0
 8004680:	f04f 0c0a 	mov.w	ip, #10
 8004684:	4621      	mov	r1, r4
 8004686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800468a:	3b30      	subs	r3, #48	; 0x30
 800468c:	2b09      	cmp	r3, #9
 800468e:	d94d      	bls.n	800472c <_svfiprintf_r+0x17c>
 8004690:	b1b0      	cbz	r0, 80046c0 <_svfiprintf_r+0x110>
 8004692:	9207      	str	r2, [sp, #28]
 8004694:	e014      	b.n	80046c0 <_svfiprintf_r+0x110>
 8004696:	eba0 0308 	sub.w	r3, r0, r8
 800469a:	fa09 f303 	lsl.w	r3, r9, r3
 800469e:	4313      	orrs	r3, r2
 80046a0:	9304      	str	r3, [sp, #16]
 80046a2:	46a2      	mov	sl, r4
 80046a4:	e7d2      	b.n	800464c <_svfiprintf_r+0x9c>
 80046a6:	9b03      	ldr	r3, [sp, #12]
 80046a8:	1d19      	adds	r1, r3, #4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	9103      	str	r1, [sp, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bfbb      	ittet	lt
 80046b2:	425b      	neglt	r3, r3
 80046b4:	f042 0202 	orrlt.w	r2, r2, #2
 80046b8:	9307      	strge	r3, [sp, #28]
 80046ba:	9307      	strlt	r3, [sp, #28]
 80046bc:	bfb8      	it	lt
 80046be:	9204      	strlt	r2, [sp, #16]
 80046c0:	7823      	ldrb	r3, [r4, #0]
 80046c2:	2b2e      	cmp	r3, #46	; 0x2e
 80046c4:	d10c      	bne.n	80046e0 <_svfiprintf_r+0x130>
 80046c6:	7863      	ldrb	r3, [r4, #1]
 80046c8:	2b2a      	cmp	r3, #42	; 0x2a
 80046ca:	d134      	bne.n	8004736 <_svfiprintf_r+0x186>
 80046cc:	9b03      	ldr	r3, [sp, #12]
 80046ce:	1d1a      	adds	r2, r3, #4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	9203      	str	r2, [sp, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bfb8      	it	lt
 80046d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80046dc:	3402      	adds	r4, #2
 80046de:	9305      	str	r3, [sp, #20]
 80046e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80047a8 <_svfiprintf_r+0x1f8>
 80046e4:	7821      	ldrb	r1, [r4, #0]
 80046e6:	2203      	movs	r2, #3
 80046e8:	4650      	mov	r0, sl
 80046ea:	f7fb fd71 	bl	80001d0 <memchr>
 80046ee:	b138      	cbz	r0, 8004700 <_svfiprintf_r+0x150>
 80046f0:	9b04      	ldr	r3, [sp, #16]
 80046f2:	eba0 000a 	sub.w	r0, r0, sl
 80046f6:	2240      	movs	r2, #64	; 0x40
 80046f8:	4082      	lsls	r2, r0
 80046fa:	4313      	orrs	r3, r2
 80046fc:	3401      	adds	r4, #1
 80046fe:	9304      	str	r3, [sp, #16]
 8004700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004704:	4825      	ldr	r0, [pc, #148]	; (800479c <_svfiprintf_r+0x1ec>)
 8004706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800470a:	2206      	movs	r2, #6
 800470c:	f7fb fd60 	bl	80001d0 <memchr>
 8004710:	2800      	cmp	r0, #0
 8004712:	d038      	beq.n	8004786 <_svfiprintf_r+0x1d6>
 8004714:	4b22      	ldr	r3, [pc, #136]	; (80047a0 <_svfiprintf_r+0x1f0>)
 8004716:	bb1b      	cbnz	r3, 8004760 <_svfiprintf_r+0x1b0>
 8004718:	9b03      	ldr	r3, [sp, #12]
 800471a:	3307      	adds	r3, #7
 800471c:	f023 0307 	bic.w	r3, r3, #7
 8004720:	3308      	adds	r3, #8
 8004722:	9303      	str	r3, [sp, #12]
 8004724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004726:	4433      	add	r3, r6
 8004728:	9309      	str	r3, [sp, #36]	; 0x24
 800472a:	e768      	b.n	80045fe <_svfiprintf_r+0x4e>
 800472c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004730:	460c      	mov	r4, r1
 8004732:	2001      	movs	r0, #1
 8004734:	e7a6      	b.n	8004684 <_svfiprintf_r+0xd4>
 8004736:	2300      	movs	r3, #0
 8004738:	3401      	adds	r4, #1
 800473a:	9305      	str	r3, [sp, #20]
 800473c:	4619      	mov	r1, r3
 800473e:	f04f 0c0a 	mov.w	ip, #10
 8004742:	4620      	mov	r0, r4
 8004744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004748:	3a30      	subs	r2, #48	; 0x30
 800474a:	2a09      	cmp	r2, #9
 800474c:	d903      	bls.n	8004756 <_svfiprintf_r+0x1a6>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0c6      	beq.n	80046e0 <_svfiprintf_r+0x130>
 8004752:	9105      	str	r1, [sp, #20]
 8004754:	e7c4      	b.n	80046e0 <_svfiprintf_r+0x130>
 8004756:	fb0c 2101 	mla	r1, ip, r1, r2
 800475a:	4604      	mov	r4, r0
 800475c:	2301      	movs	r3, #1
 800475e:	e7f0      	b.n	8004742 <_svfiprintf_r+0x192>
 8004760:	ab03      	add	r3, sp, #12
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	462a      	mov	r2, r5
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <_svfiprintf_r+0x1f4>)
 8004768:	a904      	add	r1, sp, #16
 800476a:	4638      	mov	r0, r7
 800476c:	f7fe fb40 	bl	8002df0 <_printf_float>
 8004770:	1c42      	adds	r2, r0, #1
 8004772:	4606      	mov	r6, r0
 8004774:	d1d6      	bne.n	8004724 <_svfiprintf_r+0x174>
 8004776:	89ab      	ldrh	r3, [r5, #12]
 8004778:	065b      	lsls	r3, r3, #25
 800477a:	f53f af2d 	bmi.w	80045d8 <_svfiprintf_r+0x28>
 800477e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004780:	b01d      	add	sp, #116	; 0x74
 8004782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004786:	ab03      	add	r3, sp, #12
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	462a      	mov	r2, r5
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <_svfiprintf_r+0x1f4>)
 800478e:	a904      	add	r1, sp, #16
 8004790:	4638      	mov	r0, r7
 8004792:	f7fe fdd1 	bl	8003338 <_printf_i>
 8004796:	e7eb      	b.n	8004770 <_svfiprintf_r+0x1c0>
 8004798:	08005cb2 	.word	0x08005cb2
 800479c:	08005cbc 	.word	0x08005cbc
 80047a0:	08002df1 	.word	0x08002df1
 80047a4:	080044fd 	.word	0x080044fd
 80047a8:	08005cb8 	.word	0x08005cb8

080047ac <malloc>:
 80047ac:	4b02      	ldr	r3, [pc, #8]	; (80047b8 <malloc+0xc>)
 80047ae:	4601      	mov	r1, r0
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	f000 b823 	b.w	80047fc <_malloc_r>
 80047b6:	bf00      	nop
 80047b8:	20007d2c 	.word	0x20007d2c

080047bc <sbrk_aligned>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	4e0e      	ldr	r6, [pc, #56]	; (80047f8 <sbrk_aligned+0x3c>)
 80047c0:	460c      	mov	r4, r1
 80047c2:	6831      	ldr	r1, [r6, #0]
 80047c4:	4605      	mov	r5, r0
 80047c6:	b911      	cbnz	r1, 80047ce <sbrk_aligned+0x12>
 80047c8:	f000 fedc 	bl	8005584 <_sbrk_r>
 80047cc:	6030      	str	r0, [r6, #0]
 80047ce:	4621      	mov	r1, r4
 80047d0:	4628      	mov	r0, r5
 80047d2:	f000 fed7 	bl	8005584 <_sbrk_r>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	d00a      	beq.n	80047f0 <sbrk_aligned+0x34>
 80047da:	1cc4      	adds	r4, r0, #3
 80047dc:	f024 0403 	bic.w	r4, r4, #3
 80047e0:	42a0      	cmp	r0, r4
 80047e2:	d007      	beq.n	80047f4 <sbrk_aligned+0x38>
 80047e4:	1a21      	subs	r1, r4, r0
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 fecc 	bl	8005584 <_sbrk_r>
 80047ec:	3001      	adds	r0, #1
 80047ee:	d101      	bne.n	80047f4 <sbrk_aligned+0x38>
 80047f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80047f4:	4620      	mov	r0, r4
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
 80047f8:	2000ac0c 	.word	0x2000ac0c

080047fc <_malloc_r>:
 80047fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004800:	1ccd      	adds	r5, r1, #3
 8004802:	f025 0503 	bic.w	r5, r5, #3
 8004806:	3508      	adds	r5, #8
 8004808:	2d0c      	cmp	r5, #12
 800480a:	bf38      	it	cc
 800480c:	250c      	movcc	r5, #12
 800480e:	2d00      	cmp	r5, #0
 8004810:	4607      	mov	r7, r0
 8004812:	db01      	blt.n	8004818 <_malloc_r+0x1c>
 8004814:	42a9      	cmp	r1, r5
 8004816:	d905      	bls.n	8004824 <_malloc_r+0x28>
 8004818:	230c      	movs	r3, #12
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	2600      	movs	r6, #0
 800481e:	4630      	mov	r0, r6
 8004820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004824:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80048f8 <_malloc_r+0xfc>
 8004828:	f000 f916 	bl	8004a58 <__malloc_lock>
 800482c:	f8d8 3000 	ldr.w	r3, [r8]
 8004830:	461c      	mov	r4, r3
 8004832:	bb5c      	cbnz	r4, 800488c <_malloc_r+0x90>
 8004834:	4629      	mov	r1, r5
 8004836:	4638      	mov	r0, r7
 8004838:	f7ff ffc0 	bl	80047bc <sbrk_aligned>
 800483c:	1c43      	adds	r3, r0, #1
 800483e:	4604      	mov	r4, r0
 8004840:	d155      	bne.n	80048ee <_malloc_r+0xf2>
 8004842:	f8d8 4000 	ldr.w	r4, [r8]
 8004846:	4626      	mov	r6, r4
 8004848:	2e00      	cmp	r6, #0
 800484a:	d145      	bne.n	80048d8 <_malloc_r+0xdc>
 800484c:	2c00      	cmp	r4, #0
 800484e:	d048      	beq.n	80048e2 <_malloc_r+0xe6>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	4631      	mov	r1, r6
 8004854:	4638      	mov	r0, r7
 8004856:	eb04 0903 	add.w	r9, r4, r3
 800485a:	f000 fe93 	bl	8005584 <_sbrk_r>
 800485e:	4581      	cmp	r9, r0
 8004860:	d13f      	bne.n	80048e2 <_malloc_r+0xe6>
 8004862:	6821      	ldr	r1, [r4, #0]
 8004864:	1a6d      	subs	r5, r5, r1
 8004866:	4629      	mov	r1, r5
 8004868:	4638      	mov	r0, r7
 800486a:	f7ff ffa7 	bl	80047bc <sbrk_aligned>
 800486e:	3001      	adds	r0, #1
 8004870:	d037      	beq.n	80048e2 <_malloc_r+0xe6>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	442b      	add	r3, r5
 8004876:	6023      	str	r3, [r4, #0]
 8004878:	f8d8 3000 	ldr.w	r3, [r8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d038      	beq.n	80048f2 <_malloc_r+0xf6>
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	42a2      	cmp	r2, r4
 8004884:	d12b      	bne.n	80048de <_malloc_r+0xe2>
 8004886:	2200      	movs	r2, #0
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	e00f      	b.n	80048ac <_malloc_r+0xb0>
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	1b52      	subs	r2, r2, r5
 8004890:	d41f      	bmi.n	80048d2 <_malloc_r+0xd6>
 8004892:	2a0b      	cmp	r2, #11
 8004894:	d917      	bls.n	80048c6 <_malloc_r+0xca>
 8004896:	1961      	adds	r1, r4, r5
 8004898:	42a3      	cmp	r3, r4
 800489a:	6025      	str	r5, [r4, #0]
 800489c:	bf18      	it	ne
 800489e:	6059      	strne	r1, [r3, #4]
 80048a0:	6863      	ldr	r3, [r4, #4]
 80048a2:	bf08      	it	eq
 80048a4:	f8c8 1000 	streq.w	r1, [r8]
 80048a8:	5162      	str	r2, [r4, r5]
 80048aa:	604b      	str	r3, [r1, #4]
 80048ac:	4638      	mov	r0, r7
 80048ae:	f104 060b 	add.w	r6, r4, #11
 80048b2:	f000 f8d7 	bl	8004a64 <__malloc_unlock>
 80048b6:	f026 0607 	bic.w	r6, r6, #7
 80048ba:	1d23      	adds	r3, r4, #4
 80048bc:	1af2      	subs	r2, r6, r3
 80048be:	d0ae      	beq.n	800481e <_malloc_r+0x22>
 80048c0:	1b9b      	subs	r3, r3, r6
 80048c2:	50a3      	str	r3, [r4, r2]
 80048c4:	e7ab      	b.n	800481e <_malloc_r+0x22>
 80048c6:	42a3      	cmp	r3, r4
 80048c8:	6862      	ldr	r2, [r4, #4]
 80048ca:	d1dd      	bne.n	8004888 <_malloc_r+0x8c>
 80048cc:	f8c8 2000 	str.w	r2, [r8]
 80048d0:	e7ec      	b.n	80048ac <_malloc_r+0xb0>
 80048d2:	4623      	mov	r3, r4
 80048d4:	6864      	ldr	r4, [r4, #4]
 80048d6:	e7ac      	b.n	8004832 <_malloc_r+0x36>
 80048d8:	4634      	mov	r4, r6
 80048da:	6876      	ldr	r6, [r6, #4]
 80048dc:	e7b4      	b.n	8004848 <_malloc_r+0x4c>
 80048de:	4613      	mov	r3, r2
 80048e0:	e7cc      	b.n	800487c <_malloc_r+0x80>
 80048e2:	230c      	movs	r3, #12
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	4638      	mov	r0, r7
 80048e8:	f000 f8bc 	bl	8004a64 <__malloc_unlock>
 80048ec:	e797      	b.n	800481e <_malloc_r+0x22>
 80048ee:	6025      	str	r5, [r4, #0]
 80048f0:	e7dc      	b.n	80048ac <_malloc_r+0xb0>
 80048f2:	605b      	str	r3, [r3, #4]
 80048f4:	deff      	udf	#255	; 0xff
 80048f6:	bf00      	nop
 80048f8:	2000ac08 	.word	0x2000ac08

080048fc <__sflush_r>:
 80048fc:	898a      	ldrh	r2, [r1, #12]
 80048fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004902:	4605      	mov	r5, r0
 8004904:	0710      	lsls	r0, r2, #28
 8004906:	460c      	mov	r4, r1
 8004908:	d458      	bmi.n	80049bc <__sflush_r+0xc0>
 800490a:	684b      	ldr	r3, [r1, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	dc05      	bgt.n	800491c <__sflush_r+0x20>
 8004910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	dc02      	bgt.n	800491c <__sflush_r+0x20>
 8004916:	2000      	movs	r0, #0
 8004918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800491c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800491e:	2e00      	cmp	r6, #0
 8004920:	d0f9      	beq.n	8004916 <__sflush_r+0x1a>
 8004922:	2300      	movs	r3, #0
 8004924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004928:	682f      	ldr	r7, [r5, #0]
 800492a:	6a21      	ldr	r1, [r4, #32]
 800492c:	602b      	str	r3, [r5, #0]
 800492e:	d032      	beq.n	8004996 <__sflush_r+0x9a>
 8004930:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004932:	89a3      	ldrh	r3, [r4, #12]
 8004934:	075a      	lsls	r2, r3, #29
 8004936:	d505      	bpl.n	8004944 <__sflush_r+0x48>
 8004938:	6863      	ldr	r3, [r4, #4]
 800493a:	1ac0      	subs	r0, r0, r3
 800493c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800493e:	b10b      	cbz	r3, 8004944 <__sflush_r+0x48>
 8004940:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004942:	1ac0      	subs	r0, r0, r3
 8004944:	2300      	movs	r3, #0
 8004946:	4602      	mov	r2, r0
 8004948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800494a:	6a21      	ldr	r1, [r4, #32]
 800494c:	4628      	mov	r0, r5
 800494e:	47b0      	blx	r6
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	89a3      	ldrh	r3, [r4, #12]
 8004954:	d106      	bne.n	8004964 <__sflush_r+0x68>
 8004956:	6829      	ldr	r1, [r5, #0]
 8004958:	291d      	cmp	r1, #29
 800495a:	d82b      	bhi.n	80049b4 <__sflush_r+0xb8>
 800495c:	4a29      	ldr	r2, [pc, #164]	; (8004a04 <__sflush_r+0x108>)
 800495e:	410a      	asrs	r2, r1
 8004960:	07d6      	lsls	r6, r2, #31
 8004962:	d427      	bmi.n	80049b4 <__sflush_r+0xb8>
 8004964:	2200      	movs	r2, #0
 8004966:	6062      	str	r2, [r4, #4]
 8004968:	04d9      	lsls	r1, r3, #19
 800496a:	6922      	ldr	r2, [r4, #16]
 800496c:	6022      	str	r2, [r4, #0]
 800496e:	d504      	bpl.n	800497a <__sflush_r+0x7e>
 8004970:	1c42      	adds	r2, r0, #1
 8004972:	d101      	bne.n	8004978 <__sflush_r+0x7c>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	b903      	cbnz	r3, 800497a <__sflush_r+0x7e>
 8004978:	6560      	str	r0, [r4, #84]	; 0x54
 800497a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800497c:	602f      	str	r7, [r5, #0]
 800497e:	2900      	cmp	r1, #0
 8004980:	d0c9      	beq.n	8004916 <__sflush_r+0x1a>
 8004982:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004986:	4299      	cmp	r1, r3
 8004988:	d002      	beq.n	8004990 <__sflush_r+0x94>
 800498a:	4628      	mov	r0, r5
 800498c:	f000 fe50 	bl	8005630 <_free_r>
 8004990:	2000      	movs	r0, #0
 8004992:	6360      	str	r0, [r4, #52]	; 0x34
 8004994:	e7c0      	b.n	8004918 <__sflush_r+0x1c>
 8004996:	2301      	movs	r3, #1
 8004998:	4628      	mov	r0, r5
 800499a:	47b0      	blx	r6
 800499c:	1c41      	adds	r1, r0, #1
 800499e:	d1c8      	bne.n	8004932 <__sflush_r+0x36>
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0c5      	beq.n	8004932 <__sflush_r+0x36>
 80049a6:	2b1d      	cmp	r3, #29
 80049a8:	d001      	beq.n	80049ae <__sflush_r+0xb2>
 80049aa:	2b16      	cmp	r3, #22
 80049ac:	d101      	bne.n	80049b2 <__sflush_r+0xb6>
 80049ae:	602f      	str	r7, [r5, #0]
 80049b0:	e7b1      	b.n	8004916 <__sflush_r+0x1a>
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b8:	81a3      	strh	r3, [r4, #12]
 80049ba:	e7ad      	b.n	8004918 <__sflush_r+0x1c>
 80049bc:	690f      	ldr	r7, [r1, #16]
 80049be:	2f00      	cmp	r7, #0
 80049c0:	d0a9      	beq.n	8004916 <__sflush_r+0x1a>
 80049c2:	0793      	lsls	r3, r2, #30
 80049c4:	680e      	ldr	r6, [r1, #0]
 80049c6:	bf08      	it	eq
 80049c8:	694b      	ldreq	r3, [r1, #20]
 80049ca:	600f      	str	r7, [r1, #0]
 80049cc:	bf18      	it	ne
 80049ce:	2300      	movne	r3, #0
 80049d0:	eba6 0807 	sub.w	r8, r6, r7
 80049d4:	608b      	str	r3, [r1, #8]
 80049d6:	f1b8 0f00 	cmp.w	r8, #0
 80049da:	dd9c      	ble.n	8004916 <__sflush_r+0x1a>
 80049dc:	6a21      	ldr	r1, [r4, #32]
 80049de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049e0:	4643      	mov	r3, r8
 80049e2:	463a      	mov	r2, r7
 80049e4:	4628      	mov	r0, r5
 80049e6:	47b0      	blx	r6
 80049e8:	2800      	cmp	r0, #0
 80049ea:	dc06      	bgt.n	80049fa <__sflush_r+0xfe>
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049f2:	81a3      	strh	r3, [r4, #12]
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049f8:	e78e      	b.n	8004918 <__sflush_r+0x1c>
 80049fa:	4407      	add	r7, r0
 80049fc:	eba8 0800 	sub.w	r8, r8, r0
 8004a00:	e7e9      	b.n	80049d6 <__sflush_r+0xda>
 8004a02:	bf00      	nop
 8004a04:	dfbffffe 	.word	0xdfbffffe

08004a08 <_fflush_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	690b      	ldr	r3, [r1, #16]
 8004a0c:	4605      	mov	r5, r0
 8004a0e:	460c      	mov	r4, r1
 8004a10:	b913      	cbnz	r3, 8004a18 <_fflush_r+0x10>
 8004a12:	2500      	movs	r5, #0
 8004a14:	4628      	mov	r0, r5
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	b118      	cbz	r0, 8004a22 <_fflush_r+0x1a>
 8004a1a:	6a03      	ldr	r3, [r0, #32]
 8004a1c:	b90b      	cbnz	r3, 8004a22 <_fflush_r+0x1a>
 8004a1e:	f7fe fe39 	bl	8003694 <__sinit>
 8004a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f3      	beq.n	8004a12 <_fflush_r+0xa>
 8004a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a2c:	07d0      	lsls	r0, r2, #31
 8004a2e:	d404      	bmi.n	8004a3a <_fflush_r+0x32>
 8004a30:	0599      	lsls	r1, r3, #22
 8004a32:	d402      	bmi.n	8004a3a <_fflush_r+0x32>
 8004a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a36:	f7fe fed6 	bl	80037e6 <__retarget_lock_acquire_recursive>
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	f7ff ff5d 	bl	80048fc <__sflush_r>
 8004a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a44:	07da      	lsls	r2, r3, #31
 8004a46:	4605      	mov	r5, r0
 8004a48:	d4e4      	bmi.n	8004a14 <_fflush_r+0xc>
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	059b      	lsls	r3, r3, #22
 8004a4e:	d4e1      	bmi.n	8004a14 <_fflush_r+0xc>
 8004a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a52:	f7fe fec9 	bl	80037e8 <__retarget_lock_release_recursive>
 8004a56:	e7dd      	b.n	8004a14 <_fflush_r+0xc>

08004a58 <__malloc_lock>:
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <__malloc_lock+0x8>)
 8004a5a:	f7fe bec4 	b.w	80037e6 <__retarget_lock_acquire_recursive>
 8004a5e:	bf00      	nop
 8004a60:	2000ac04 	.word	0x2000ac04

08004a64 <__malloc_unlock>:
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <__malloc_unlock+0x8>)
 8004a66:	f7fe bebf 	b.w	80037e8 <__retarget_lock_release_recursive>
 8004a6a:	bf00      	nop
 8004a6c:	2000ac04 	.word	0x2000ac04

08004a70 <_Balloc>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	69c6      	ldr	r6, [r0, #28]
 8004a74:	4604      	mov	r4, r0
 8004a76:	460d      	mov	r5, r1
 8004a78:	b976      	cbnz	r6, 8004a98 <_Balloc+0x28>
 8004a7a:	2010      	movs	r0, #16
 8004a7c:	f7ff fe96 	bl	80047ac <malloc>
 8004a80:	4602      	mov	r2, r0
 8004a82:	61e0      	str	r0, [r4, #28]
 8004a84:	b920      	cbnz	r0, 8004a90 <_Balloc+0x20>
 8004a86:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <_Balloc+0x78>)
 8004a88:	4818      	ldr	r0, [pc, #96]	; (8004aec <_Balloc+0x7c>)
 8004a8a:	216b      	movs	r1, #107	; 0x6b
 8004a8c:	f000 fd9c 	bl	80055c8 <__assert_func>
 8004a90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a94:	6006      	str	r6, [r0, #0]
 8004a96:	60c6      	str	r6, [r0, #12]
 8004a98:	69e6      	ldr	r6, [r4, #28]
 8004a9a:	68f3      	ldr	r3, [r6, #12]
 8004a9c:	b183      	cbz	r3, 8004ac0 <_Balloc+0x50>
 8004a9e:	69e3      	ldr	r3, [r4, #28]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004aa6:	b9b8      	cbnz	r0, 8004ad8 <_Balloc+0x68>
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	fa01 f605 	lsl.w	r6, r1, r5
 8004aae:	1d72      	adds	r2, r6, #5
 8004ab0:	0092      	lsls	r2, r2, #2
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f000 fda6 	bl	8005604 <_calloc_r>
 8004ab8:	b160      	cbz	r0, 8004ad4 <_Balloc+0x64>
 8004aba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004abe:	e00e      	b.n	8004ade <_Balloc+0x6e>
 8004ac0:	2221      	movs	r2, #33	; 0x21
 8004ac2:	2104      	movs	r1, #4
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f000 fd9d 	bl	8005604 <_calloc_r>
 8004aca:	69e3      	ldr	r3, [r4, #28]
 8004acc:	60f0      	str	r0, [r6, #12]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e4      	bne.n	8004a9e <_Balloc+0x2e>
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	6802      	ldr	r2, [r0, #0]
 8004ada:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ae4:	e7f7      	b.n	8004ad6 <_Balloc+0x66>
 8004ae6:	bf00      	nop
 8004ae8:	08005c32 	.word	0x08005c32
 8004aec:	08005cc3 	.word	0x08005cc3

08004af0 <_Bfree>:
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	69c6      	ldr	r6, [r0, #28]
 8004af4:	4605      	mov	r5, r0
 8004af6:	460c      	mov	r4, r1
 8004af8:	b976      	cbnz	r6, 8004b18 <_Bfree+0x28>
 8004afa:	2010      	movs	r0, #16
 8004afc:	f7ff fe56 	bl	80047ac <malloc>
 8004b00:	4602      	mov	r2, r0
 8004b02:	61e8      	str	r0, [r5, #28]
 8004b04:	b920      	cbnz	r0, 8004b10 <_Bfree+0x20>
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <_Bfree+0x3c>)
 8004b08:	4809      	ldr	r0, [pc, #36]	; (8004b30 <_Bfree+0x40>)
 8004b0a:	218f      	movs	r1, #143	; 0x8f
 8004b0c:	f000 fd5c 	bl	80055c8 <__assert_func>
 8004b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b14:	6006      	str	r6, [r0, #0]
 8004b16:	60c6      	str	r6, [r0, #12]
 8004b18:	b13c      	cbz	r4, 8004b2a <_Bfree+0x3a>
 8004b1a:	69eb      	ldr	r3, [r5, #28]
 8004b1c:	6862      	ldr	r2, [r4, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b24:	6021      	str	r1, [r4, #0]
 8004b26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b2a:	bd70      	pop	{r4, r5, r6, pc}
 8004b2c:	08005c32 	.word	0x08005c32
 8004b30:	08005cc3 	.word	0x08005cc3

08004b34 <__multadd>:
 8004b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b38:	690d      	ldr	r5, [r1, #16]
 8004b3a:	4607      	mov	r7, r0
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	461e      	mov	r6, r3
 8004b40:	f101 0c14 	add.w	ip, r1, #20
 8004b44:	2000      	movs	r0, #0
 8004b46:	f8dc 3000 	ldr.w	r3, [ip]
 8004b4a:	b299      	uxth	r1, r3
 8004b4c:	fb02 6101 	mla	r1, r2, r1, r6
 8004b50:	0c1e      	lsrs	r6, r3, #16
 8004b52:	0c0b      	lsrs	r3, r1, #16
 8004b54:	fb02 3306 	mla	r3, r2, r6, r3
 8004b58:	b289      	uxth	r1, r1
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b60:	4285      	cmp	r5, r0
 8004b62:	f84c 1b04 	str.w	r1, [ip], #4
 8004b66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b6a:	dcec      	bgt.n	8004b46 <__multadd+0x12>
 8004b6c:	b30e      	cbz	r6, 8004bb2 <__multadd+0x7e>
 8004b6e:	68a3      	ldr	r3, [r4, #8]
 8004b70:	42ab      	cmp	r3, r5
 8004b72:	dc19      	bgt.n	8004ba8 <__multadd+0x74>
 8004b74:	6861      	ldr	r1, [r4, #4]
 8004b76:	4638      	mov	r0, r7
 8004b78:	3101      	adds	r1, #1
 8004b7a:	f7ff ff79 	bl	8004a70 <_Balloc>
 8004b7e:	4680      	mov	r8, r0
 8004b80:	b928      	cbnz	r0, 8004b8e <__multadd+0x5a>
 8004b82:	4602      	mov	r2, r0
 8004b84:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <__multadd+0x84>)
 8004b86:	480d      	ldr	r0, [pc, #52]	; (8004bbc <__multadd+0x88>)
 8004b88:	21ba      	movs	r1, #186	; 0xba
 8004b8a:	f000 fd1d 	bl	80055c8 <__assert_func>
 8004b8e:	6922      	ldr	r2, [r4, #16]
 8004b90:	3202      	adds	r2, #2
 8004b92:	f104 010c 	add.w	r1, r4, #12
 8004b96:	0092      	lsls	r2, r2, #2
 8004b98:	300c      	adds	r0, #12
 8004b9a:	f7fe fe26 	bl	80037ea <memcpy>
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	f7ff ffa5 	bl	8004af0 <_Bfree>
 8004ba6:	4644      	mov	r4, r8
 8004ba8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004bac:	3501      	adds	r5, #1
 8004bae:	615e      	str	r6, [r3, #20]
 8004bb0:	6125      	str	r5, [r4, #16]
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bb8:	08005ca1 	.word	0x08005ca1
 8004bbc:	08005cc3 	.word	0x08005cc3

08004bc0 <__hi0bits>:
 8004bc0:	0c03      	lsrs	r3, r0, #16
 8004bc2:	041b      	lsls	r3, r3, #16
 8004bc4:	b9d3      	cbnz	r3, 8004bfc <__hi0bits+0x3c>
 8004bc6:	0400      	lsls	r0, r0, #16
 8004bc8:	2310      	movs	r3, #16
 8004bca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004bce:	bf04      	itt	eq
 8004bd0:	0200      	lsleq	r0, r0, #8
 8004bd2:	3308      	addeq	r3, #8
 8004bd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004bd8:	bf04      	itt	eq
 8004bda:	0100      	lsleq	r0, r0, #4
 8004bdc:	3304      	addeq	r3, #4
 8004bde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004be2:	bf04      	itt	eq
 8004be4:	0080      	lsleq	r0, r0, #2
 8004be6:	3302      	addeq	r3, #2
 8004be8:	2800      	cmp	r0, #0
 8004bea:	db05      	blt.n	8004bf8 <__hi0bits+0x38>
 8004bec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004bf0:	f103 0301 	add.w	r3, r3, #1
 8004bf4:	bf08      	it	eq
 8004bf6:	2320      	moveq	r3, #32
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	4770      	bx	lr
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e7e4      	b.n	8004bca <__hi0bits+0xa>

08004c00 <__lo0bits>:
 8004c00:	6803      	ldr	r3, [r0, #0]
 8004c02:	f013 0207 	ands.w	r2, r3, #7
 8004c06:	d00c      	beq.n	8004c22 <__lo0bits+0x22>
 8004c08:	07d9      	lsls	r1, r3, #31
 8004c0a:	d422      	bmi.n	8004c52 <__lo0bits+0x52>
 8004c0c:	079a      	lsls	r2, r3, #30
 8004c0e:	bf49      	itett	mi
 8004c10:	085b      	lsrmi	r3, r3, #1
 8004c12:	089b      	lsrpl	r3, r3, #2
 8004c14:	6003      	strmi	r3, [r0, #0]
 8004c16:	2201      	movmi	r2, #1
 8004c18:	bf5c      	itt	pl
 8004c1a:	6003      	strpl	r3, [r0, #0]
 8004c1c:	2202      	movpl	r2, #2
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4770      	bx	lr
 8004c22:	b299      	uxth	r1, r3
 8004c24:	b909      	cbnz	r1, 8004c2a <__lo0bits+0x2a>
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	2210      	movs	r2, #16
 8004c2a:	b2d9      	uxtb	r1, r3
 8004c2c:	b909      	cbnz	r1, 8004c32 <__lo0bits+0x32>
 8004c2e:	3208      	adds	r2, #8
 8004c30:	0a1b      	lsrs	r3, r3, #8
 8004c32:	0719      	lsls	r1, r3, #28
 8004c34:	bf04      	itt	eq
 8004c36:	091b      	lsreq	r3, r3, #4
 8004c38:	3204      	addeq	r2, #4
 8004c3a:	0799      	lsls	r1, r3, #30
 8004c3c:	bf04      	itt	eq
 8004c3e:	089b      	lsreq	r3, r3, #2
 8004c40:	3202      	addeq	r2, #2
 8004c42:	07d9      	lsls	r1, r3, #31
 8004c44:	d403      	bmi.n	8004c4e <__lo0bits+0x4e>
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	f102 0201 	add.w	r2, r2, #1
 8004c4c:	d003      	beq.n	8004c56 <__lo0bits+0x56>
 8004c4e:	6003      	str	r3, [r0, #0]
 8004c50:	e7e5      	b.n	8004c1e <__lo0bits+0x1e>
 8004c52:	2200      	movs	r2, #0
 8004c54:	e7e3      	b.n	8004c1e <__lo0bits+0x1e>
 8004c56:	2220      	movs	r2, #32
 8004c58:	e7e1      	b.n	8004c1e <__lo0bits+0x1e>
	...

08004c5c <__i2b>:
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	460c      	mov	r4, r1
 8004c60:	2101      	movs	r1, #1
 8004c62:	f7ff ff05 	bl	8004a70 <_Balloc>
 8004c66:	4602      	mov	r2, r0
 8004c68:	b928      	cbnz	r0, 8004c76 <__i2b+0x1a>
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <__i2b+0x24>)
 8004c6c:	4805      	ldr	r0, [pc, #20]	; (8004c84 <__i2b+0x28>)
 8004c6e:	f240 1145 	movw	r1, #325	; 0x145
 8004c72:	f000 fca9 	bl	80055c8 <__assert_func>
 8004c76:	2301      	movs	r3, #1
 8004c78:	6144      	str	r4, [r0, #20]
 8004c7a:	6103      	str	r3, [r0, #16]
 8004c7c:	bd10      	pop	{r4, pc}
 8004c7e:	bf00      	nop
 8004c80:	08005ca1 	.word	0x08005ca1
 8004c84:	08005cc3 	.word	0x08005cc3

08004c88 <__multiply>:
 8004c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	4691      	mov	r9, r2
 8004c8e:	690a      	ldr	r2, [r1, #16]
 8004c90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	bfb8      	it	lt
 8004c98:	460b      	movlt	r3, r1
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	bfbc      	itt	lt
 8004c9e:	464c      	movlt	r4, r9
 8004ca0:	4699      	movlt	r9, r3
 8004ca2:	6927      	ldr	r7, [r4, #16]
 8004ca4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004ca8:	68a3      	ldr	r3, [r4, #8]
 8004caa:	6861      	ldr	r1, [r4, #4]
 8004cac:	eb07 060a 	add.w	r6, r7, sl
 8004cb0:	42b3      	cmp	r3, r6
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	bfb8      	it	lt
 8004cb6:	3101      	addlt	r1, #1
 8004cb8:	f7ff feda 	bl	8004a70 <_Balloc>
 8004cbc:	b930      	cbnz	r0, 8004ccc <__multiply+0x44>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	4b44      	ldr	r3, [pc, #272]	; (8004dd4 <__multiply+0x14c>)
 8004cc2:	4845      	ldr	r0, [pc, #276]	; (8004dd8 <__multiply+0x150>)
 8004cc4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004cc8:	f000 fc7e 	bl	80055c8 <__assert_func>
 8004ccc:	f100 0514 	add.w	r5, r0, #20
 8004cd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	4543      	cmp	r3, r8
 8004cda:	d321      	bcc.n	8004d20 <__multiply+0x98>
 8004cdc:	f104 0314 	add.w	r3, r4, #20
 8004ce0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004ce4:	f109 0314 	add.w	r3, r9, #20
 8004ce8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004cec:	9202      	str	r2, [sp, #8]
 8004cee:	1b3a      	subs	r2, r7, r4
 8004cf0:	3a15      	subs	r2, #21
 8004cf2:	f022 0203 	bic.w	r2, r2, #3
 8004cf6:	3204      	adds	r2, #4
 8004cf8:	f104 0115 	add.w	r1, r4, #21
 8004cfc:	428f      	cmp	r7, r1
 8004cfe:	bf38      	it	cc
 8004d00:	2204      	movcc	r2, #4
 8004d02:	9201      	str	r2, [sp, #4]
 8004d04:	9a02      	ldr	r2, [sp, #8]
 8004d06:	9303      	str	r3, [sp, #12]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d80c      	bhi.n	8004d26 <__multiply+0x9e>
 8004d0c:	2e00      	cmp	r6, #0
 8004d0e:	dd03      	ble.n	8004d18 <__multiply+0x90>
 8004d10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d05b      	beq.n	8004dd0 <__multiply+0x148>
 8004d18:	6106      	str	r6, [r0, #16]
 8004d1a:	b005      	add	sp, #20
 8004d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d20:	f843 2b04 	str.w	r2, [r3], #4
 8004d24:	e7d8      	b.n	8004cd8 <__multiply+0x50>
 8004d26:	f8b3 a000 	ldrh.w	sl, [r3]
 8004d2a:	f1ba 0f00 	cmp.w	sl, #0
 8004d2e:	d024      	beq.n	8004d7a <__multiply+0xf2>
 8004d30:	f104 0e14 	add.w	lr, r4, #20
 8004d34:	46a9      	mov	r9, r5
 8004d36:	f04f 0c00 	mov.w	ip, #0
 8004d3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004d3e:	f8d9 1000 	ldr.w	r1, [r9]
 8004d42:	fa1f fb82 	uxth.w	fp, r2
 8004d46:	b289      	uxth	r1, r1
 8004d48:	fb0a 110b 	mla	r1, sl, fp, r1
 8004d4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004d50:	f8d9 2000 	ldr.w	r2, [r9]
 8004d54:	4461      	add	r1, ip
 8004d56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8004d5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004d62:	b289      	uxth	r1, r1
 8004d64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d68:	4577      	cmp	r7, lr
 8004d6a:	f849 1b04 	str.w	r1, [r9], #4
 8004d6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d72:	d8e2      	bhi.n	8004d3a <__multiply+0xb2>
 8004d74:	9a01      	ldr	r2, [sp, #4]
 8004d76:	f845 c002 	str.w	ip, [r5, r2]
 8004d7a:	9a03      	ldr	r2, [sp, #12]
 8004d7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004d80:	3304      	adds	r3, #4
 8004d82:	f1b9 0f00 	cmp.w	r9, #0
 8004d86:	d021      	beq.n	8004dcc <__multiply+0x144>
 8004d88:	6829      	ldr	r1, [r5, #0]
 8004d8a:	f104 0c14 	add.w	ip, r4, #20
 8004d8e:	46ae      	mov	lr, r5
 8004d90:	f04f 0a00 	mov.w	sl, #0
 8004d94:	f8bc b000 	ldrh.w	fp, [ip]
 8004d98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004d9c:	fb09 220b 	mla	r2, r9, fp, r2
 8004da0:	4452      	add	r2, sl
 8004da2:	b289      	uxth	r1, r1
 8004da4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004da8:	f84e 1b04 	str.w	r1, [lr], #4
 8004dac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004db0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004db4:	f8be 1000 	ldrh.w	r1, [lr]
 8004db8:	fb09 110a 	mla	r1, r9, sl, r1
 8004dbc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004dc0:	4567      	cmp	r7, ip
 8004dc2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004dc6:	d8e5      	bhi.n	8004d94 <__multiply+0x10c>
 8004dc8:	9a01      	ldr	r2, [sp, #4]
 8004dca:	50a9      	str	r1, [r5, r2]
 8004dcc:	3504      	adds	r5, #4
 8004dce:	e799      	b.n	8004d04 <__multiply+0x7c>
 8004dd0:	3e01      	subs	r6, #1
 8004dd2:	e79b      	b.n	8004d0c <__multiply+0x84>
 8004dd4:	08005ca1 	.word	0x08005ca1
 8004dd8:	08005cc3 	.word	0x08005cc3

08004ddc <__pow5mult>:
 8004ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004de0:	4615      	mov	r5, r2
 8004de2:	f012 0203 	ands.w	r2, r2, #3
 8004de6:	4606      	mov	r6, r0
 8004de8:	460f      	mov	r7, r1
 8004dea:	d007      	beq.n	8004dfc <__pow5mult+0x20>
 8004dec:	4c25      	ldr	r4, [pc, #148]	; (8004e84 <__pow5mult+0xa8>)
 8004dee:	3a01      	subs	r2, #1
 8004df0:	2300      	movs	r3, #0
 8004df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004df6:	f7ff fe9d 	bl	8004b34 <__multadd>
 8004dfa:	4607      	mov	r7, r0
 8004dfc:	10ad      	asrs	r5, r5, #2
 8004dfe:	d03d      	beq.n	8004e7c <__pow5mult+0xa0>
 8004e00:	69f4      	ldr	r4, [r6, #28]
 8004e02:	b97c      	cbnz	r4, 8004e24 <__pow5mult+0x48>
 8004e04:	2010      	movs	r0, #16
 8004e06:	f7ff fcd1 	bl	80047ac <malloc>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	61f0      	str	r0, [r6, #28]
 8004e0e:	b928      	cbnz	r0, 8004e1c <__pow5mult+0x40>
 8004e10:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <__pow5mult+0xac>)
 8004e12:	481e      	ldr	r0, [pc, #120]	; (8004e8c <__pow5mult+0xb0>)
 8004e14:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004e18:	f000 fbd6 	bl	80055c8 <__assert_func>
 8004e1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e20:	6004      	str	r4, [r0, #0]
 8004e22:	60c4      	str	r4, [r0, #12]
 8004e24:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004e28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e2c:	b94c      	cbnz	r4, 8004e42 <__pow5mult+0x66>
 8004e2e:	f240 2171 	movw	r1, #625	; 0x271
 8004e32:	4630      	mov	r0, r6
 8004e34:	f7ff ff12 	bl	8004c5c <__i2b>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e3e:	4604      	mov	r4, r0
 8004e40:	6003      	str	r3, [r0, #0]
 8004e42:	f04f 0900 	mov.w	r9, #0
 8004e46:	07eb      	lsls	r3, r5, #31
 8004e48:	d50a      	bpl.n	8004e60 <__pow5mult+0x84>
 8004e4a:	4639      	mov	r1, r7
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f7ff ff1a 	bl	8004c88 <__multiply>
 8004e54:	4639      	mov	r1, r7
 8004e56:	4680      	mov	r8, r0
 8004e58:	4630      	mov	r0, r6
 8004e5a:	f7ff fe49 	bl	8004af0 <_Bfree>
 8004e5e:	4647      	mov	r7, r8
 8004e60:	106d      	asrs	r5, r5, #1
 8004e62:	d00b      	beq.n	8004e7c <__pow5mult+0xa0>
 8004e64:	6820      	ldr	r0, [r4, #0]
 8004e66:	b938      	cbnz	r0, 8004e78 <__pow5mult+0x9c>
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	f7ff ff0b 	bl	8004c88 <__multiply>
 8004e72:	6020      	str	r0, [r4, #0]
 8004e74:	f8c0 9000 	str.w	r9, [r0]
 8004e78:	4604      	mov	r4, r0
 8004e7a:	e7e4      	b.n	8004e46 <__pow5mult+0x6a>
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e82:	bf00      	nop
 8004e84:	08005e10 	.word	0x08005e10
 8004e88:	08005c32 	.word	0x08005c32
 8004e8c:	08005cc3 	.word	0x08005cc3

08004e90 <__lshift>:
 8004e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e94:	460c      	mov	r4, r1
 8004e96:	6849      	ldr	r1, [r1, #4]
 8004e98:	6923      	ldr	r3, [r4, #16]
 8004e9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e9e:	68a3      	ldr	r3, [r4, #8]
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	4691      	mov	r9, r2
 8004ea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ea8:	f108 0601 	add.w	r6, r8, #1
 8004eac:	42b3      	cmp	r3, r6
 8004eae:	db0b      	blt.n	8004ec8 <__lshift+0x38>
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	f7ff fddd 	bl	8004a70 <_Balloc>
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	b948      	cbnz	r0, 8004ece <__lshift+0x3e>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	4b28      	ldr	r3, [pc, #160]	; (8004f60 <__lshift+0xd0>)
 8004ebe:	4829      	ldr	r0, [pc, #164]	; (8004f64 <__lshift+0xd4>)
 8004ec0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004ec4:	f000 fb80 	bl	80055c8 <__assert_func>
 8004ec8:	3101      	adds	r1, #1
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	e7ee      	b.n	8004eac <__lshift+0x1c>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f100 0114 	add.w	r1, r0, #20
 8004ed4:	f100 0210 	add.w	r2, r0, #16
 8004ed8:	4618      	mov	r0, r3
 8004eda:	4553      	cmp	r3, sl
 8004edc:	db33      	blt.n	8004f46 <__lshift+0xb6>
 8004ede:	6920      	ldr	r0, [r4, #16]
 8004ee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ee4:	f104 0314 	add.w	r3, r4, #20
 8004ee8:	f019 091f 	ands.w	r9, r9, #31
 8004eec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ef0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ef4:	d02b      	beq.n	8004f4e <__lshift+0xbe>
 8004ef6:	f1c9 0e20 	rsb	lr, r9, #32
 8004efa:	468a      	mov	sl, r1
 8004efc:	2200      	movs	r2, #0
 8004efe:	6818      	ldr	r0, [r3, #0]
 8004f00:	fa00 f009 	lsl.w	r0, r0, r9
 8004f04:	4310      	orrs	r0, r2
 8004f06:	f84a 0b04 	str.w	r0, [sl], #4
 8004f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f0e:	459c      	cmp	ip, r3
 8004f10:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f14:	d8f3      	bhi.n	8004efe <__lshift+0x6e>
 8004f16:	ebac 0304 	sub.w	r3, ip, r4
 8004f1a:	3b15      	subs	r3, #21
 8004f1c:	f023 0303 	bic.w	r3, r3, #3
 8004f20:	3304      	adds	r3, #4
 8004f22:	f104 0015 	add.w	r0, r4, #21
 8004f26:	4584      	cmp	ip, r0
 8004f28:	bf38      	it	cc
 8004f2a:	2304      	movcc	r3, #4
 8004f2c:	50ca      	str	r2, [r1, r3]
 8004f2e:	b10a      	cbz	r2, 8004f34 <__lshift+0xa4>
 8004f30:	f108 0602 	add.w	r6, r8, #2
 8004f34:	3e01      	subs	r6, #1
 8004f36:	4638      	mov	r0, r7
 8004f38:	612e      	str	r6, [r5, #16]
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	f7ff fdd8 	bl	8004af0 <_Bfree>
 8004f40:	4628      	mov	r0, r5
 8004f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f46:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	e7c5      	b.n	8004eda <__lshift+0x4a>
 8004f4e:	3904      	subs	r1, #4
 8004f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f54:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f58:	459c      	cmp	ip, r3
 8004f5a:	d8f9      	bhi.n	8004f50 <__lshift+0xc0>
 8004f5c:	e7ea      	b.n	8004f34 <__lshift+0xa4>
 8004f5e:	bf00      	nop
 8004f60:	08005ca1 	.word	0x08005ca1
 8004f64:	08005cc3 	.word	0x08005cc3

08004f68 <__mcmp>:
 8004f68:	b530      	push	{r4, r5, lr}
 8004f6a:	6902      	ldr	r2, [r0, #16]
 8004f6c:	690c      	ldr	r4, [r1, #16]
 8004f6e:	1b12      	subs	r2, r2, r4
 8004f70:	d10e      	bne.n	8004f90 <__mcmp+0x28>
 8004f72:	f100 0314 	add.w	r3, r0, #20
 8004f76:	3114      	adds	r1, #20
 8004f78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004f7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004f80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004f84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004f88:	42a5      	cmp	r5, r4
 8004f8a:	d003      	beq.n	8004f94 <__mcmp+0x2c>
 8004f8c:	d305      	bcc.n	8004f9a <__mcmp+0x32>
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4610      	mov	r0, r2
 8004f92:	bd30      	pop	{r4, r5, pc}
 8004f94:	4283      	cmp	r3, r0
 8004f96:	d3f3      	bcc.n	8004f80 <__mcmp+0x18>
 8004f98:	e7fa      	b.n	8004f90 <__mcmp+0x28>
 8004f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f9e:	e7f7      	b.n	8004f90 <__mcmp+0x28>

08004fa0 <__mdiff>:
 8004fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4620      	mov	r0, r4
 8004fac:	4690      	mov	r8, r2
 8004fae:	f7ff ffdb 	bl	8004f68 <__mcmp>
 8004fb2:	1e05      	subs	r5, r0, #0
 8004fb4:	d110      	bne.n	8004fd8 <__mdiff+0x38>
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	4630      	mov	r0, r6
 8004fba:	f7ff fd59 	bl	8004a70 <_Balloc>
 8004fbe:	b930      	cbnz	r0, 8004fce <__mdiff+0x2e>
 8004fc0:	4b3a      	ldr	r3, [pc, #232]	; (80050ac <__mdiff+0x10c>)
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	f240 2137 	movw	r1, #567	; 0x237
 8004fc8:	4839      	ldr	r0, [pc, #228]	; (80050b0 <__mdiff+0x110>)
 8004fca:	f000 fafd 	bl	80055c8 <__assert_func>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd8:	bfa4      	itt	ge
 8004fda:	4643      	movge	r3, r8
 8004fdc:	46a0      	movge	r8, r4
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004fe4:	bfa6      	itte	ge
 8004fe6:	461c      	movge	r4, r3
 8004fe8:	2500      	movge	r5, #0
 8004fea:	2501      	movlt	r5, #1
 8004fec:	f7ff fd40 	bl	8004a70 <_Balloc>
 8004ff0:	b920      	cbnz	r0, 8004ffc <__mdiff+0x5c>
 8004ff2:	4b2e      	ldr	r3, [pc, #184]	; (80050ac <__mdiff+0x10c>)
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	f240 2145 	movw	r1, #581	; 0x245
 8004ffa:	e7e5      	b.n	8004fc8 <__mdiff+0x28>
 8004ffc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005000:	6926      	ldr	r6, [r4, #16]
 8005002:	60c5      	str	r5, [r0, #12]
 8005004:	f104 0914 	add.w	r9, r4, #20
 8005008:	f108 0514 	add.w	r5, r8, #20
 800500c:	f100 0e14 	add.w	lr, r0, #20
 8005010:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005014:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005018:	f108 0210 	add.w	r2, r8, #16
 800501c:	46f2      	mov	sl, lr
 800501e:	2100      	movs	r1, #0
 8005020:	f859 3b04 	ldr.w	r3, [r9], #4
 8005024:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005028:	fa11 f88b 	uxtah	r8, r1, fp
 800502c:	b299      	uxth	r1, r3
 800502e:	0c1b      	lsrs	r3, r3, #16
 8005030:	eba8 0801 	sub.w	r8, r8, r1
 8005034:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005038:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800503c:	fa1f f888 	uxth.w	r8, r8
 8005040:	1419      	asrs	r1, r3, #16
 8005042:	454e      	cmp	r6, r9
 8005044:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005048:	f84a 3b04 	str.w	r3, [sl], #4
 800504c:	d8e8      	bhi.n	8005020 <__mdiff+0x80>
 800504e:	1b33      	subs	r3, r6, r4
 8005050:	3b15      	subs	r3, #21
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	3304      	adds	r3, #4
 8005058:	3415      	adds	r4, #21
 800505a:	42a6      	cmp	r6, r4
 800505c:	bf38      	it	cc
 800505e:	2304      	movcc	r3, #4
 8005060:	441d      	add	r5, r3
 8005062:	4473      	add	r3, lr
 8005064:	469e      	mov	lr, r3
 8005066:	462e      	mov	r6, r5
 8005068:	4566      	cmp	r6, ip
 800506a:	d30e      	bcc.n	800508a <__mdiff+0xea>
 800506c:	f10c 0203 	add.w	r2, ip, #3
 8005070:	1b52      	subs	r2, r2, r5
 8005072:	f022 0203 	bic.w	r2, r2, #3
 8005076:	3d03      	subs	r5, #3
 8005078:	45ac      	cmp	ip, r5
 800507a:	bf38      	it	cc
 800507c:	2200      	movcc	r2, #0
 800507e:	4413      	add	r3, r2
 8005080:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005084:	b17a      	cbz	r2, 80050a6 <__mdiff+0x106>
 8005086:	6107      	str	r7, [r0, #16]
 8005088:	e7a4      	b.n	8004fd4 <__mdiff+0x34>
 800508a:	f856 8b04 	ldr.w	r8, [r6], #4
 800508e:	fa11 f288 	uxtah	r2, r1, r8
 8005092:	1414      	asrs	r4, r2, #16
 8005094:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005098:	b292      	uxth	r2, r2
 800509a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800509e:	f84e 2b04 	str.w	r2, [lr], #4
 80050a2:	1421      	asrs	r1, r4, #16
 80050a4:	e7e0      	b.n	8005068 <__mdiff+0xc8>
 80050a6:	3f01      	subs	r7, #1
 80050a8:	e7ea      	b.n	8005080 <__mdiff+0xe0>
 80050aa:	bf00      	nop
 80050ac:	08005ca1 	.word	0x08005ca1
 80050b0:	08005cc3 	.word	0x08005cc3

080050b4 <__d2b>:
 80050b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050b8:	460f      	mov	r7, r1
 80050ba:	2101      	movs	r1, #1
 80050bc:	ec59 8b10 	vmov	r8, r9, d0
 80050c0:	4616      	mov	r6, r2
 80050c2:	f7ff fcd5 	bl	8004a70 <_Balloc>
 80050c6:	4604      	mov	r4, r0
 80050c8:	b930      	cbnz	r0, 80050d8 <__d2b+0x24>
 80050ca:	4602      	mov	r2, r0
 80050cc:	4b24      	ldr	r3, [pc, #144]	; (8005160 <__d2b+0xac>)
 80050ce:	4825      	ldr	r0, [pc, #148]	; (8005164 <__d2b+0xb0>)
 80050d0:	f240 310f 	movw	r1, #783	; 0x30f
 80050d4:	f000 fa78 	bl	80055c8 <__assert_func>
 80050d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80050dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050e0:	bb2d      	cbnz	r5, 800512e <__d2b+0x7a>
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	f1b8 0300 	subs.w	r3, r8, #0
 80050e8:	d026      	beq.n	8005138 <__d2b+0x84>
 80050ea:	4668      	mov	r0, sp
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	f7ff fd87 	bl	8004c00 <__lo0bits>
 80050f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80050f6:	b1e8      	cbz	r0, 8005134 <__d2b+0x80>
 80050f8:	f1c0 0320 	rsb	r3, r0, #32
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	430b      	orrs	r3, r1
 8005102:	40c2      	lsrs	r2, r0
 8005104:	6163      	str	r3, [r4, #20]
 8005106:	9201      	str	r2, [sp, #4]
 8005108:	9b01      	ldr	r3, [sp, #4]
 800510a:	61a3      	str	r3, [r4, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	bf14      	ite	ne
 8005110:	2202      	movne	r2, #2
 8005112:	2201      	moveq	r2, #1
 8005114:	6122      	str	r2, [r4, #16]
 8005116:	b1bd      	cbz	r5, 8005148 <__d2b+0x94>
 8005118:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800511c:	4405      	add	r5, r0
 800511e:	603d      	str	r5, [r7, #0]
 8005120:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005124:	6030      	str	r0, [r6, #0]
 8005126:	4620      	mov	r0, r4
 8005128:	b003      	add	sp, #12
 800512a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800512e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005132:	e7d6      	b.n	80050e2 <__d2b+0x2e>
 8005134:	6161      	str	r1, [r4, #20]
 8005136:	e7e7      	b.n	8005108 <__d2b+0x54>
 8005138:	a801      	add	r0, sp, #4
 800513a:	f7ff fd61 	bl	8004c00 <__lo0bits>
 800513e:	9b01      	ldr	r3, [sp, #4]
 8005140:	6163      	str	r3, [r4, #20]
 8005142:	3020      	adds	r0, #32
 8005144:	2201      	movs	r2, #1
 8005146:	e7e5      	b.n	8005114 <__d2b+0x60>
 8005148:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800514c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005150:	6038      	str	r0, [r7, #0]
 8005152:	6918      	ldr	r0, [r3, #16]
 8005154:	f7ff fd34 	bl	8004bc0 <__hi0bits>
 8005158:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800515c:	e7e2      	b.n	8005124 <__d2b+0x70>
 800515e:	bf00      	nop
 8005160:	08005ca1 	.word	0x08005ca1
 8005164:	08005cc3 	.word	0x08005cc3

08005168 <__sread>:
 8005168:	b510      	push	{r4, lr}
 800516a:	460c      	mov	r4, r1
 800516c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005170:	f000 f9f6 	bl	8005560 <_read_r>
 8005174:	2800      	cmp	r0, #0
 8005176:	bfab      	itete	ge
 8005178:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800517a:	89a3      	ldrhlt	r3, [r4, #12]
 800517c:	181b      	addge	r3, r3, r0
 800517e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005182:	bfac      	ite	ge
 8005184:	6563      	strge	r3, [r4, #84]	; 0x54
 8005186:	81a3      	strhlt	r3, [r4, #12]
 8005188:	bd10      	pop	{r4, pc}

0800518a <__swrite>:
 800518a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800518e:	461f      	mov	r7, r3
 8005190:	898b      	ldrh	r3, [r1, #12]
 8005192:	05db      	lsls	r3, r3, #23
 8005194:	4605      	mov	r5, r0
 8005196:	460c      	mov	r4, r1
 8005198:	4616      	mov	r6, r2
 800519a:	d505      	bpl.n	80051a8 <__swrite+0x1e>
 800519c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a0:	2302      	movs	r3, #2
 80051a2:	2200      	movs	r2, #0
 80051a4:	f000 f9ca 	bl	800553c <_lseek_r>
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051b2:	81a3      	strh	r3, [r4, #12]
 80051b4:	4632      	mov	r2, r6
 80051b6:	463b      	mov	r3, r7
 80051b8:	4628      	mov	r0, r5
 80051ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051be:	f000 b9f1 	b.w	80055a4 <_write_r>

080051c2 <__sseek>:
 80051c2:	b510      	push	{r4, lr}
 80051c4:	460c      	mov	r4, r1
 80051c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ca:	f000 f9b7 	bl	800553c <_lseek_r>
 80051ce:	1c43      	adds	r3, r0, #1
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	bf15      	itete	ne
 80051d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80051d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051de:	81a3      	strheq	r3, [r4, #12]
 80051e0:	bf18      	it	ne
 80051e2:	81a3      	strhne	r3, [r4, #12]
 80051e4:	bd10      	pop	{r4, pc}

080051e6 <__sclose>:
 80051e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ea:	f000 b975 	b.w	80054d8 <_close_r>

080051ee <_realloc_r>:
 80051ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f2:	4680      	mov	r8, r0
 80051f4:	4614      	mov	r4, r2
 80051f6:	460e      	mov	r6, r1
 80051f8:	b921      	cbnz	r1, 8005204 <_realloc_r+0x16>
 80051fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051fe:	4611      	mov	r1, r2
 8005200:	f7ff bafc 	b.w	80047fc <_malloc_r>
 8005204:	b92a      	cbnz	r2, 8005212 <_realloc_r+0x24>
 8005206:	f000 fa13 	bl	8005630 <_free_r>
 800520a:	4625      	mov	r5, r4
 800520c:	4628      	mov	r0, r5
 800520e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005212:	f000 fa6b 	bl	80056ec <_malloc_usable_size_r>
 8005216:	4284      	cmp	r4, r0
 8005218:	4607      	mov	r7, r0
 800521a:	d802      	bhi.n	8005222 <_realloc_r+0x34>
 800521c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005220:	d812      	bhi.n	8005248 <_realloc_r+0x5a>
 8005222:	4621      	mov	r1, r4
 8005224:	4640      	mov	r0, r8
 8005226:	f7ff fae9 	bl	80047fc <_malloc_r>
 800522a:	4605      	mov	r5, r0
 800522c:	2800      	cmp	r0, #0
 800522e:	d0ed      	beq.n	800520c <_realloc_r+0x1e>
 8005230:	42bc      	cmp	r4, r7
 8005232:	4622      	mov	r2, r4
 8005234:	4631      	mov	r1, r6
 8005236:	bf28      	it	cs
 8005238:	463a      	movcs	r2, r7
 800523a:	f7fe fad6 	bl	80037ea <memcpy>
 800523e:	4631      	mov	r1, r6
 8005240:	4640      	mov	r0, r8
 8005242:	f000 f9f5 	bl	8005630 <_free_r>
 8005246:	e7e1      	b.n	800520c <_realloc_r+0x1e>
 8005248:	4635      	mov	r5, r6
 800524a:	e7df      	b.n	800520c <_realloc_r+0x1e>

0800524c <__swbuf_r>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	460e      	mov	r6, r1
 8005250:	4614      	mov	r4, r2
 8005252:	4605      	mov	r5, r0
 8005254:	b118      	cbz	r0, 800525e <__swbuf_r+0x12>
 8005256:	6a03      	ldr	r3, [r0, #32]
 8005258:	b90b      	cbnz	r3, 800525e <__swbuf_r+0x12>
 800525a:	f7fe fa1b 	bl	8003694 <__sinit>
 800525e:	69a3      	ldr	r3, [r4, #24]
 8005260:	60a3      	str	r3, [r4, #8]
 8005262:	89a3      	ldrh	r3, [r4, #12]
 8005264:	071a      	lsls	r2, r3, #28
 8005266:	d525      	bpl.n	80052b4 <__swbuf_r+0x68>
 8005268:	6923      	ldr	r3, [r4, #16]
 800526a:	b31b      	cbz	r3, 80052b4 <__swbuf_r+0x68>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	6922      	ldr	r2, [r4, #16]
 8005270:	1a98      	subs	r0, r3, r2
 8005272:	6963      	ldr	r3, [r4, #20]
 8005274:	b2f6      	uxtb	r6, r6
 8005276:	4283      	cmp	r3, r0
 8005278:	4637      	mov	r7, r6
 800527a:	dc04      	bgt.n	8005286 <__swbuf_r+0x3a>
 800527c:	4621      	mov	r1, r4
 800527e:	4628      	mov	r0, r5
 8005280:	f7ff fbc2 	bl	8004a08 <_fflush_r>
 8005284:	b9e0      	cbnz	r0, 80052c0 <__swbuf_r+0x74>
 8005286:	68a3      	ldr	r3, [r4, #8]
 8005288:	3b01      	subs	r3, #1
 800528a:	60a3      	str	r3, [r4, #8]
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	6022      	str	r2, [r4, #0]
 8005292:	701e      	strb	r6, [r3, #0]
 8005294:	6962      	ldr	r2, [r4, #20]
 8005296:	1c43      	adds	r3, r0, #1
 8005298:	429a      	cmp	r2, r3
 800529a:	d004      	beq.n	80052a6 <__swbuf_r+0x5a>
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	07db      	lsls	r3, r3, #31
 80052a0:	d506      	bpl.n	80052b0 <__swbuf_r+0x64>
 80052a2:	2e0a      	cmp	r6, #10
 80052a4:	d104      	bne.n	80052b0 <__swbuf_r+0x64>
 80052a6:	4621      	mov	r1, r4
 80052a8:	4628      	mov	r0, r5
 80052aa:	f7ff fbad 	bl	8004a08 <_fflush_r>
 80052ae:	b938      	cbnz	r0, 80052c0 <__swbuf_r+0x74>
 80052b0:	4638      	mov	r0, r7
 80052b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052b4:	4621      	mov	r1, r4
 80052b6:	4628      	mov	r0, r5
 80052b8:	f000 f806 	bl	80052c8 <__swsetup_r>
 80052bc:	2800      	cmp	r0, #0
 80052be:	d0d5      	beq.n	800526c <__swbuf_r+0x20>
 80052c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80052c4:	e7f4      	b.n	80052b0 <__swbuf_r+0x64>
	...

080052c8 <__swsetup_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4b2a      	ldr	r3, [pc, #168]	; (8005374 <__swsetup_r+0xac>)
 80052cc:	4605      	mov	r5, r0
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	460c      	mov	r4, r1
 80052d2:	b118      	cbz	r0, 80052dc <__swsetup_r+0x14>
 80052d4:	6a03      	ldr	r3, [r0, #32]
 80052d6:	b90b      	cbnz	r3, 80052dc <__swsetup_r+0x14>
 80052d8:	f7fe f9dc 	bl	8003694 <__sinit>
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052e2:	0718      	lsls	r0, r3, #28
 80052e4:	d422      	bmi.n	800532c <__swsetup_r+0x64>
 80052e6:	06d9      	lsls	r1, r3, #27
 80052e8:	d407      	bmi.n	80052fa <__swsetup_r+0x32>
 80052ea:	2309      	movs	r3, #9
 80052ec:	602b      	str	r3, [r5, #0]
 80052ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052f2:	81a3      	strh	r3, [r4, #12]
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052f8:	e034      	b.n	8005364 <__swsetup_r+0x9c>
 80052fa:	0758      	lsls	r0, r3, #29
 80052fc:	d512      	bpl.n	8005324 <__swsetup_r+0x5c>
 80052fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005300:	b141      	cbz	r1, 8005314 <__swsetup_r+0x4c>
 8005302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005306:	4299      	cmp	r1, r3
 8005308:	d002      	beq.n	8005310 <__swsetup_r+0x48>
 800530a:	4628      	mov	r0, r5
 800530c:	f000 f990 	bl	8005630 <_free_r>
 8005310:	2300      	movs	r3, #0
 8005312:	6363      	str	r3, [r4, #52]	; 0x34
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800531a:	81a3      	strh	r3, [r4, #12]
 800531c:	2300      	movs	r3, #0
 800531e:	6063      	str	r3, [r4, #4]
 8005320:	6923      	ldr	r3, [r4, #16]
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f043 0308 	orr.w	r3, r3, #8
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	6923      	ldr	r3, [r4, #16]
 800532e:	b94b      	cbnz	r3, 8005344 <__swsetup_r+0x7c>
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800533a:	d003      	beq.n	8005344 <__swsetup_r+0x7c>
 800533c:	4621      	mov	r1, r4
 800533e:	4628      	mov	r0, r5
 8005340:	f000 f840 	bl	80053c4 <__smakebuf_r>
 8005344:	89a0      	ldrh	r0, [r4, #12]
 8005346:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800534a:	f010 0301 	ands.w	r3, r0, #1
 800534e:	d00a      	beq.n	8005366 <__swsetup_r+0x9e>
 8005350:	2300      	movs	r3, #0
 8005352:	60a3      	str	r3, [r4, #8]
 8005354:	6963      	ldr	r3, [r4, #20]
 8005356:	425b      	negs	r3, r3
 8005358:	61a3      	str	r3, [r4, #24]
 800535a:	6923      	ldr	r3, [r4, #16]
 800535c:	b943      	cbnz	r3, 8005370 <__swsetup_r+0xa8>
 800535e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005362:	d1c4      	bne.n	80052ee <__swsetup_r+0x26>
 8005364:	bd38      	pop	{r3, r4, r5, pc}
 8005366:	0781      	lsls	r1, r0, #30
 8005368:	bf58      	it	pl
 800536a:	6963      	ldrpl	r3, [r4, #20]
 800536c:	60a3      	str	r3, [r4, #8]
 800536e:	e7f4      	b.n	800535a <__swsetup_r+0x92>
 8005370:	2000      	movs	r0, #0
 8005372:	e7f7      	b.n	8005364 <__swsetup_r+0x9c>
 8005374:	20007d2c 	.word	0x20007d2c

08005378 <__swhatbuf_r>:
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	460c      	mov	r4, r1
 800537c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005380:	2900      	cmp	r1, #0
 8005382:	b096      	sub	sp, #88	; 0x58
 8005384:	4615      	mov	r5, r2
 8005386:	461e      	mov	r6, r3
 8005388:	da0d      	bge.n	80053a6 <__swhatbuf_r+0x2e>
 800538a:	89a3      	ldrh	r3, [r4, #12]
 800538c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005390:	f04f 0100 	mov.w	r1, #0
 8005394:	bf0c      	ite	eq
 8005396:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800539a:	2340      	movne	r3, #64	; 0x40
 800539c:	2000      	movs	r0, #0
 800539e:	6031      	str	r1, [r6, #0]
 80053a0:	602b      	str	r3, [r5, #0]
 80053a2:	b016      	add	sp, #88	; 0x58
 80053a4:	bd70      	pop	{r4, r5, r6, pc}
 80053a6:	466a      	mov	r2, sp
 80053a8:	f000 f8a6 	bl	80054f8 <_fstat_r>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	dbec      	blt.n	800538a <__swhatbuf_r+0x12>
 80053b0:	9901      	ldr	r1, [sp, #4]
 80053b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80053b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80053ba:	4259      	negs	r1, r3
 80053bc:	4159      	adcs	r1, r3
 80053be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053c2:	e7eb      	b.n	800539c <__swhatbuf_r+0x24>

080053c4 <__smakebuf_r>:
 80053c4:	898b      	ldrh	r3, [r1, #12]
 80053c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053c8:	079d      	lsls	r5, r3, #30
 80053ca:	4606      	mov	r6, r0
 80053cc:	460c      	mov	r4, r1
 80053ce:	d507      	bpl.n	80053e0 <__smakebuf_r+0x1c>
 80053d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	6123      	str	r3, [r4, #16]
 80053d8:	2301      	movs	r3, #1
 80053da:	6163      	str	r3, [r4, #20]
 80053dc:	b002      	add	sp, #8
 80053de:	bd70      	pop	{r4, r5, r6, pc}
 80053e0:	ab01      	add	r3, sp, #4
 80053e2:	466a      	mov	r2, sp
 80053e4:	f7ff ffc8 	bl	8005378 <__swhatbuf_r>
 80053e8:	9900      	ldr	r1, [sp, #0]
 80053ea:	4605      	mov	r5, r0
 80053ec:	4630      	mov	r0, r6
 80053ee:	f7ff fa05 	bl	80047fc <_malloc_r>
 80053f2:	b948      	cbnz	r0, 8005408 <__smakebuf_r+0x44>
 80053f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053f8:	059a      	lsls	r2, r3, #22
 80053fa:	d4ef      	bmi.n	80053dc <__smakebuf_r+0x18>
 80053fc:	f023 0303 	bic.w	r3, r3, #3
 8005400:	f043 0302 	orr.w	r3, r3, #2
 8005404:	81a3      	strh	r3, [r4, #12]
 8005406:	e7e3      	b.n	80053d0 <__smakebuf_r+0xc>
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	6020      	str	r0, [r4, #0]
 800540c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005410:	81a3      	strh	r3, [r4, #12]
 8005412:	9b00      	ldr	r3, [sp, #0]
 8005414:	6163      	str	r3, [r4, #20]
 8005416:	9b01      	ldr	r3, [sp, #4]
 8005418:	6120      	str	r0, [r4, #16]
 800541a:	b15b      	cbz	r3, 8005434 <__smakebuf_r+0x70>
 800541c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005420:	4630      	mov	r0, r6
 8005422:	f000 f87b 	bl	800551c <_isatty_r>
 8005426:	b128      	cbz	r0, 8005434 <__smakebuf_r+0x70>
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	f023 0303 	bic.w	r3, r3, #3
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	81a3      	strh	r3, [r4, #12]
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	431d      	orrs	r5, r3
 8005438:	81a5      	strh	r5, [r4, #12]
 800543a:	e7cf      	b.n	80053dc <__smakebuf_r+0x18>

0800543c <_putc_r>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	460d      	mov	r5, r1
 8005440:	4614      	mov	r4, r2
 8005442:	4606      	mov	r6, r0
 8005444:	b118      	cbz	r0, 800544e <_putc_r+0x12>
 8005446:	6a03      	ldr	r3, [r0, #32]
 8005448:	b90b      	cbnz	r3, 800544e <_putc_r+0x12>
 800544a:	f7fe f923 	bl	8003694 <__sinit>
 800544e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005450:	07d8      	lsls	r0, r3, #31
 8005452:	d405      	bmi.n	8005460 <_putc_r+0x24>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	0599      	lsls	r1, r3, #22
 8005458:	d402      	bmi.n	8005460 <_putc_r+0x24>
 800545a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800545c:	f7fe f9c3 	bl	80037e6 <__retarget_lock_acquire_recursive>
 8005460:	68a3      	ldr	r3, [r4, #8]
 8005462:	3b01      	subs	r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	60a3      	str	r3, [r4, #8]
 8005468:	da05      	bge.n	8005476 <_putc_r+0x3a>
 800546a:	69a2      	ldr	r2, [r4, #24]
 800546c:	4293      	cmp	r3, r2
 800546e:	db12      	blt.n	8005496 <_putc_r+0x5a>
 8005470:	b2eb      	uxtb	r3, r5
 8005472:	2b0a      	cmp	r3, #10
 8005474:	d00f      	beq.n	8005496 <_putc_r+0x5a>
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	6022      	str	r2, [r4, #0]
 800547c:	701d      	strb	r5, [r3, #0]
 800547e:	b2ed      	uxtb	r5, r5
 8005480:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005482:	07da      	lsls	r2, r3, #31
 8005484:	d405      	bmi.n	8005492 <_putc_r+0x56>
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	059b      	lsls	r3, r3, #22
 800548a:	d402      	bmi.n	8005492 <_putc_r+0x56>
 800548c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800548e:	f7fe f9ab 	bl	80037e8 <__retarget_lock_release_recursive>
 8005492:	4628      	mov	r0, r5
 8005494:	bd70      	pop	{r4, r5, r6, pc}
 8005496:	4629      	mov	r1, r5
 8005498:	4622      	mov	r2, r4
 800549a:	4630      	mov	r0, r6
 800549c:	f7ff fed6 	bl	800524c <__swbuf_r>
 80054a0:	4605      	mov	r5, r0
 80054a2:	e7ed      	b.n	8005480 <_putc_r+0x44>

080054a4 <memmove>:
 80054a4:	4288      	cmp	r0, r1
 80054a6:	b510      	push	{r4, lr}
 80054a8:	eb01 0402 	add.w	r4, r1, r2
 80054ac:	d902      	bls.n	80054b4 <memmove+0x10>
 80054ae:	4284      	cmp	r4, r0
 80054b0:	4623      	mov	r3, r4
 80054b2:	d807      	bhi.n	80054c4 <memmove+0x20>
 80054b4:	1e43      	subs	r3, r0, #1
 80054b6:	42a1      	cmp	r1, r4
 80054b8:	d008      	beq.n	80054cc <memmove+0x28>
 80054ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054c2:	e7f8      	b.n	80054b6 <memmove+0x12>
 80054c4:	4402      	add	r2, r0
 80054c6:	4601      	mov	r1, r0
 80054c8:	428a      	cmp	r2, r1
 80054ca:	d100      	bne.n	80054ce <memmove+0x2a>
 80054cc:	bd10      	pop	{r4, pc}
 80054ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054d6:	e7f7      	b.n	80054c8 <memmove+0x24>

080054d8 <_close_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d06      	ldr	r5, [pc, #24]	; (80054f4 <_close_r+0x1c>)
 80054dc:	2300      	movs	r3, #0
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	602b      	str	r3, [r5, #0]
 80054e4:	f7fc ff0e 	bl	8002304 <_close>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_close_r+0x1a>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_close_r+0x1a>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	2000ac10 	.word	0x2000ac10

080054f8 <_fstat_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d07      	ldr	r5, [pc, #28]	; (8005518 <_fstat_r+0x20>)
 80054fc:	2300      	movs	r3, #0
 80054fe:	4604      	mov	r4, r0
 8005500:	4608      	mov	r0, r1
 8005502:	4611      	mov	r1, r2
 8005504:	602b      	str	r3, [r5, #0]
 8005506:	f7fc ff09 	bl	800231c <_fstat>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	d102      	bne.n	8005514 <_fstat_r+0x1c>
 800550e:	682b      	ldr	r3, [r5, #0]
 8005510:	b103      	cbz	r3, 8005514 <_fstat_r+0x1c>
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	bd38      	pop	{r3, r4, r5, pc}
 8005516:	bf00      	nop
 8005518:	2000ac10 	.word	0x2000ac10

0800551c <_isatty_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d06      	ldr	r5, [pc, #24]	; (8005538 <_isatty_r+0x1c>)
 8005520:	2300      	movs	r3, #0
 8005522:	4604      	mov	r4, r0
 8005524:	4608      	mov	r0, r1
 8005526:	602b      	str	r3, [r5, #0]
 8005528:	f7fc ff08 	bl	800233c <_isatty>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d102      	bne.n	8005536 <_isatty_r+0x1a>
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	b103      	cbz	r3, 8005536 <_isatty_r+0x1a>
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	2000ac10 	.word	0x2000ac10

0800553c <_lseek_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4d07      	ldr	r5, [pc, #28]	; (800555c <_lseek_r+0x20>)
 8005540:	4604      	mov	r4, r0
 8005542:	4608      	mov	r0, r1
 8005544:	4611      	mov	r1, r2
 8005546:	2200      	movs	r2, #0
 8005548:	602a      	str	r2, [r5, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	f7fc ff01 	bl	8002352 <_lseek>
 8005550:	1c43      	adds	r3, r0, #1
 8005552:	d102      	bne.n	800555a <_lseek_r+0x1e>
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	b103      	cbz	r3, 800555a <_lseek_r+0x1e>
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	bd38      	pop	{r3, r4, r5, pc}
 800555c:	2000ac10 	.word	0x2000ac10

08005560 <_read_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4d07      	ldr	r5, [pc, #28]	; (8005580 <_read_r+0x20>)
 8005564:	4604      	mov	r4, r0
 8005566:	4608      	mov	r0, r1
 8005568:	4611      	mov	r1, r2
 800556a:	2200      	movs	r2, #0
 800556c:	602a      	str	r2, [r5, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	f7fc fe8f 	bl	8002292 <_read>
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	d102      	bne.n	800557e <_read_r+0x1e>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	b103      	cbz	r3, 800557e <_read_r+0x1e>
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	2000ac10 	.word	0x2000ac10

08005584 <_sbrk_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	4d06      	ldr	r5, [pc, #24]	; (80055a0 <_sbrk_r+0x1c>)
 8005588:	2300      	movs	r3, #0
 800558a:	4604      	mov	r4, r0
 800558c:	4608      	mov	r0, r1
 800558e:	602b      	str	r3, [r5, #0]
 8005590:	f7fc feec 	bl	800236c <_sbrk>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d102      	bne.n	800559e <_sbrk_r+0x1a>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	b103      	cbz	r3, 800559e <_sbrk_r+0x1a>
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	bd38      	pop	{r3, r4, r5, pc}
 80055a0:	2000ac10 	.word	0x2000ac10

080055a4 <_write_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4d07      	ldr	r5, [pc, #28]	; (80055c4 <_write_r+0x20>)
 80055a8:	4604      	mov	r4, r0
 80055aa:	4608      	mov	r0, r1
 80055ac:	4611      	mov	r1, r2
 80055ae:	2200      	movs	r2, #0
 80055b0:	602a      	str	r2, [r5, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	f7fc fe8a 	bl	80022cc <_write>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d102      	bne.n	80055c2 <_write_r+0x1e>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	b103      	cbz	r3, 80055c2 <_write_r+0x1e>
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	2000ac10 	.word	0x2000ac10

080055c8 <__assert_func>:
 80055c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055ca:	4614      	mov	r4, r2
 80055cc:	461a      	mov	r2, r3
 80055ce:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <__assert_func+0x2c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4605      	mov	r5, r0
 80055d4:	68d8      	ldr	r0, [r3, #12]
 80055d6:	b14c      	cbz	r4, 80055ec <__assert_func+0x24>
 80055d8:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <__assert_func+0x30>)
 80055da:	9100      	str	r1, [sp, #0]
 80055dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055e0:	4906      	ldr	r1, [pc, #24]	; (80055fc <__assert_func+0x34>)
 80055e2:	462b      	mov	r3, r5
 80055e4:	f000 f88a 	bl	80056fc <fiprintf>
 80055e8:	f000 f8a7 	bl	800573a <abort>
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <__assert_func+0x38>)
 80055ee:	461c      	mov	r4, r3
 80055f0:	e7f3      	b.n	80055da <__assert_func+0x12>
 80055f2:	bf00      	nop
 80055f4:	20007d2c 	.word	0x20007d2c
 80055f8:	08005f27 	.word	0x08005f27
 80055fc:	08005f34 	.word	0x08005f34
 8005600:	08005f62 	.word	0x08005f62

08005604 <_calloc_r>:
 8005604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005606:	fba1 2402 	umull	r2, r4, r1, r2
 800560a:	b94c      	cbnz	r4, 8005620 <_calloc_r+0x1c>
 800560c:	4611      	mov	r1, r2
 800560e:	9201      	str	r2, [sp, #4]
 8005610:	f7ff f8f4 	bl	80047fc <_malloc_r>
 8005614:	9a01      	ldr	r2, [sp, #4]
 8005616:	4605      	mov	r5, r0
 8005618:	b930      	cbnz	r0, 8005628 <_calloc_r+0x24>
 800561a:	4628      	mov	r0, r5
 800561c:	b003      	add	sp, #12
 800561e:	bd30      	pop	{r4, r5, pc}
 8005620:	220c      	movs	r2, #12
 8005622:	6002      	str	r2, [r0, #0]
 8005624:	2500      	movs	r5, #0
 8005626:	e7f8      	b.n	800561a <_calloc_r+0x16>
 8005628:	4621      	mov	r1, r4
 800562a:	f7fe f8a4 	bl	8003776 <memset>
 800562e:	e7f4      	b.n	800561a <_calloc_r+0x16>

08005630 <_free_r>:
 8005630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005632:	2900      	cmp	r1, #0
 8005634:	d044      	beq.n	80056c0 <_free_r+0x90>
 8005636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800563a:	9001      	str	r0, [sp, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f1a1 0404 	sub.w	r4, r1, #4
 8005642:	bfb8      	it	lt
 8005644:	18e4      	addlt	r4, r4, r3
 8005646:	f7ff fa07 	bl	8004a58 <__malloc_lock>
 800564a:	4a1e      	ldr	r2, [pc, #120]	; (80056c4 <_free_r+0x94>)
 800564c:	9801      	ldr	r0, [sp, #4]
 800564e:	6813      	ldr	r3, [r2, #0]
 8005650:	b933      	cbnz	r3, 8005660 <_free_r+0x30>
 8005652:	6063      	str	r3, [r4, #4]
 8005654:	6014      	str	r4, [r2, #0]
 8005656:	b003      	add	sp, #12
 8005658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800565c:	f7ff ba02 	b.w	8004a64 <__malloc_unlock>
 8005660:	42a3      	cmp	r3, r4
 8005662:	d908      	bls.n	8005676 <_free_r+0x46>
 8005664:	6825      	ldr	r5, [r4, #0]
 8005666:	1961      	adds	r1, r4, r5
 8005668:	428b      	cmp	r3, r1
 800566a:	bf01      	itttt	eq
 800566c:	6819      	ldreq	r1, [r3, #0]
 800566e:	685b      	ldreq	r3, [r3, #4]
 8005670:	1949      	addeq	r1, r1, r5
 8005672:	6021      	streq	r1, [r4, #0]
 8005674:	e7ed      	b.n	8005652 <_free_r+0x22>
 8005676:	461a      	mov	r2, r3
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	b10b      	cbz	r3, 8005680 <_free_r+0x50>
 800567c:	42a3      	cmp	r3, r4
 800567e:	d9fa      	bls.n	8005676 <_free_r+0x46>
 8005680:	6811      	ldr	r1, [r2, #0]
 8005682:	1855      	adds	r5, r2, r1
 8005684:	42a5      	cmp	r5, r4
 8005686:	d10b      	bne.n	80056a0 <_free_r+0x70>
 8005688:	6824      	ldr	r4, [r4, #0]
 800568a:	4421      	add	r1, r4
 800568c:	1854      	adds	r4, r2, r1
 800568e:	42a3      	cmp	r3, r4
 8005690:	6011      	str	r1, [r2, #0]
 8005692:	d1e0      	bne.n	8005656 <_free_r+0x26>
 8005694:	681c      	ldr	r4, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	6053      	str	r3, [r2, #4]
 800569a:	440c      	add	r4, r1
 800569c:	6014      	str	r4, [r2, #0]
 800569e:	e7da      	b.n	8005656 <_free_r+0x26>
 80056a0:	d902      	bls.n	80056a8 <_free_r+0x78>
 80056a2:	230c      	movs	r3, #12
 80056a4:	6003      	str	r3, [r0, #0]
 80056a6:	e7d6      	b.n	8005656 <_free_r+0x26>
 80056a8:	6825      	ldr	r5, [r4, #0]
 80056aa:	1961      	adds	r1, r4, r5
 80056ac:	428b      	cmp	r3, r1
 80056ae:	bf04      	itt	eq
 80056b0:	6819      	ldreq	r1, [r3, #0]
 80056b2:	685b      	ldreq	r3, [r3, #4]
 80056b4:	6063      	str	r3, [r4, #4]
 80056b6:	bf04      	itt	eq
 80056b8:	1949      	addeq	r1, r1, r5
 80056ba:	6021      	streq	r1, [r4, #0]
 80056bc:	6054      	str	r4, [r2, #4]
 80056be:	e7ca      	b.n	8005656 <_free_r+0x26>
 80056c0:	b003      	add	sp, #12
 80056c2:	bd30      	pop	{r4, r5, pc}
 80056c4:	2000ac08 	.word	0x2000ac08

080056c8 <__ascii_mbtowc>:
 80056c8:	b082      	sub	sp, #8
 80056ca:	b901      	cbnz	r1, 80056ce <__ascii_mbtowc+0x6>
 80056cc:	a901      	add	r1, sp, #4
 80056ce:	b142      	cbz	r2, 80056e2 <__ascii_mbtowc+0x1a>
 80056d0:	b14b      	cbz	r3, 80056e6 <__ascii_mbtowc+0x1e>
 80056d2:	7813      	ldrb	r3, [r2, #0]
 80056d4:	600b      	str	r3, [r1, #0]
 80056d6:	7812      	ldrb	r2, [r2, #0]
 80056d8:	1e10      	subs	r0, r2, #0
 80056da:	bf18      	it	ne
 80056dc:	2001      	movne	r0, #1
 80056de:	b002      	add	sp, #8
 80056e0:	4770      	bx	lr
 80056e2:	4610      	mov	r0, r2
 80056e4:	e7fb      	b.n	80056de <__ascii_mbtowc+0x16>
 80056e6:	f06f 0001 	mvn.w	r0, #1
 80056ea:	e7f8      	b.n	80056de <__ascii_mbtowc+0x16>

080056ec <_malloc_usable_size_r>:
 80056ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f0:	1f18      	subs	r0, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bfbc      	itt	lt
 80056f6:	580b      	ldrlt	r3, [r1, r0]
 80056f8:	18c0      	addlt	r0, r0, r3
 80056fa:	4770      	bx	lr

080056fc <fiprintf>:
 80056fc:	b40e      	push	{r1, r2, r3}
 80056fe:	b503      	push	{r0, r1, lr}
 8005700:	4601      	mov	r1, r0
 8005702:	ab03      	add	r3, sp, #12
 8005704:	4805      	ldr	r0, [pc, #20]	; (800571c <fiprintf+0x20>)
 8005706:	f853 2b04 	ldr.w	r2, [r3], #4
 800570a:	6800      	ldr	r0, [r0, #0]
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	f000 f845 	bl	800579c <_vfiprintf_r>
 8005712:	b002      	add	sp, #8
 8005714:	f85d eb04 	ldr.w	lr, [sp], #4
 8005718:	b003      	add	sp, #12
 800571a:	4770      	bx	lr
 800571c:	20007d2c 	.word	0x20007d2c

08005720 <__ascii_wctomb>:
 8005720:	b149      	cbz	r1, 8005736 <__ascii_wctomb+0x16>
 8005722:	2aff      	cmp	r2, #255	; 0xff
 8005724:	bf85      	ittet	hi
 8005726:	238a      	movhi	r3, #138	; 0x8a
 8005728:	6003      	strhi	r3, [r0, #0]
 800572a:	700a      	strbls	r2, [r1, #0]
 800572c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005730:	bf98      	it	ls
 8005732:	2001      	movls	r0, #1
 8005734:	4770      	bx	lr
 8005736:	4608      	mov	r0, r1
 8005738:	4770      	bx	lr

0800573a <abort>:
 800573a:	b508      	push	{r3, lr}
 800573c:	2006      	movs	r0, #6
 800573e:	f000 f96f 	bl	8005a20 <raise>
 8005742:	2001      	movs	r0, #1
 8005744:	f7fc fd9b 	bl	800227e <_exit>

08005748 <__sfputc_r>:
 8005748:	6893      	ldr	r3, [r2, #8]
 800574a:	3b01      	subs	r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	b410      	push	{r4}
 8005750:	6093      	str	r3, [r2, #8]
 8005752:	da08      	bge.n	8005766 <__sfputc_r+0x1e>
 8005754:	6994      	ldr	r4, [r2, #24]
 8005756:	42a3      	cmp	r3, r4
 8005758:	db01      	blt.n	800575e <__sfputc_r+0x16>
 800575a:	290a      	cmp	r1, #10
 800575c:	d103      	bne.n	8005766 <__sfputc_r+0x1e>
 800575e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005762:	f7ff bd73 	b.w	800524c <__swbuf_r>
 8005766:	6813      	ldr	r3, [r2, #0]
 8005768:	1c58      	adds	r0, r3, #1
 800576a:	6010      	str	r0, [r2, #0]
 800576c:	7019      	strb	r1, [r3, #0]
 800576e:	4608      	mov	r0, r1
 8005770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005774:	4770      	bx	lr

08005776 <__sfputs_r>:
 8005776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005778:	4606      	mov	r6, r0
 800577a:	460f      	mov	r7, r1
 800577c:	4614      	mov	r4, r2
 800577e:	18d5      	adds	r5, r2, r3
 8005780:	42ac      	cmp	r4, r5
 8005782:	d101      	bne.n	8005788 <__sfputs_r+0x12>
 8005784:	2000      	movs	r0, #0
 8005786:	e007      	b.n	8005798 <__sfputs_r+0x22>
 8005788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800578c:	463a      	mov	r2, r7
 800578e:	4630      	mov	r0, r6
 8005790:	f7ff ffda 	bl	8005748 <__sfputc_r>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d1f3      	bne.n	8005780 <__sfputs_r+0xa>
 8005798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800579c <_vfiprintf_r>:
 800579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	460d      	mov	r5, r1
 80057a2:	b09d      	sub	sp, #116	; 0x74
 80057a4:	4614      	mov	r4, r2
 80057a6:	4698      	mov	r8, r3
 80057a8:	4606      	mov	r6, r0
 80057aa:	b118      	cbz	r0, 80057b4 <_vfiprintf_r+0x18>
 80057ac:	6a03      	ldr	r3, [r0, #32]
 80057ae:	b90b      	cbnz	r3, 80057b4 <_vfiprintf_r+0x18>
 80057b0:	f7fd ff70 	bl	8003694 <__sinit>
 80057b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057b6:	07d9      	lsls	r1, r3, #31
 80057b8:	d405      	bmi.n	80057c6 <_vfiprintf_r+0x2a>
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	059a      	lsls	r2, r3, #22
 80057be:	d402      	bmi.n	80057c6 <_vfiprintf_r+0x2a>
 80057c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057c2:	f7fe f810 	bl	80037e6 <__retarget_lock_acquire_recursive>
 80057c6:	89ab      	ldrh	r3, [r5, #12]
 80057c8:	071b      	lsls	r3, r3, #28
 80057ca:	d501      	bpl.n	80057d0 <_vfiprintf_r+0x34>
 80057cc:	692b      	ldr	r3, [r5, #16]
 80057ce:	b99b      	cbnz	r3, 80057f8 <_vfiprintf_r+0x5c>
 80057d0:	4629      	mov	r1, r5
 80057d2:	4630      	mov	r0, r6
 80057d4:	f7ff fd78 	bl	80052c8 <__swsetup_r>
 80057d8:	b170      	cbz	r0, 80057f8 <_vfiprintf_r+0x5c>
 80057da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057dc:	07dc      	lsls	r4, r3, #31
 80057de:	d504      	bpl.n	80057ea <_vfiprintf_r+0x4e>
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057e4:	b01d      	add	sp, #116	; 0x74
 80057e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ea:	89ab      	ldrh	r3, [r5, #12]
 80057ec:	0598      	lsls	r0, r3, #22
 80057ee:	d4f7      	bmi.n	80057e0 <_vfiprintf_r+0x44>
 80057f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057f2:	f7fd fff9 	bl	80037e8 <__retarget_lock_release_recursive>
 80057f6:	e7f3      	b.n	80057e0 <_vfiprintf_r+0x44>
 80057f8:	2300      	movs	r3, #0
 80057fa:	9309      	str	r3, [sp, #36]	; 0x24
 80057fc:	2320      	movs	r3, #32
 80057fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005802:	f8cd 800c 	str.w	r8, [sp, #12]
 8005806:	2330      	movs	r3, #48	; 0x30
 8005808:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80059bc <_vfiprintf_r+0x220>
 800580c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005810:	f04f 0901 	mov.w	r9, #1
 8005814:	4623      	mov	r3, r4
 8005816:	469a      	mov	sl, r3
 8005818:	f813 2b01 	ldrb.w	r2, [r3], #1
 800581c:	b10a      	cbz	r2, 8005822 <_vfiprintf_r+0x86>
 800581e:	2a25      	cmp	r2, #37	; 0x25
 8005820:	d1f9      	bne.n	8005816 <_vfiprintf_r+0x7a>
 8005822:	ebba 0b04 	subs.w	fp, sl, r4
 8005826:	d00b      	beq.n	8005840 <_vfiprintf_r+0xa4>
 8005828:	465b      	mov	r3, fp
 800582a:	4622      	mov	r2, r4
 800582c:	4629      	mov	r1, r5
 800582e:	4630      	mov	r0, r6
 8005830:	f7ff ffa1 	bl	8005776 <__sfputs_r>
 8005834:	3001      	adds	r0, #1
 8005836:	f000 80a9 	beq.w	800598c <_vfiprintf_r+0x1f0>
 800583a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800583c:	445a      	add	r2, fp
 800583e:	9209      	str	r2, [sp, #36]	; 0x24
 8005840:	f89a 3000 	ldrb.w	r3, [sl]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80a1 	beq.w	800598c <_vfiprintf_r+0x1f0>
 800584a:	2300      	movs	r3, #0
 800584c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005854:	f10a 0a01 	add.w	sl, sl, #1
 8005858:	9304      	str	r3, [sp, #16]
 800585a:	9307      	str	r3, [sp, #28]
 800585c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005860:	931a      	str	r3, [sp, #104]	; 0x68
 8005862:	4654      	mov	r4, sl
 8005864:	2205      	movs	r2, #5
 8005866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586a:	4854      	ldr	r0, [pc, #336]	; (80059bc <_vfiprintf_r+0x220>)
 800586c:	f7fa fcb0 	bl	80001d0 <memchr>
 8005870:	9a04      	ldr	r2, [sp, #16]
 8005872:	b9d8      	cbnz	r0, 80058ac <_vfiprintf_r+0x110>
 8005874:	06d1      	lsls	r1, r2, #27
 8005876:	bf44      	itt	mi
 8005878:	2320      	movmi	r3, #32
 800587a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800587e:	0713      	lsls	r3, r2, #28
 8005880:	bf44      	itt	mi
 8005882:	232b      	movmi	r3, #43	; 0x2b
 8005884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005888:	f89a 3000 	ldrb.w	r3, [sl]
 800588c:	2b2a      	cmp	r3, #42	; 0x2a
 800588e:	d015      	beq.n	80058bc <_vfiprintf_r+0x120>
 8005890:	9a07      	ldr	r2, [sp, #28]
 8005892:	4654      	mov	r4, sl
 8005894:	2000      	movs	r0, #0
 8005896:	f04f 0c0a 	mov.w	ip, #10
 800589a:	4621      	mov	r1, r4
 800589c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058a0:	3b30      	subs	r3, #48	; 0x30
 80058a2:	2b09      	cmp	r3, #9
 80058a4:	d94d      	bls.n	8005942 <_vfiprintf_r+0x1a6>
 80058a6:	b1b0      	cbz	r0, 80058d6 <_vfiprintf_r+0x13a>
 80058a8:	9207      	str	r2, [sp, #28]
 80058aa:	e014      	b.n	80058d6 <_vfiprintf_r+0x13a>
 80058ac:	eba0 0308 	sub.w	r3, r0, r8
 80058b0:	fa09 f303 	lsl.w	r3, r9, r3
 80058b4:	4313      	orrs	r3, r2
 80058b6:	9304      	str	r3, [sp, #16]
 80058b8:	46a2      	mov	sl, r4
 80058ba:	e7d2      	b.n	8005862 <_vfiprintf_r+0xc6>
 80058bc:	9b03      	ldr	r3, [sp, #12]
 80058be:	1d19      	adds	r1, r3, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	9103      	str	r1, [sp, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bfbb      	ittet	lt
 80058c8:	425b      	neglt	r3, r3
 80058ca:	f042 0202 	orrlt.w	r2, r2, #2
 80058ce:	9307      	strge	r3, [sp, #28]
 80058d0:	9307      	strlt	r3, [sp, #28]
 80058d2:	bfb8      	it	lt
 80058d4:	9204      	strlt	r2, [sp, #16]
 80058d6:	7823      	ldrb	r3, [r4, #0]
 80058d8:	2b2e      	cmp	r3, #46	; 0x2e
 80058da:	d10c      	bne.n	80058f6 <_vfiprintf_r+0x15a>
 80058dc:	7863      	ldrb	r3, [r4, #1]
 80058de:	2b2a      	cmp	r3, #42	; 0x2a
 80058e0:	d134      	bne.n	800594c <_vfiprintf_r+0x1b0>
 80058e2:	9b03      	ldr	r3, [sp, #12]
 80058e4:	1d1a      	adds	r2, r3, #4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	9203      	str	r2, [sp, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bfb8      	it	lt
 80058ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80058f2:	3402      	adds	r4, #2
 80058f4:	9305      	str	r3, [sp, #20]
 80058f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80059cc <_vfiprintf_r+0x230>
 80058fa:	7821      	ldrb	r1, [r4, #0]
 80058fc:	2203      	movs	r2, #3
 80058fe:	4650      	mov	r0, sl
 8005900:	f7fa fc66 	bl	80001d0 <memchr>
 8005904:	b138      	cbz	r0, 8005916 <_vfiprintf_r+0x17a>
 8005906:	9b04      	ldr	r3, [sp, #16]
 8005908:	eba0 000a 	sub.w	r0, r0, sl
 800590c:	2240      	movs	r2, #64	; 0x40
 800590e:	4082      	lsls	r2, r0
 8005910:	4313      	orrs	r3, r2
 8005912:	3401      	adds	r4, #1
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800591a:	4829      	ldr	r0, [pc, #164]	; (80059c0 <_vfiprintf_r+0x224>)
 800591c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005920:	2206      	movs	r2, #6
 8005922:	f7fa fc55 	bl	80001d0 <memchr>
 8005926:	2800      	cmp	r0, #0
 8005928:	d03f      	beq.n	80059aa <_vfiprintf_r+0x20e>
 800592a:	4b26      	ldr	r3, [pc, #152]	; (80059c4 <_vfiprintf_r+0x228>)
 800592c:	bb1b      	cbnz	r3, 8005976 <_vfiprintf_r+0x1da>
 800592e:	9b03      	ldr	r3, [sp, #12]
 8005930:	3307      	adds	r3, #7
 8005932:	f023 0307 	bic.w	r3, r3, #7
 8005936:	3308      	adds	r3, #8
 8005938:	9303      	str	r3, [sp, #12]
 800593a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800593c:	443b      	add	r3, r7
 800593e:	9309      	str	r3, [sp, #36]	; 0x24
 8005940:	e768      	b.n	8005814 <_vfiprintf_r+0x78>
 8005942:	fb0c 3202 	mla	r2, ip, r2, r3
 8005946:	460c      	mov	r4, r1
 8005948:	2001      	movs	r0, #1
 800594a:	e7a6      	b.n	800589a <_vfiprintf_r+0xfe>
 800594c:	2300      	movs	r3, #0
 800594e:	3401      	adds	r4, #1
 8005950:	9305      	str	r3, [sp, #20]
 8005952:	4619      	mov	r1, r3
 8005954:	f04f 0c0a 	mov.w	ip, #10
 8005958:	4620      	mov	r0, r4
 800595a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800595e:	3a30      	subs	r2, #48	; 0x30
 8005960:	2a09      	cmp	r2, #9
 8005962:	d903      	bls.n	800596c <_vfiprintf_r+0x1d0>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0c6      	beq.n	80058f6 <_vfiprintf_r+0x15a>
 8005968:	9105      	str	r1, [sp, #20]
 800596a:	e7c4      	b.n	80058f6 <_vfiprintf_r+0x15a>
 800596c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005970:	4604      	mov	r4, r0
 8005972:	2301      	movs	r3, #1
 8005974:	e7f0      	b.n	8005958 <_vfiprintf_r+0x1bc>
 8005976:	ab03      	add	r3, sp, #12
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	462a      	mov	r2, r5
 800597c:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <_vfiprintf_r+0x22c>)
 800597e:	a904      	add	r1, sp, #16
 8005980:	4630      	mov	r0, r6
 8005982:	f7fd fa35 	bl	8002df0 <_printf_float>
 8005986:	4607      	mov	r7, r0
 8005988:	1c78      	adds	r0, r7, #1
 800598a:	d1d6      	bne.n	800593a <_vfiprintf_r+0x19e>
 800598c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800598e:	07d9      	lsls	r1, r3, #31
 8005990:	d405      	bmi.n	800599e <_vfiprintf_r+0x202>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	059a      	lsls	r2, r3, #22
 8005996:	d402      	bmi.n	800599e <_vfiprintf_r+0x202>
 8005998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599a:	f7fd ff25 	bl	80037e8 <__retarget_lock_release_recursive>
 800599e:	89ab      	ldrh	r3, [r5, #12]
 80059a0:	065b      	lsls	r3, r3, #25
 80059a2:	f53f af1d 	bmi.w	80057e0 <_vfiprintf_r+0x44>
 80059a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059a8:	e71c      	b.n	80057e4 <_vfiprintf_r+0x48>
 80059aa:	ab03      	add	r3, sp, #12
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	462a      	mov	r2, r5
 80059b0:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <_vfiprintf_r+0x22c>)
 80059b2:	a904      	add	r1, sp, #16
 80059b4:	4630      	mov	r0, r6
 80059b6:	f7fd fcbf 	bl	8003338 <_printf_i>
 80059ba:	e7e4      	b.n	8005986 <_vfiprintf_r+0x1ea>
 80059bc:	08005cb2 	.word	0x08005cb2
 80059c0:	08005cbc 	.word	0x08005cbc
 80059c4:	08002df1 	.word	0x08002df1
 80059c8:	08005777 	.word	0x08005777
 80059cc:	08005cb8 	.word	0x08005cb8

080059d0 <_raise_r>:
 80059d0:	291f      	cmp	r1, #31
 80059d2:	b538      	push	{r3, r4, r5, lr}
 80059d4:	4604      	mov	r4, r0
 80059d6:	460d      	mov	r5, r1
 80059d8:	d904      	bls.n	80059e4 <_raise_r+0x14>
 80059da:	2316      	movs	r3, #22
 80059dc:	6003      	str	r3, [r0, #0]
 80059de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80059e6:	b112      	cbz	r2, 80059ee <_raise_r+0x1e>
 80059e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80059ec:	b94b      	cbnz	r3, 8005a02 <_raise_r+0x32>
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 f830 	bl	8005a54 <_getpid_r>
 80059f4:	462a      	mov	r2, r5
 80059f6:	4601      	mov	r1, r0
 80059f8:	4620      	mov	r0, r4
 80059fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059fe:	f000 b817 	b.w	8005a30 <_kill_r>
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d00a      	beq.n	8005a1c <_raise_r+0x4c>
 8005a06:	1c59      	adds	r1, r3, #1
 8005a08:	d103      	bne.n	8005a12 <_raise_r+0x42>
 8005a0a:	2316      	movs	r3, #22
 8005a0c:	6003      	str	r3, [r0, #0]
 8005a0e:	2001      	movs	r0, #1
 8005a10:	e7e7      	b.n	80059e2 <_raise_r+0x12>
 8005a12:	2400      	movs	r4, #0
 8005a14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005a18:	4628      	mov	r0, r5
 8005a1a:	4798      	blx	r3
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	e7e0      	b.n	80059e2 <_raise_r+0x12>

08005a20 <raise>:
 8005a20:	4b02      	ldr	r3, [pc, #8]	; (8005a2c <raise+0xc>)
 8005a22:	4601      	mov	r1, r0
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	f7ff bfd3 	b.w	80059d0 <_raise_r>
 8005a2a:	bf00      	nop
 8005a2c:	20007d2c 	.word	0x20007d2c

08005a30 <_kill_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4d07      	ldr	r5, [pc, #28]	; (8005a50 <_kill_r+0x20>)
 8005a34:	2300      	movs	r3, #0
 8005a36:	4604      	mov	r4, r0
 8005a38:	4608      	mov	r0, r1
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	602b      	str	r3, [r5, #0]
 8005a3e:	f7fc fc0e 	bl	800225e <_kill>
 8005a42:	1c43      	adds	r3, r0, #1
 8005a44:	d102      	bne.n	8005a4c <_kill_r+0x1c>
 8005a46:	682b      	ldr	r3, [r5, #0]
 8005a48:	b103      	cbz	r3, 8005a4c <_kill_r+0x1c>
 8005a4a:	6023      	str	r3, [r4, #0]
 8005a4c:	bd38      	pop	{r3, r4, r5, pc}
 8005a4e:	bf00      	nop
 8005a50:	2000ac10 	.word	0x2000ac10

08005a54 <_getpid_r>:
 8005a54:	f7fc bbfb 	b.w	800224e <_getpid>

08005a58 <_init>:
 8005a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5a:	bf00      	nop
 8005a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5e:	bc08      	pop	{r3}
 8005a60:	469e      	mov	lr, r3
 8005a62:	4770      	bx	lr

08005a64 <_fini>:
 8005a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a66:	bf00      	nop
 8005a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6a:	bc08      	pop	{r3}
 8005a6c:	469e      	mov	lr, r3
 8005a6e:	4770      	bx	lr
