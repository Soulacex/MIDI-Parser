unsigned char a = 26;
unsigned char b = 55;

char c = a + b

First, convert both a and b into hex:

unsigned char a = 26 -> 

16/26 Q: 1 R: 10

16/1 R: 1

In hex, it will be 1 and 10, in that order.

0x1 

0xA 

In binary both become,

0x1 = 0001
0xA = 1010

unsigned char b = 55 -> 

In binary 55 becomes 0011 0111


Adding both of these we get:

  0001 1010
+ 0011 0111
-----------
  0101  0001
  
  
Result of various operations:
c = a & b:
c = 0001 1010 & 0011 0111 = 0001 0010

-------------------------------------
c = a | b:
c = 0001 1010 | 0011 0111 = 0011 1111

-------------------------------------
c = a ^ b:
c = 0001 1010 ^ 0011 0111 = 0010 1101

-------------------------------------
c = ~a:
c = ~(0001 1010) = 1110 0101

-------------------------------------
c = a << 2;
c = 0001 1010 << 2 = 0110 1000

-------------------------------------
c = a >> 2
c = 0001 1010 >> 2 = 0000 0110

-------------------------------------





x = 1101 0110 // Set bit 3
mask = 1 << 3 // 0000 0001 << 3 -> 0000 1000

x = x | mask // 1101 1110
-------------------------------------
x = 1101 0110 // Clear bit 4
mask 1 << 4 
x = x & (~mask)

0001 0000 mask 
1110 1111 ~mask
1101 0110 & 
-------------
1100 0110
-------------------------------------
x = 1101 0110 // Toggle bit 5
mask = 1 << 5
x = x ^ mask

1101 0110
0010 0000 ^
1111 0110
0010 0000 ^
1101 0110



